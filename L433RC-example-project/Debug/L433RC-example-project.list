
L433RC-example-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063a8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  08006538  08006538  00007538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066fc  080066fc  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  080066fc  080066fc  000076fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006704  08006704  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006704  08006704  00007704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006708  08006708  00007708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800670c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d4  20000068  08006774  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000063c  08006774  0000863c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b41e  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026ab  00000000  00000000  000134b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae0  00000000  00000000  00015b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000802  00000000  00000000  00016648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000250a4  00000000  00000000  00016e4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eff8  00000000  00000000  0003beee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d885e  00000000  00000000  0004aee6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00123744  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032f8  00000000  00000000  00123788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00126a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006520 	.word	0x08006520

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08006520 	.word	0x08006520

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000274:	4b17      	ldr	r3, [pc, #92]	@ (80002d4 <MX_CAN1_Init+0x64>)
 8000276:	4a18      	ldr	r2, [pc, #96]	@ (80002d8 <MX_CAN1_Init+0x68>)
 8000278:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 20;
 800027a:	4b16      	ldr	r3, [pc, #88]	@ (80002d4 <MX_CAN1_Init+0x64>)
 800027c:	2214      	movs	r2, #20
 800027e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000280:	4b14      	ldr	r3, [pc, #80]	@ (80002d4 <MX_CAN1_Init+0x64>)
 8000282:	2200      	movs	r2, #0
 8000284:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000286:	4b13      	ldr	r3, [pc, #76]	@ (80002d4 <MX_CAN1_Init+0x64>)
 8000288:	2200      	movs	r2, #0
 800028a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800028c:	4b11      	ldr	r3, [pc, #68]	@ (80002d4 <MX_CAN1_Init+0x64>)
 800028e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000292:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000294:	4b0f      	ldr	r3, [pc, #60]	@ (80002d4 <MX_CAN1_Init+0x64>)
 8000296:	2200      	movs	r2, #0
 8000298:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800029a:	4b0e      	ldr	r3, [pc, #56]	@ (80002d4 <MX_CAN1_Init+0x64>)
 800029c:	2200      	movs	r2, #0
 800029e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80002a0:	4b0c      	ldr	r3, [pc, #48]	@ (80002d4 <MX_CAN1_Init+0x64>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80002a6:	4b0b      	ldr	r3, [pc, #44]	@ (80002d4 <MX_CAN1_Init+0x64>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80002ac:	4b09      	ldr	r3, [pc, #36]	@ (80002d4 <MX_CAN1_Init+0x64>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80002b2:	4b08      	ldr	r3, [pc, #32]	@ (80002d4 <MX_CAN1_Init+0x64>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80002b8:	4b06      	ldr	r3, [pc, #24]	@ (80002d4 <MX_CAN1_Init+0x64>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80002be:	4805      	ldr	r0, [pc, #20]	@ (80002d4 <MX_CAN1_Init+0x64>)
 80002c0:	f003 f9de 	bl	8003680 <HAL_CAN_Init>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80002ca:	f002 fd10 	bl	8002cee <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80002ce:	bf00      	nop
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	20000084 	.word	0x20000084
 80002d8:	40006400 	.word	0x40006400

080002dc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b08a      	sub	sp, #40	@ 0x28
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002e4:	f107 0314 	add.w	r3, r7, #20
 80002e8:	2200      	movs	r2, #0
 80002ea:	601a      	str	r2, [r3, #0]
 80002ec:	605a      	str	r2, [r3, #4]
 80002ee:	609a      	str	r2, [r3, #8]
 80002f0:	60da      	str	r2, [r3, #12]
 80002f2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a1c      	ldr	r2, [pc, #112]	@ (800036c <HAL_CAN_MspInit+0x90>)
 80002fa:	4293      	cmp	r3, r2
 80002fc:	d131      	bne.n	8000362 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80002fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000370 <HAL_CAN_MspInit+0x94>)
 8000300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000302:	4a1b      	ldr	r2, [pc, #108]	@ (8000370 <HAL_CAN_MspInit+0x94>)
 8000304:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000308:	6593      	str	r3, [r2, #88]	@ 0x58
 800030a:	4b19      	ldr	r3, [pc, #100]	@ (8000370 <HAL_CAN_MspInit+0x94>)
 800030c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800030e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000312:	613b      	str	r3, [r7, #16]
 8000314:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000316:	4b16      	ldr	r3, [pc, #88]	@ (8000370 <HAL_CAN_MspInit+0x94>)
 8000318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800031a:	4a15      	ldr	r2, [pc, #84]	@ (8000370 <HAL_CAN_MspInit+0x94>)
 800031c:	f043 0301 	orr.w	r3, r3, #1
 8000320:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000322:	4b13      	ldr	r3, [pc, #76]	@ (8000370 <HAL_CAN_MspInit+0x94>)
 8000324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000326:	f003 0301 	and.w	r3, r3, #1
 800032a:	60fb      	str	r3, [r7, #12]
 800032c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800032e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000332:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000334:	2302      	movs	r3, #2
 8000336:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000338:	2300      	movs	r3, #0
 800033a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800033c:	2303      	movs	r3, #3
 800033e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000340:	2309      	movs	r3, #9
 8000342:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000344:	f107 0314 	add.w	r3, r7, #20
 8000348:	4619      	mov	r1, r3
 800034a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800034e:	f004 f8f9 	bl	8004544 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000352:	2200      	movs	r2, #0
 8000354:	2100      	movs	r1, #0
 8000356:	2014      	movs	r0, #20
 8000358:	f004 f8bd 	bl	80044d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800035c:	2014      	movs	r0, #20
 800035e:	f004 f8d6 	bl	800450e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000362:	bf00      	nop
 8000364:	3728      	adds	r7, #40	@ 0x28
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	40006400 	.word	0x40006400
 8000370:	40021000 	.word	0x40021000

08000374 <canardInit>:
                void* mem_arena,
                size_t mem_arena_size,
                CanardOnTransferReception on_reception,
                CanardShouldAcceptTransfer should_accept,
                void* user_reference)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b086      	sub	sp, #24
 8000378:	af00      	add	r7, sp, #0
 800037a:	60f8      	str	r0, [r7, #12]
 800037c:	60b9      	str	r1, [r7, #8]
 800037e:	607a      	str	r2, [r7, #4]
 8000380:	603b      	str	r3, [r7, #0]
     * If your application fails here, make sure it's not built in 64-bit mode.
     * Refer to the design documentation for more info.
     */
    CANARD_ASSERT(CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE >= 5);

    memset(out_ins, 0, sizeof(*out_ins));
 8000382:	222c      	movs	r2, #44	@ 0x2c
 8000384:	2100      	movs	r1, #0
 8000386:	68f8      	ldr	r0, [r7, #12]
 8000388:	f005 fae4 	bl	8005954 <memset>

    out_ins->node_id = CANARD_BROADCAST_NODE_ID;
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	2200      	movs	r2, #0
 8000390:	701a      	strb	r2, [r3, #0]
    out_ins->on_reception = on_reception;
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	683a      	ldr	r2, [r7, #0]
 8000396:	609a      	str	r2, [r3, #8]
    out_ins->should_accept = should_accept;
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	6a3a      	ldr	r2, [r7, #32]
 800039c:	605a      	str	r2, [r3, #4]
    out_ins->rx_states = NULL;
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	2200      	movs	r2, #0
 80003a2:	621a      	str	r2, [r3, #32]
    out_ins->tx_queue = NULL;
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	2200      	movs	r2, #0
 80003a8:	625a      	str	r2, [r3, #36]	@ 0x24
    out_ins->user_reference = user_reference;
 80003aa:	68fb      	ldr	r3, [r7, #12]
 80003ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80003ae:	629a      	str	r2, [r3, #40]	@ 0x28
#if CANARD_ENABLE_TAO_OPTION
    out_ins->tao_disabled = false;
#endif
    size_t pool_capacity = mem_arena_size / CANARD_MEM_BLOCK_SIZE;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	095b      	lsrs	r3, r3, #5
 80003b4:	617b      	str	r3, [r7, #20]
    if (pool_capacity > 0xFFFFU)
 80003b6:	697b      	ldr	r3, [r7, #20]
 80003b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80003bc:	d302      	bcc.n	80003c4 <canardInit+0x50>
    {
        pool_capacity = 0xFFFFU;
 80003be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80003c2:	617b      	str	r3, [r7, #20]
    }

    initPoolAllocator(&out_ins->allocator, mem_arena, (uint16_t)pool_capacity);
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	330c      	adds	r3, #12
 80003c8:	697a      	ldr	r2, [r7, #20]
 80003ca:	b292      	uxth	r2, r2
 80003cc:	68b9      	ldr	r1, [r7, #8]
 80003ce:	4618      	mov	r0, r3
 80003d0:	f001 fedf 	bl	8002192 <initPoolAllocator>
}
 80003d4:	bf00      	nop
 80003d6:	3718      	adds	r7, #24
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}

080003dc <canardSetLocalNodeID>:
    CANARD_ASSERT(ins != NULL);
    return ins->user_reference;
}

void canardSetLocalNodeID(CanardInstance* ins, uint8_t self_node_id)
{
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
 80003e4:	460b      	mov	r3, r1
 80003e6:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(ins != NULL);

    if ((ins->node_id == CANARD_BROADCAST_NODE_ID) &&
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d109      	bne.n	8000404 <canardSetLocalNodeID+0x28>
 80003f0:	78fb      	ldrb	r3, [r7, #3]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d006      	beq.n	8000404 <canardSetLocalNodeID+0x28>
        (self_node_id >= CANARD_MIN_NODE_ID) &&
        (self_node_id <= CANARD_MAX_NODE_ID))
 80003f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
        (self_node_id >= CANARD_MIN_NODE_ID) &&
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	db02      	blt.n	8000404 <canardSetLocalNodeID+0x28>
    {
        ins->node_id = self_node_id;
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	78fa      	ldrb	r2, [r7, #3]
 8000402:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        CANARD_ASSERT(false);
    }
}
 8000404:	bf00      	nop
 8000406:	370c      	adds	r7, #12
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr

08000410 <canardGetLocalNodeID>:

uint8_t canardGetLocalNodeID(const CanardInstance* ins)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
    return ins->node_id;
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	781b      	ldrb	r3, [r3, #0]
}
 800041c:	4618      	mov	r0, r3
 800041e:	370c      	adds	r7, #12
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr

08000428 <canardBroadcast>:
#endif
#if CANARD_ENABLE_CANFD
                        ,bool canfd
#endif
)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b08e      	sub	sp, #56	@ 0x38
 800042c:	af00      	add	r7, sp, #0
 800042e:	60f8      	str	r0, [r7, #12]
 8000430:	e9c7 2300 	strd	r2, r3, [r7]
    // create transfer object
    CanardTxTransfer transfer_object = {
 8000434:	f107 0310 	add.w	r3, r7, #16
 8000438:	2228      	movs	r2, #40	@ 0x28
 800043a:	2100      	movs	r1, #0
 800043c:	4618      	mov	r0, r3
 800043e:	f005 fa89 	bl	8005954 <memset>
 8000442:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000446:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800044a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800044e:	843b      	strh	r3, [r7, #32]
 8000450:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000452:	627b      	str	r3, [r7, #36]	@ 0x24
 8000454:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000458:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 800045c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800045e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000460:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8000464:	863b      	strh	r3, [r7, #48]	@ 0x30
#if CANARD_ENABLE_CANFD
        .canfd = canfd,
#endif
    };

    return canardBroadcastObj(ins, &transfer_object);
 8000466:	f107 0310 	add.w	r3, r7, #16
 800046a:	4619      	mov	r1, r3
 800046c:	68f8      	ldr	r0, [r7, #12]
 800046e:	f000 f805 	bl	800047c <canardBroadcastObj>
 8000472:	4603      	mov	r3, r0
}
 8000474:	4618      	mov	r0, r3
 8000476:	3738      	adds	r7, #56	@ 0x38
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}

0800047c <canardBroadcastObj>:

int16_t canardBroadcastObj(CanardInstance* ins, CanardTxTransfer* transfer_object)
{
 800047c:	b590      	push	{r4, r7, lr}
 800047e:	b087      	sub	sp, #28
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
 8000484:	6039      	str	r1, [r7, #0]
    if (transfer_object->payload == NULL && transfer_object->payload_len > 0)
 8000486:	683b      	ldr	r3, [r7, #0]
 8000488:	69db      	ldr	r3, [r3, #28]
 800048a:	2b00      	cmp	r3, #0
 800048c:	d106      	bne.n	800049c <canardBroadcastObj+0x20>
 800048e:	683b      	ldr	r3, [r7, #0]
 8000490:	8c1b      	ldrh	r3, [r3, #32]
 8000492:	2b00      	cmp	r3, #0
 8000494:	d002      	beq.n	800049c <canardBroadcastObj+0x20>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8000496:	f06f 0301 	mvn.w	r3, #1
 800049a:	e070      	b.n	800057e <canardBroadcastObj+0x102>
    }
    if (transfer_object->priority > CANARD_TRANSFER_PRIORITY_LOWEST)
 800049c:	683b      	ldr	r3, [r7, #0]
 800049e:	7e1b      	ldrb	r3, [r3, #24]
 80004a0:	2b1f      	cmp	r3, #31
 80004a2:	d902      	bls.n	80004aa <canardBroadcastObj+0x2e>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 80004a4:	f06f 0301 	mvn.w	r3, #1
 80004a8:	e069      	b.n	800057e <canardBroadcastObj+0x102>
    }

    uint32_t can_id = 0;
 80004aa:	2300      	movs	r3, #0
 80004ac:	617b      	str	r3, [r7, #20]
    uint16_t crc = 0xFFFFU;
 80004ae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80004b2:	827b      	strh	r3, [r7, #18]

    if (canardGetLocalNodeID(ins) == 0)
 80004b4:	6878      	ldr	r0, [r7, #4]
 80004b6:	f7ff ffab 	bl	8000410 <canardGetLocalNodeID>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d138      	bne.n	8000532 <canardBroadcastObj+0xb6>
    {
        if (transfer_object->payload_len > 7)
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	8c1b      	ldrh	r3, [r3, #32]
 80004c4:	2b07      	cmp	r3, #7
 80004c6:	d902      	bls.n	80004ce <canardBroadcastObj+0x52>
        {
            return -CANARD_ERROR_NODE_ID_NOT_SET;
 80004c8:	f06f 0303 	mvn.w	r3, #3
 80004cc:	e057      	b.n	800057e <canardBroadcastObj+0x102>
        }

        static const uint16_t DTIDMask = (1U << ANON_MSG_DATA_TYPE_ID_BIT_LEN) - 1U;

        if ((transfer_object->data_type_id & DTIDMask) != transfer_object->data_type_id)
 80004ce:	683b      	ldr	r3, [r7, #0]
 80004d0:	8a1a      	ldrh	r2, [r3, #16]
 80004d2:	4b2d      	ldr	r3, [pc, #180]	@ (8000588 <canardBroadcastObj+0x10c>)
 80004d4:	881b      	ldrh	r3, [r3, #0]
 80004d6:	4013      	ands	r3, r2
 80004d8:	b29a      	uxth	r2, r3
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	8a1b      	ldrh	r3, [r3, #16]
 80004de:	429a      	cmp	r2, r3
 80004e0:	d002      	beq.n	80004e8 <canardBroadcastObj+0x6c>
        {
            return -CANARD_ERROR_INVALID_ARGUMENT;
 80004e2:	f06f 0301 	mvn.w	r3, #1
 80004e6:	e04a      	b.n	800057e <canardBroadcastObj+0x102>
        }

        // anonymous transfer, random discriminator
        const uint16_t discriminator = (uint16_t)((crcAdd(0xFFFFU, transfer_object->payload, transfer_object->payload_len)) & 0x7FFEU);
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	69d9      	ldr	r1, [r3, #28]
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	8c1b      	ldrh	r3, [r3, #32]
 80004f0:	461a      	mov	r2, r3
 80004f2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80004f6:	f001 fe2f 	bl	8002158 <crcAdd>
 80004fa:	4603      	mov	r3, r0
 80004fc:	461a      	mov	r2, r3
 80004fe:	f647 73fe 	movw	r3, #32766	@ 0x7ffe
 8000502:	4013      	ands	r3, r2
 8000504:	823b      	strh	r3, [r7, #16]
        can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	7e1b      	ldrb	r3, [r3, #24]
 800050a:	061a      	lsls	r2, r3, #24
 800050c:	8a3b      	ldrh	r3, [r7, #16]
 800050e:	025b      	lsls	r3, r3, #9
 8000510:	431a      	orrs	r2, r3
                 ((uint32_t) (transfer_object->data_type_id & DTIDMask) << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	8a19      	ldrh	r1, [r3, #16]
 8000516:	4b1c      	ldr	r3, [pc, #112]	@ (8000588 <canardBroadcastObj+0x10c>)
 8000518:	881b      	ldrh	r3, [r3, #0]
 800051a:	400b      	ands	r3, r1
 800051c:	b29b      	uxth	r3, r3
 800051e:	021b      	lsls	r3, r3, #8
        can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 8000520:	ea42 0403 	orr.w	r4, r2, r3
                 ((uint32_t) (transfer_object->data_type_id & DTIDMask) << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	f7ff ff73 	bl	8000410 <canardGetLocalNodeID>
 800052a:	4603      	mov	r3, r0
        can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 800052c:	4323      	orrs	r3, r4
 800052e:	617b      	str	r3, [r7, #20]
 8000530:	e012      	b.n	8000558 <canardBroadcastObj+0xdc>
    }
    else
    {
        can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	7e1b      	ldrb	r3, [r3, #24]
 8000536:	061a      	lsls	r2, r3, #24
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	8a1b      	ldrh	r3, [r3, #16]
 800053c:	021b      	lsls	r3, r3, #8
 800053e:	ea42 0403 	orr.w	r4, r2, r3
 8000542:	6878      	ldr	r0, [r7, #4]
 8000544:	f7ff ff64 	bl	8000410 <canardGetLocalNodeID>
 8000548:	4603      	mov	r3, r0
 800054a:	4323      	orrs	r3, r4
 800054c:	617b      	str	r3, [r7, #20]
        crc = calculateCRC(transfer_object);
 800054e:	6838      	ldr	r0, [r7, #0]
 8000550:	f000 f84c 	bl	80005ec <calculateCRC>
 8000554:	4603      	mov	r3, r0
 8000556:	827b      	strh	r3, [r7, #18]
    }

    const int16_t result = enqueueTxFrames(ins, can_id, crc, transfer_object);
 8000558:	8a7a      	ldrh	r2, [r7, #18]
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	6979      	ldr	r1, [r7, #20]
 800055e:	6878      	ldr	r0, [r7, #4]
 8000560:	f000 ffe6 	bl	8001530 <enqueueTxFrames>
 8000564:	4603      	mov	r3, r0
 8000566:	81fb      	strh	r3, [r7, #14]

    if (result > 0) {
 8000568:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800056c:	2b00      	cmp	r3, #0
 800056e:	dd04      	ble.n	800057a <canardBroadcastObj+0xfe>
        incrementTransferID(transfer_object->inout_transfer_id);
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	695b      	ldr	r3, [r3, #20]
 8000574:	4618      	mov	r0, r3
 8000576:	f000 ff66 	bl	8001446 <incrementTransferID>
    }

    return result;
 800057a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800057e:	4618      	mov	r0, r3
 8000580:	371c      	adds	r7, #28
 8000582:	46bd      	mov	sp, r7
 8000584:	bd90      	pop	{r4, r7, pc}
 8000586:	bf00      	nop
 8000588:	08006686 	.word	0x08006686

0800058c <canardBufferFromIdx>:
  CanardBufferBlock and CanartRxState structures to have the same size
  on 32 bit and 64 bit platforms, which allows for easier testing in
  simulator environments
 */
CANARD_INTERNAL CanardBufferBlock *canardBufferFromIdx(CanardPoolAllocator* allocator, canard_buffer_idx_t idx)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	6039      	str	r1, [r7, #0]
        return NULL;
    }
    return (CanardBufferBlock *)(uintptr_t)&((uint8_t *)allocator->arena)[idx-1];
#else
    (void)allocator;
    return (CanardBufferBlock *)idx;
 8000596:	683b      	ldr	r3, [r7, #0]
#endif
}
 8000598:	4618      	mov	r0, r3
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr

080005a4 <canardBufferToIdx>:

CANARD_INTERNAL canard_buffer_idx_t canardBufferToIdx(CanardPoolAllocator* allocator, const CanardBufferBlock *buf)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	6039      	str	r1, [r7, #0]
        return CANARD_BUFFER_IDX_NONE;
    }
    return 1U+((canard_buffer_idx_t)((uint8_t *)buf - (uint8_t *)allocator->arena));
#else
    (void)allocator;
    return (canard_buffer_idx_t)buf;
 80005ae:	683b      	ldr	r3, [r7, #0]
#endif
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr

080005bc <canardRxFromIdx>:

CANARD_INTERNAL CanardRxState *canardRxFromIdx(CanardPoolAllocator* allocator, canard_buffer_idx_t idx)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	6039      	str	r1, [r7, #0]
        return NULL;
    }
    return (CanardRxState *)(uintptr_t)&((uint8_t *)allocator->arena)[idx-1];
#else
    (void)allocator;
    return (CanardRxState *)idx;
 80005c6:	683b      	ldr	r3, [r7, #0]
#endif
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <canardRxToIdx>:

CANARD_INTERNAL canard_buffer_idx_t canardRxToIdx(CanardPoolAllocator* allocator, const CanardRxState *rx)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	6039      	str	r1, [r7, #0]
        return CANARD_BUFFER_IDX_NONE;
    }
    return 1U+((canard_buffer_idx_t)((uint8_t *)rx - (uint8_t *)allocator->arena));
#else
    (void)allocator;
    return (canard_buffer_idx_t)rx;
 80005de:	683b      	ldr	r3, [r7, #0]
#endif
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr

080005ec <calculateCRC>:

CANARD_INTERNAL uint16_t calculateCRC(const CanardTxTransfer* transfer_object)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
    uint16_t crc = 0xFFFFU;
 80005f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005f8:	81fb      	strh	r3, [r7, #14]
#if CANARD_ENABLE_CANFD
    if ((transfer_object->payload_len > 7 && !transfer_object->canfd) ||
        (transfer_object->payload_len > 63 && transfer_object->canfd))
#else
    if (transfer_object->payload_len > 7)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	8c1b      	ldrh	r3, [r3, #32]
 80005fe:	2b07      	cmp	r3, #7
 8000600:	d913      	bls.n	800062a <calculateCRC+0x3e>
#endif
    {
        crc = crcAddSignature(crc, transfer_object->data_type_signature);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000608:	89f9      	ldrh	r1, [r7, #14]
 800060a:	4608      	mov	r0, r1
 800060c:	f001 fd75 	bl	80020fa <crcAddSignature>
 8000610:	4603      	mov	r3, r0
 8000612:	81fb      	strh	r3, [r7, #14]
        crc = crcAdd(crc, transfer_object->payload, transfer_object->payload_len);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	69d9      	ldr	r1, [r3, #28]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	8c1b      	ldrh	r3, [r3, #32]
 800061c:	461a      	mov	r2, r3
 800061e:	89fb      	ldrh	r3, [r7, #14]
 8000620:	4618      	mov	r0, r3
 8000622:	f001 fd99 	bl	8002158 <crcAdd>
 8000626:	4603      	mov	r3, r0
 8000628:	81fb      	strh	r3, [r7, #14]
                crc = crcAddByte(crc, empty);
            }
        }
#endif
    }
    return crc;
 800062a:	89fb      	ldrh	r3, [r7, #14]
}
 800062c:	4618      	mov	r0, r3
 800062e:	3710      	adds	r7, #16
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <canardRequestOrRespond>:
#endif
#if CANARD_ENABLE_CANFD
                               ,bool canfd
#endif
)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b08e      	sub	sp, #56	@ 0x38
 8000638:	af00      	add	r7, sp, #0
 800063a:	60f8      	str	r0, [r7, #12]
 800063c:	e9c7 2300 	strd	r2, r3, [r7]
 8000640:	460b      	mov	r3, r1
 8000642:	72fb      	strb	r3, [r7, #11]
    CanardTxTransfer transfer_object = {
        .data_type_signature = data_type_signature,
        .data_type_id = data_type_id,
        .inout_transfer_id = inout_transfer_id,
        .priority = priority,
        .transfer_type = kind == CanardRequest ? CanardTransferTypeRequest : CanardTransferTypeResponse,
 8000644:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8000648:	2b01      	cmp	r3, #1
 800064a:	bf0c      	ite	eq
 800064c:	2301      	moveq	r3, #1
 800064e:	2300      	movne	r3, #0
 8000650:	b2db      	uxtb	r3, r3
    CanardTxTransfer transfer_object = {
 8000652:	743b      	strb	r3, [r7, #16]
 8000654:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000658:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800065c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000660:	b29b      	uxth	r3, r3
 8000662:	843b      	strh	r3, [r7, #32]
 8000664:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000666:	627b      	str	r3, [r7, #36]	@ 0x24
 8000668:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800066c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8000670:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000672:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000674:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8000678:	863b      	strh	r3, [r7, #48]	@ 0x30
#endif
#if CANARD_ENABLE_CANFD
        .canfd = canfd,
#endif
    };
    return canardRequestOrRespondObj(ins, destination_node_id, &transfer_object);
 800067a:	f107 0210 	add.w	r2, r7, #16
 800067e:	7afb      	ldrb	r3, [r7, #11]
 8000680:	4619      	mov	r1, r3
 8000682:	68f8      	ldr	r0, [r7, #12]
 8000684:	f000 f805 	bl	8000692 <canardRequestOrRespondObj>
 8000688:	4603      	mov	r3, r0
}
 800068a:	4618      	mov	r0, r3
 800068c:	3738      	adds	r7, #56	@ 0x38
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <canardRequestOrRespondObj>:

int16_t canardRequestOrRespondObj(CanardInstance* ins, uint8_t destination_node_id, CanardTxTransfer* transfer_object)
{
 8000692:	b590      	push	{r4, r7, lr}
 8000694:	b087      	sub	sp, #28
 8000696:	af00      	add	r7, sp, #0
 8000698:	60f8      	str	r0, [r7, #12]
 800069a:	460b      	mov	r3, r1
 800069c:	607a      	str	r2, [r7, #4]
 800069e:	72fb      	strb	r3, [r7, #11]
    if (transfer_object->payload == NULL && transfer_object->payload_len > 0)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	69db      	ldr	r3, [r3, #28]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d106      	bne.n	80006b6 <canardRequestOrRespondObj+0x24>
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	8c1b      	ldrh	r3, [r3, #32]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d002      	beq.n	80006b6 <canardRequestOrRespondObj+0x24>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 80006b0:	f06f 0301 	mvn.w	r3, #1
 80006b4:	e042      	b.n	800073c <canardRequestOrRespondObj+0xaa>
    }
    if (transfer_object->priority > CANARD_TRANSFER_PRIORITY_LOWEST)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	7e1b      	ldrb	r3, [r3, #24]
 80006ba:	2b1f      	cmp	r3, #31
 80006bc:	d902      	bls.n	80006c4 <canardRequestOrRespondObj+0x32>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 80006be:	f06f 0301 	mvn.w	r3, #1
 80006c2:	e03b      	b.n	800073c <canardRequestOrRespondObj+0xaa>
    }
    if (canardGetLocalNodeID(ins) == 0)
 80006c4:	68f8      	ldr	r0, [r7, #12]
 80006c6:	f7ff fea3 	bl	8000410 <canardGetLocalNodeID>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d102      	bne.n	80006d6 <canardRequestOrRespondObj+0x44>
    {
        return -CANARD_ERROR_NODE_ID_NOT_SET;
 80006d0:	f06f 0303 	mvn.w	r3, #3
 80006d4:	e032      	b.n	800073c <canardRequestOrRespondObj+0xaa>
    }

    const uint32_t can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 16U) |
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	7e1b      	ldrb	r3, [r3, #24]
 80006da:	061a      	lsls	r2, r3, #24
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	8a1b      	ldrh	r3, [r3, #16]
 80006e0:	041b      	lsls	r3, r3, #16
 80006e2:	431a      	orrs	r2, r3
                            ((uint32_t) transfer_object->transfer_type << 15U) | ((uint32_t) destination_node_id << 8U) |
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	03db      	lsls	r3, r3, #15
    const uint32_t can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 16U) |
 80006ea:	431a      	orrs	r2, r3
                            ((uint32_t) transfer_object->transfer_type << 15U) | ((uint32_t) destination_node_id << 8U) |
 80006ec:	7afb      	ldrb	r3, [r7, #11]
 80006ee:	021b      	lsls	r3, r3, #8
 80006f0:	ea42 0403 	orr.w	r4, r2, r3
                            (1U << 7U) | (uint32_t) canardGetLocalNodeID(ins);
 80006f4:	68f8      	ldr	r0, [r7, #12]
 80006f6:	f7ff fe8b 	bl	8000410 <canardGetLocalNodeID>
 80006fa:	4603      	mov	r3, r0
 80006fc:	4323      	orrs	r3, r4
    const uint32_t can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 16U) |
 80006fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000702:	617b      	str	r3, [r7, #20]

    uint16_t crc = calculateCRC(transfer_object);
 8000704:	6878      	ldr	r0, [r7, #4]
 8000706:	f7ff ff71 	bl	80005ec <calculateCRC>
 800070a:	4603      	mov	r3, r0
 800070c:	827b      	strh	r3, [r7, #18]


    const int16_t result = enqueueTxFrames(ins, can_id, crc, transfer_object);
 800070e:	8a7a      	ldrh	r2, [r7, #18]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	6979      	ldr	r1, [r7, #20]
 8000714:	68f8      	ldr	r0, [r7, #12]
 8000716:	f000 ff0b 	bl	8001530 <enqueueTxFrames>
 800071a:	4603      	mov	r3, r0
 800071c:	823b      	strh	r3, [r7, #16]

    if (result > 0 && transfer_object->transfer_type == CanardTransferTypeRequest)                      // Response Transfer ID must not be altered
 800071e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000722:	2b00      	cmp	r3, #0
 8000724:	dd08      	ble.n	8000738 <canardRequestOrRespondObj+0xa6>
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	2b01      	cmp	r3, #1
 800072c:	d104      	bne.n	8000738 <canardRequestOrRespondObj+0xa6>
    {
        incrementTransferID(transfer_object->inout_transfer_id);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	4618      	mov	r0, r3
 8000734:	f000 fe87 	bl	8001446 <incrementTransferID>
    }

    return result;
 8000738:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
}
 800073c:	4618      	mov	r0, r3
 800073e:	371c      	adds	r7, #28
 8000740:	46bd      	mov	sp, r7
 8000742:	bd90      	pop	{r4, r7, pc}

08000744 <canardPeekTxQueue>:

CanardCANFrame* canardPeekTxQueue(const CanardInstance* ins)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
    if (ins->tx_queue == NULL)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000750:	2b00      	cmp	r3, #0
 8000752:	d101      	bne.n	8000758 <canardPeekTxQueue+0x14>
    {
        return NULL;
 8000754:	2300      	movs	r3, #0
 8000756:	e002      	b.n	800075e <canardPeekTxQueue+0x1a>
    }
    return &ins->tx_queue->frame;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800075c:	3304      	adds	r3, #4
}
 800075e:	4618      	mov	r0, r3
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr

0800076a <canardPopTxQueue>:

void canardPopTxQueue(CanardInstance* ins)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	b084      	sub	sp, #16
 800076e:	af00      	add	r7, sp, #0
 8000770:	6078      	str	r0, [r7, #4]
    CanardTxQueueItem* item = ins->tx_queue;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000776:	60fb      	str	r3, [r7, #12]
    ins->tx_queue = item->next;
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	625a      	str	r2, [r3, #36]	@ 0x24
    freeBlock(&ins->allocator, item);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	330c      	adds	r3, #12
 8000784:	68f9      	ldr	r1, [r7, #12]
 8000786:	4618      	mov	r0, r3
 8000788:	f001 fd63 	bl	8002252 <freeBlock>
}
 800078c:	bf00      	nop
 800078e:	3710      	adds	r7, #16
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}

08000794 <canardHandleRxFrame>:

int16_t canardHandleRxFrame(CanardInstance* ins, const CanardCANFrame* frame, uint64_t timestamp_usec)
{
 8000794:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000798:	b09f      	sub	sp, #124	@ 0x7c
 800079a:	af02      	add	r7, sp, #8
 800079c:	60f8      	str	r0, [r7, #12]
 800079e:	60b9      	str	r1, [r7, #8]
 80007a0:	e9c7 2300 	strd	r2, r3, [r7]
    const CanardTransferType transfer_type = extractTransferType(frame->id);
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4618      	mov	r0, r3
 80007aa:	f001 f8c8 	bl	800193e <extractTransferType>
 80007ae:	4603      	mov	r3, r0
 80007b0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    const uint8_t destination_node_id = (transfer_type == CanardTransferTypeBroadcast) ?
 80007b4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80007b8:	2b02      	cmp	r3, #2
 80007ba:	d007      	beq.n	80007cc <canardHandleRxFrame+0x38>
                                        (uint8_t)CANARD_BROADCAST_NODE_ID :
                                        DEST_ID_FROM_ID(frame->id);
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	0a1b      	lsrs	r3, r3, #8
 80007c2:	b2db      	uxtb	r3, r3
    const uint8_t destination_node_id = (transfer_type == CanardTransferTypeBroadcast) ?
 80007c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	e000      	b.n	80007ce <canardHandleRxFrame+0x3a>
 80007cc:	2300      	movs	r3, #0
 80007ce:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56

    // TODO: This function should maintain statistics of transfer errors and such.

    if ((frame->id & CANARD_CAN_FRAME_EFF) == 0 ||
 80007d2:	68bb      	ldr	r3, [r7, #8]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	da0f      	bge.n	80007fa <canardHandleRxFrame+0x66>
        (frame->id & CANARD_CAN_FRAME_RTR) != 0 ||
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
    if ((frame->id & CANARD_CAN_FRAME_EFF) == 0 ||
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d109      	bne.n	80007fa <canardHandleRxFrame+0x66>
        (frame->id & CANARD_CAN_FRAME_ERR) != 0 ||
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
        (frame->id & CANARD_CAN_FRAME_RTR) != 0 ||
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d103      	bne.n	80007fa <canardHandleRxFrame+0x66>
        (frame->data_len < 1))
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	7b1b      	ldrb	r3, [r3, #12]
        (frame->id & CANARD_CAN_FRAME_ERR) != 0 ||
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d102      	bne.n	8000800 <canardHandleRxFrame+0x6c>
    {
        return -CANARD_ERROR_RX_INCOMPATIBLE_PACKET;
 80007fa:	f06f 0309 	mvn.w	r3, #9
 80007fe:	e361      	b.n	8000ec4 <canardHandleRxFrame+0x730>
    }

    if (transfer_type != CanardTransferTypeBroadcast &&
 8000800:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000804:	2b02      	cmp	r3, #2
 8000806:	d00b      	beq.n	8000820 <canardHandleRxFrame+0x8c>
        destination_node_id != canardGetLocalNodeID(ins))
 8000808:	68f8      	ldr	r0, [r7, #12]
 800080a:	f7ff fe01 	bl	8000410 <canardGetLocalNodeID>
 800080e:	4603      	mov	r3, r0
 8000810:	461a      	mov	r2, r3
    if (transfer_type != CanardTransferTypeBroadcast &&
 8000812:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8000816:	4293      	cmp	r3, r2
 8000818:	d002      	beq.n	8000820 <canardHandleRxFrame+0x8c>
    {
        return -CANARD_ERROR_RX_WRONG_ADDRESS;
 800081a:	f06f 030a 	mvn.w	r3, #10
 800081e:	e351      	b.n	8000ec4 <canardHandleRxFrame+0x730>
    }

    const uint8_t priority = PRIORITY_FROM_ID(frame->id);
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	0e1b      	lsrs	r3, r3, #24
 8000826:	b2db      	uxtb	r3, r3
 8000828:	f003 031f 	and.w	r3, r3, #31
 800082c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
    const uint8_t source_node_id = SOURCE_ID_FROM_ID(frame->id);
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	b2db      	uxtb	r3, r3
 8000836:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800083a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
    const uint16_t data_type_id = extractDataType(frame->id);
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4618      	mov	r0, r3
 8000844:	f001 f85b 	bl	80018fe <extractDataType>
 8000848:	4603      	mov	r3, r0
 800084a:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
    // printf("Transfer Type: %u, Received Data ID: %u\r\n", (uint32_t)transfer_type, (uint32_t)data_type_id);
    const uint32_t transfer_descriptor =
            MAKE_TRANSFER_DESCRIPTOR(data_type_id, transfer_type, source_node_id, destination_node_id);
 800084e:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 8000852:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000856:	041b      	lsls	r3, r3, #16
 8000858:	431a      	orrs	r2, r3
 800085a:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800085e:	049b      	lsls	r3, r3, #18
 8000860:	431a      	orrs	r2, r3
 8000862:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8000866:	065b      	lsls	r3, r3, #25
    const uint32_t transfer_descriptor =
 8000868:	4313      	orrs	r3, r2
 800086a:	64fb      	str	r3, [r7, #76]	@ 0x4c

    const uint8_t tail_byte = frame->data[frame->data_len - 1];
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	7b1b      	ldrb	r3, [r3, #12]
 8000870:	3b01      	subs	r3, #1
 8000872:	68ba      	ldr	r2, [r7, #8]
 8000874:	4413      	add	r3, r2
 8000876:	791b      	ldrb	r3, [r3, #4]
 8000878:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
        // printf("IS END\r\n");
    } else {
        // printf("NOT END\r\n");
    }

    uint64_t data_type_signature = 0;
 800087c:	f04f 0200 	mov.w	r2, #0
 8000880:	f04f 0300 	mov.w	r3, #0
 8000884:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    CanardRxState* rx_state = NULL;
 8000888:	2300      	movs	r3, #0
 800088a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    if (IS_START_OF_TRANSFER(tail_byte))
 800088c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000890:	09db      	lsrs	r3, r3, #7
 8000892:	b2db      	uxtb	r3, r3
 8000894:	f003 0301 	and.w	r3, r3, #1
 8000898:	2b00      	cmp	r3, #0
 800089a:	d01e      	beq.n	80008da <canardHandleRxFrame+0x146>
    {

        if (ins->should_accept(ins, &data_type_signature, data_type_id, transfer_type, source_node_id))
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	685e      	ldr	r6, [r3, #4]
 80008a0:	f897 0057 	ldrb.w	r0, [r7, #87]	@ 0x57
 80008a4:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 80008a8:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80008ac:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80008b0:	9300      	str	r3, [sp, #0]
 80008b2:	4603      	mov	r3, r0
 80008b4:	68f8      	ldr	r0, [r7, #12]
 80008b6:	47b0      	blx	r6
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d00a      	beq.n	80008d4 <canardHandleRxFrame+0x140>
        {
            rx_state = traverseRxStates(ins, transfer_descriptor);
 80008be:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80008c0:	68f8      	ldr	r0, [r7, #12]
 80008c2:	f001 f860 	bl	8001986 <traverseRxStates>
 80008c6:	66f8      	str	r0, [r7, #108]	@ 0x6c

            if(rx_state == NULL)
 80008c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d110      	bne.n	80008f0 <canardHandleRxFrame+0x15c>
            {
                return -CANARD_ERROR_OUT_OF_MEMORY;
 80008ce:	f06f 0302 	mvn.w	r3, #2
 80008d2:	e2f7      	b.n	8000ec4 <canardHandleRxFrame+0x730>
            }
        }
        else
        {
            return -CANARD_ERROR_RX_NOT_WANTED;
 80008d4:	f06f 030b 	mvn.w	r3, #11
 80008d8:	e2f4      	b.n	8000ec4 <canardHandleRxFrame+0x730>
        }
    }
    else
    {
        rx_state = findRxState(ins, transfer_descriptor);
 80008da:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80008dc:	68f8      	ldr	r0, [r7, #12]
 80008de:	f001 f881 	bl	80019e4 <findRxState>
 80008e2:	66f8      	str	r0, [r7, #108]	@ 0x6c

        if (rx_state == NULL)
 80008e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d102      	bne.n	80008f0 <canardHandleRxFrame+0x15c>
        {
            return -CANARD_ERROR_RX_MISSED_START;
 80008ea:	f06f 030c 	mvn.w	r3, #12
 80008ee:	e2e9      	b.n	8000ec4 <canardHandleRxFrame+0x730>
    }

    CANARD_ASSERT(rx_state != NULL);    // All paths that lead to NULL should be terminated with return above

    // Resolving the state flags:
    const bool not_initialized = rx_state->timestamp_usec == 0;
 80008f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80008f2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80008f6:	4313      	orrs	r3, r2
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	bf0c      	ite	eq
 80008fc:	2301      	moveq	r3, #1
 80008fe:	2300      	movne	r3, #0
 8000900:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
    const bool tid_timed_out = (timestamp_usec - rx_state->timestamp_usec) > TRANSFER_TIMEOUT_USEC;
 8000904:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000906:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800090a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800090e:	ebb0 0802 	subs.w	r8, r0, r2
 8000912:	eb61 0903 	sbc.w	r9, r1, r3
 8000916:	4ba9      	ldr	r3, [pc, #676]	@ (8000bbc <canardHandleRxFrame+0x428>)
 8000918:	4598      	cmp	r8, r3
 800091a:	f179 0300 	sbcs.w	r3, r9, #0
 800091e:	bf2c      	ite	cs
 8000920:	2301      	movcs	r3, #1
 8000922:	2300      	movcc	r3, #0
 8000924:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
    const bool same_iface = frame->iface_id == rx_state->iface_id;
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	7b5a      	ldrb	r2, [r3, #13]
 800092c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800092e:	7e9b      	ldrb	r3, [r3, #26]
 8000930:	429a      	cmp	r2, r3
 8000932:	bf0c      	ite	eq
 8000934:	2301      	moveq	r3, #1
 8000936:	2300      	movne	r3, #0
 8000938:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
    const bool first_frame = IS_START_OF_TRANSFER(tail_byte);
 800093c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000940:	09db      	lsrs	r3, r3, #7
 8000942:	b2db      	uxtb	r3, r3
 8000944:	f003 0301 	and.w	r3, r3, #1
 8000948:	2b00      	cmp	r3, #0
 800094a:	bf14      	ite	ne
 800094c:	2301      	movne	r3, #1
 800094e:	2300      	moveq	r3, #0
 8000950:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    const bool not_previous_tid =
        computeTransferIDForwardDistance((uint8_t) rx_state->transfer_id, TRANSFER_ID_FROM_TAIL_BYTE(tail_byte)) > 1;
 8000954:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000956:	7ddb      	ldrb	r3, [r3, #23]
 8000958:	f3c3 0384 	ubfx	r3, r3, #2, #5
 800095c:	b2db      	uxtb	r3, r3
 800095e:	461a      	mov	r2, r3
 8000960:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000964:	f003 031f 	and.w	r3, r3, #31
 8000968:	b2db      	uxtb	r3, r3
 800096a:	4619      	mov	r1, r3
 800096c:	4610      	mov	r0, r2
 800096e:	f000 fd4b 	bl	8001408 <computeTransferIDForwardDistance>
 8000972:	4603      	mov	r3, r0
    const bool not_previous_tid =
 8000974:	2b01      	cmp	r3, #1
 8000976:	bfcc      	ite	gt
 8000978:	2301      	movgt	r3, #1
 800097a:	2300      	movle	r3, #0
 800097c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    const bool iface_switch_allowed = (timestamp_usec - rx_state->timestamp_usec) > IFACE_SWITCH_DELAY_USEC;
 8000980:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000982:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000986:	e9d7 0100 	ldrd	r0, r1, [r7]
 800098a:	1a84      	subs	r4, r0, r2
 800098c:	eb61 0503 	sbc.w	r5, r1, r3
 8000990:	4b8b      	ldr	r3, [pc, #556]	@ (8000bc0 <canardHandleRxFrame+0x42c>)
 8000992:	429c      	cmp	r4, r3
 8000994:	f175 0300 	sbcs.w	r3, r5, #0
 8000998:	bf2c      	ite	cs
 800099a:	2301      	movcs	r3, #1
 800099c:	2300      	movcc	r3, #0
 800099e:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    const bool non_wrapped_tid = computeTransferIDForwardDistance(TRANSFER_ID_FROM_TAIL_BYTE(tail_byte), (uint8_t) rx_state->transfer_id) < (1 << (TRANSFER_ID_BIT_LEN-1));
 80009a2:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80009a6:	f003 031f 	and.w	r3, r3, #31
 80009aa:	b2da      	uxtb	r2, r3
 80009ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80009ae:	7ddb      	ldrb	r3, [r3, #23]
 80009b0:	f3c3 0384 	ubfx	r3, r3, #2, #5
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	4619      	mov	r1, r3
 80009b8:	4610      	mov	r0, r2
 80009ba:	f000 fd25 	bl	8001408 <computeTransferIDForwardDistance>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b0f      	cmp	r3, #15
 80009c2:	bfd4      	ite	le
 80009c4:	2301      	movle	r3, #1
 80009c6:	2300      	movgt	r3, #0
 80009c8:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    const bool incomplete_frame = rx_state->buffer_blocks != CANARD_BUFFER_IDX_NONE;
 80009cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	bf14      	ite	ne
 80009d4:	2301      	movne	r3, #1
 80009d6:	2300      	moveq	r3, #0
 80009d8:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

    const bool need_restart =
            (not_initialized) ||
            (tid_timed_out) ||
            (same_iface && first_frame && (not_previous_tid || incomplete_frame)) ||
 80009dc:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d11f      	bne.n	8000a24 <canardHandleRxFrame+0x290>
            (not_initialized) ||
 80009e4:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d11b      	bne.n	8000a24 <canardHandleRxFrame+0x290>
            (tid_timed_out) ||
 80009ec:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d00b      	beq.n	8000a0c <canardHandleRxFrame+0x278>
            (same_iface && first_frame && (not_previous_tid || incomplete_frame)) ||
 80009f4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d007      	beq.n	8000a0c <canardHandleRxFrame+0x278>
 80009fc:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d10f      	bne.n	8000a24 <canardHandleRxFrame+0x290>
 8000a04:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d10b      	bne.n	8000a24 <canardHandleRxFrame+0x290>
 8000a0c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d009      	beq.n	8000a28 <canardHandleRxFrame+0x294>
            (iface_switch_allowed && first_frame && non_wrapped_tid);
 8000a14:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d005      	beq.n	8000a28 <canardHandleRxFrame+0x294>
 8000a1c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <canardHandleRxFrame+0x294>
            (same_iface && first_frame && (not_previous_tid || incomplete_frame)) ||
 8000a24:	2301      	movs	r3, #1
 8000a26:	e000      	b.n	8000a2a <canardHandleRxFrame+0x296>
 8000a28:	2300      	movs	r3, #0
    const bool need_restart =
 8000a2a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8000a2e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42

    if (need_restart)
 8000a3a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d02f      	beq.n	8000aa2 <canardHandleRxFrame+0x30e>
    {
        rx_state->transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte);
 8000a42:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000a46:	f003 031f 	and.w	r3, r3, #31
 8000a4a:	b2d9      	uxtb	r1, r3
 8000a4c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000a4e:	7dd3      	ldrb	r3, [r2, #23]
 8000a50:	f361 0386 	bfi	r3, r1, #2, #5
 8000a54:	75d3      	strb	r3, [r2, #23]
        rx_state->next_toggle = 0;
 8000a56:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000a58:	7dd3      	ldrb	r3, [r2, #23]
 8000a5a:	f36f 13c7 	bfc	r3, #7, #1
 8000a5e:	75d3      	strb	r3, [r2, #23]
        releaseStatePayload(ins, rx_state);
 8000a60:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8000a62:	68f8      	ldr	r0, [r7, #12]
 8000a64:	f001 f828 	bl	8001ab8 <releaseStatePayload>
        rx_state->iface_id = frame->iface_id;
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	7b5a      	ldrb	r2, [r3, #13]
 8000a6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000a6e:	769a      	strb	r2, [r3, #26]
        if (!IS_START_OF_TRANSFER(tail_byte))
 8000a70:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000a74:	09db      	lsrs	r3, r3, #7
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	f003 0301 	and.w	r3, r3, #1
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d110      	bne.n	8000aa2 <canardHandleRxFrame+0x30e>
        {
            rx_state->transfer_id++;
 8000a80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000a82:	7ddb      	ldrb	r3, [r3, #23]
 8000a84:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	f003 031f 	and.w	r3, r3, #31
 8000a90:	b2d9      	uxtb	r1, r3
 8000a92:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000a94:	7dd3      	ldrb	r3, [r2, #23]
 8000a96:	f361 0386 	bfi	r3, r1, #2, #5
 8000a9a:	75d3      	strb	r3, [r2, #23]
            return -CANARD_ERROR_RX_MISSED_START;
 8000a9c:	f06f 030c 	mvn.w	r3, #12
 8000aa0:	e210      	b.n	8000ec4 <canardHandleRxFrame+0x730>
        }
    }

    if (frame->iface_id != rx_state->iface_id)
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	7b5a      	ldrb	r2, [r3, #13]
 8000aa6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000aa8:	7e9b      	ldrb	r3, [r3, #26]
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	d001      	beq.n	8000ab2 <canardHandleRxFrame+0x31e>
    {
        // drop frame if coming from unexpected interface
        return CANARD_OK;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	e208      	b.n	8000ec4 <canardHandleRxFrame+0x730>
    }

    if (IS_START_OF_TRANSFER(tail_byte) && IS_END_OF_TRANSFER(tail_byte)) // single frame transfer
 8000ab2:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000ab6:	09db      	lsrs	r3, r3, #7
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d041      	beq.n	8000b46 <canardHandleRxFrame+0x3b2>
 8000ac2:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000ac6:	099b      	lsrs	r3, r3, #6
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d039      	beq.n	8000b46 <canardHandleRxFrame+0x3b2>
    {
        rx_state->timestamp_usec = timestamp_usec;
 8000ad2:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8000ad4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ad8:	e9c1 2302 	strd	r2, r3, [r1, #8]
        CanardRxTransfer rx_transfer = {
 8000adc:	f107 0310 	add.w	r3, r7, #16
 8000ae0:	2220      	movs	r2, #32
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f004 ff35 	bl	8005954 <memset>
 8000aea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000aee:	e9c7 2304 	strd	r2, r3, [r7, #16]
            .timestamp_usec = timestamp_usec,
            .payload_head = frame->data,
 8000af2:	68bb      	ldr	r3, [r7, #8]
 8000af4:	3304      	adds	r3, #4
        CanardRxTransfer rx_transfer = {
 8000af6:	61bb      	str	r3, [r7, #24]
            .payload_len = (uint8_t)(frame->data_len - 1U),
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	7b1b      	ldrb	r3, [r3, #12]
 8000afc:	3b01      	subs	r3, #1
 8000afe:	b2db      	uxtb	r3, r3
        CanardRxTransfer rx_transfer = {
 8000b00:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8000b02:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8000b06:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000b08:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000b0c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            .data_type_id = data_type_id,
            .transfer_type = (uint8_t)transfer_type,
            .transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte),
 8000b10:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000b14:	f003 031f 	and.w	r3, r3, #31
 8000b18:	b2db      	uxtb	r3, r3
        CanardRxTransfer rx_transfer = {
 8000b1a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8000b1e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000b22:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8000b26:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8000b2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
#elif CANARD_ENABLE_TAO_OPTION
            .tao = !ins->tao_disabled
#endif
        };

        ins->on_reception(ins, &rx_transfer);
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	f107 0210 	add.w	r2, r7, #16
 8000b36:	4611      	mov	r1, r2
 8000b38:	68f8      	ldr	r0, [r7, #12]
 8000b3a:	4798      	blx	r3

        prepareForNextTransfer(rx_state);
 8000b3c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8000b3e:	f000 febc 	bl	80018ba <prepareForNextTransfer>
        return CANARD_OK;
 8000b42:	2300      	movs	r3, #0
 8000b44:	e1be      	b.n	8000ec4 <canardHandleRxFrame+0x730>
    }

    if (TOGGLE_BIT(tail_byte) != rx_state->next_toggle)
 8000b46:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000b4a:	095b      	lsrs	r3, r3, #5
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	bf14      	ite	ne
 8000b56:	2301      	movne	r3, #1
 8000b58:	2300      	moveq	r3, #0
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000b60:	7ddb      	ldrb	r3, [r3, #23]
 8000b62:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d002      	beq.n	8000b72 <canardHandleRxFrame+0x3de>
    {
        return -CANARD_ERROR_RX_WRONG_TOGGLE;
 8000b6c:	f06f 030d 	mvn.w	r3, #13
 8000b70:	e1a8      	b.n	8000ec4 <canardHandleRxFrame+0x730>
    }

    if (TRANSFER_ID_FROM_TAIL_BYTE(tail_byte) != rx_state->transfer_id)
 8000b72:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000b76:	f003 031f 	and.w	r3, r3, #31
 8000b7a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000b7c:	7dd2      	ldrb	r2, [r2, #23]
 8000b7e:	f3c2 0284 	ubfx	r2, r2, #2, #5
 8000b82:	b2d2      	uxtb	r2, r2
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d002      	beq.n	8000b8e <canardHandleRxFrame+0x3fa>
    {
        return -CANARD_ERROR_RX_UNEXPECTED_TID;
 8000b88:	f06f 030e 	mvn.w	r3, #14
 8000b8c:	e19a      	b.n	8000ec4 <canardHandleRxFrame+0x730>
    }

    if (IS_START_OF_TRANSFER(tail_byte) && !IS_END_OF_TRANSFER(tail_byte))      // Beginning of multi frame transfer
 8000b8e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000b92:	09db      	lsrs	r3, r3, #7
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d060      	beq.n	8000c60 <canardHandleRxFrame+0x4cc>
 8000b9e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000ba2:	099b      	lsrs	r3, r3, #6
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d158      	bne.n	8000c60 <canardHandleRxFrame+0x4cc>
    {
        if (frame->data_len <= 3)
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	7b1b      	ldrb	r3, [r3, #12]
 8000bb2:	2b03      	cmp	r3, #3
 8000bb4:	d806      	bhi.n	8000bc4 <canardHandleRxFrame+0x430>
        {
            return -CANARD_ERROR_RX_SHORT_FRAME;
 8000bb6:	f06f 030f 	mvn.w	r3, #15
 8000bba:	e183      	b.n	8000ec4 <canardHandleRxFrame+0x730>
 8000bbc:	001e8481 	.word	0x001e8481
 8000bc0:	000f4241 	.word	0x000f4241
        }

        // take off the crc and store the payload
        rx_state->timestamp_usec = timestamp_usec;
 8000bc4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8000bc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000bca:	e9c1 2302 	strd	r2, r3, [r1, #8]
        rx_state->payload_len = 0;
 8000bce:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000bd0:	8ad3      	ldrh	r3, [r2, #22]
 8000bd2:	f36f 0309 	bfc	r3, #0, #10
 8000bd6:	82d3      	strh	r3, [r2, #22]
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data + 2,
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	f103 000c 	add.w	r0, r3, #12
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	3304      	adds	r3, #4
 8000be2:	1c9a      	adds	r2, r3, #2
                                                 (uint8_t) (frame->data_len - 3));
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	7b1b      	ldrb	r3, [r3, #12]
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data + 2,
 8000be8:	3b03      	subs	r3, #3
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8000bee:	f000 ff97 	bl	8001b20 <bufferBlockPushBytes>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        if (ret < 0)
 8000bf8:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	da09      	bge.n	8000c14 <canardHandleRxFrame+0x480>
        {
            releaseStatePayload(ins, rx_state);
 8000c00:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8000c02:	68f8      	ldr	r0, [r7, #12]
 8000c04:	f000 ff58 	bl	8001ab8 <releaseStatePayload>
            prepareForNextTransfer(rx_state);
 8000c08:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8000c0a:	f000 fe56 	bl	80018ba <prepareForNextTransfer>
            return -CANARD_ERROR_OUT_OF_MEMORY;
 8000c0e:	f06f 0302 	mvn.w	r3, #2
 8000c12:	e157      	b.n	8000ec4 <canardHandleRxFrame+0x730>
        }
        rx_state->payload_crc = (uint16_t)(((uint16_t) frame->data[0]) | (uint16_t)((uint16_t) frame->data[1] << 8U));
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	791b      	ldrb	r3, [r3, #4]
 8000c18:	461a      	mov	r2, r3
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	795b      	ldrb	r3, [r3, #5]
 8000c1e:	021b      	lsls	r3, r3, #8
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	4313      	orrs	r3, r2
 8000c24:	b29a      	uxth	r2, r3
 8000c26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000c28:	831a      	strh	r2, [r3, #24]
        rx_state->calculated_crc = crcAddSignature(0xFFFFU, data_type_signature);
 8000c2a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000c2e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000c32:	f001 fa62 	bl	80020fa <crcAddSignature>
 8000c36:	4603      	mov	r3, r0
 8000c38:	461a      	mov	r2, r3
 8000c3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000c3c:	829a      	strh	r2, [r3, #20]
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 8000c3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000c40:	8a98      	ldrh	r0, [r3, #20]
                                          frame->data + 2, (uint8_t)(frame->data_len - 3));
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	3304      	adds	r3, #4
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 8000c46:	1c99      	adds	r1, r3, #2
                                          frame->data + 2, (uint8_t)(frame->data_len - 3));
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	7b1b      	ldrb	r3, [r3, #12]
 8000c4c:	3b03      	subs	r3, #3
 8000c4e:	b2db      	uxtb	r3, r3
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 8000c50:	461a      	mov	r2, r3
 8000c52:	f001 fa81 	bl	8002158 <crcAdd>
 8000c56:	4603      	mov	r3, r0
 8000c58:	461a      	mov	r2, r3
 8000c5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000c5c:	829a      	strh	r2, [r3, #20]
    {
 8000c5e:	e124      	b.n	8000eaa <canardHandleRxFrame+0x716>
    }
    else if (!IS_START_OF_TRANSFER(tail_byte) && !IS_END_OF_TRANSFER(tail_byte))    // Middle of a multi-frame transfer
 8000c60:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000c64:	09db      	lsrs	r3, r3, #7
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	f003 0301 	and.w	r3, r3, #1
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d133      	bne.n	8000cd8 <canardHandleRxFrame+0x544>
 8000c70:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000c74:	099b      	lsrs	r3, r3, #6
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	f003 0301 	and.w	r3, r3, #1
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d12b      	bne.n	8000cd8 <canardHandleRxFrame+0x544>
    {
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data,
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	f103 000c 	add.w	r0, r3, #12
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	1d1a      	adds	r2, r3, #4
                                                 (uint8_t) (frame->data_len - 1));
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	7b1b      	ldrb	r3, [r3, #12]
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data,
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8000c94:	f000 ff44 	bl	8001b20 <bufferBlockPushBytes>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if (ret < 0)
 8000c9c:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	da09      	bge.n	8000cb8 <canardHandleRxFrame+0x524>
        {
            releaseStatePayload(ins, rx_state);
 8000ca4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8000ca6:	68f8      	ldr	r0, [r7, #12]
 8000ca8:	f000 ff06 	bl	8001ab8 <releaseStatePayload>
            prepareForNextTransfer(rx_state);
 8000cac:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8000cae:	f000 fe04 	bl	80018ba <prepareForNextTransfer>
            return -CANARD_ERROR_OUT_OF_MEMORY;
 8000cb2:	f06f 0302 	mvn.w	r3, #2
 8000cb6:	e105      	b.n	8000ec4 <canardHandleRxFrame+0x730>
        }
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 8000cb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000cba:	8a98      	ldrh	r0, [r3, #20]
                                          frame->data, (uint8_t)(frame->data_len - 1));
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	1d19      	adds	r1, r3, #4
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	7b1b      	ldrb	r3, [r3, #12]
 8000cc4:	3b01      	subs	r3, #1
 8000cc6:	b2db      	uxtb	r3, r3
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 8000cc8:	461a      	mov	r2, r3
 8000cca:	f001 fa45 	bl	8002158 <crcAdd>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000cd4:	829a      	strh	r2, [r3, #20]
    {
 8000cd6:	e0e8      	b.n	8000eaa <canardHandleRxFrame+0x716>
    }
    else                                                                            // End of a multi-frame transfer
    {
        const uint8_t frame_payload_size = (uint8_t)(frame->data_len - 1);
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	7b1b      	ldrb	r3, [r3, #12]
 8000cdc:	3b01      	subs	r3, #1
 8000cde:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

        uint8_t tail_offset = 0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

        if (rx_state->payload_len < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE)
 8000ce8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000cea:	8adb      	ldrh	r3, [r3, #22]
 8000cec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000cf0:	b29b      	uxth	r3, r3
 8000cf2:	2b04      	cmp	r3, #4
 8000cf4:	d823      	bhi.n	8000d3e <canardHandleRxFrame+0x5aa>
        {
            // Copy the beginning of the frame into the head, point the tail pointer to the remainder
            for (size_t i = rx_state->payload_len;
 8000cf6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000cf8:	8adb      	ldrh	r3, [r3, #22]
 8000cfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	667b      	str	r3, [r7, #100]	@ 0x64
 8000d02:	e012      	b.n	8000d2a <canardHandleRxFrame+0x596>
                 (i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) && (tail_offset < frame_payload_size);
                 i++, tail_offset++)
            {
                rx_state->buffer_head[i] = frame->data[tail_offset];
 8000d04:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8000d08:	68ba      	ldr	r2, [r7, #8]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	7919      	ldrb	r1, [r3, #4]
 8000d0e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000d10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000d12:	4413      	add	r3, r2
 8000d14:	331b      	adds	r3, #27
 8000d16:	460a      	mov	r2, r1
 8000d18:	701a      	strb	r2, [r3, #0]
                 i++, tail_offset++)
 8000d1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	667b      	str	r3, [r7, #100]	@ 0x64
 8000d20:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8000d24:	3301      	adds	r3, #1
 8000d26:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                 (i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) && (tail_offset < frame_payload_size);
 8000d2a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000d2c:	2b04      	cmp	r3, #4
 8000d2e:	d848      	bhi.n	8000dc2 <canardHandleRxFrame+0x62e>
 8000d30:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 8000d34:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d3e3      	bcc.n	8000d04 <canardHandleRxFrame+0x570>
 8000d3c:	e041      	b.n	8000dc2 <canardHandleRxFrame+0x62e>
            }
        }
        else
        {
            // Like above, except that the beginning goes into the last block of the storage
            CanardBufferBlock* block = canardBufferFromIdx(&ins->allocator, rx_state->buffer_blocks);
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	f103 020c 	add.w	r2, r3, #12
 8000d44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4610      	mov	r0, r2
 8000d4c:	f7ff fc1e 	bl	800058c <canardBufferFromIdx>
 8000d50:	6638      	str	r0, [r7, #96]	@ 0x60
            if (block != NULL)
 8000d52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d034      	beq.n	8000dc2 <canardHandleRxFrame+0x62e>
            {
                size_t offset = CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE;    // Payload offset of the first block
 8000d58:	2305      	movs	r3, #5
 8000d5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
                while (block->next != NULL)
 8000d5c:	e005      	b.n	8000d6a <canardHandleRxFrame+0x5d6>
                {
                    block = block->next;
 8000d5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	663b      	str	r3, [r7, #96]	@ 0x60
                    offset += CANARD_BUFFER_BLOCK_DATA_SIZE;
 8000d64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000d66:	331c      	adds	r3, #28
 8000d68:	65fb      	str	r3, [r7, #92]	@ 0x5c
                while (block->next != NULL)
 8000d6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d1f5      	bne.n	8000d5e <canardHandleRxFrame+0x5ca>
                }
                CANARD_ASSERT(block != NULL);

                const size_t offset_within_block = rx_state->payload_len - offset;
 8000d72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000d74:	8adb      	ldrh	r3, [r3, #22]
 8000d76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	63bb      	str	r3, [r7, #56]	@ 0x38
                CANARD_ASSERT(offset_within_block <= CANARD_BUFFER_BLOCK_DATA_SIZE);

                for (size_t i = offset_within_block;
 8000d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000d86:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000d88:	e012      	b.n	8000db0 <canardHandleRxFrame+0x61c>
                     (i < CANARD_BUFFER_BLOCK_DATA_SIZE) && (tail_offset < frame_payload_size);
                     i++, tail_offset++)
                {
                    block->data[i] = frame->data[tail_offset];
 8000d8a:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8000d8e:	68ba      	ldr	r2, [r7, #8]
 8000d90:	4413      	add	r3, r2
 8000d92:	7919      	ldrb	r1, [r3, #4]
 8000d94:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000d96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000d98:	4413      	add	r3, r2
 8000d9a:	3304      	adds	r3, #4
 8000d9c:	460a      	mov	r2, r1
 8000d9e:	701a      	strb	r2, [r3, #0]
                     i++, tail_offset++)
 8000da0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000da2:	3301      	adds	r3, #1
 8000da4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000da6:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8000daa:	3301      	adds	r3, #1
 8000dac:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                     (i < CANARD_BUFFER_BLOCK_DATA_SIZE) && (tail_offset < frame_payload_size);
 8000db0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000db2:	2b1b      	cmp	r3, #27
 8000db4:	d805      	bhi.n	8000dc2 <canardHandleRxFrame+0x62e>
 8000db6:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 8000dba:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d3e3      	bcc.n	8000d8a <canardHandleRxFrame+0x5f6>
                }
            }
        }

        CanardRxTransfer rx_transfer = {
 8000dc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000dc6:	e9c7 2304 	strd	r2, r3, [r7, #16]
            .timestamp_usec = timestamp_usec,
            .payload_head = rx_state->buffer_head,
 8000dca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000dcc:	331b      	adds	r3, #27
        CanardRxTransfer rx_transfer = {
 8000dce:	61bb      	str	r3, [r7, #24]
            .payload_middle = canardBufferFromIdx(&ins->allocator, rx_state->buffer_blocks),
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	f103 020c 	add.w	r2, r3, #12
 8000dd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4610      	mov	r0, r2
 8000dde:	f7ff fbd5 	bl	800058c <canardBufferFromIdx>
 8000de2:	4603      	mov	r3, r0
        CanardRxTransfer rx_transfer = {
 8000de4:	61fb      	str	r3, [r7, #28]
            .payload_tail = (tail_offset >= frame_payload_size) ? NULL : (&frame->data[tail_offset]),
 8000de6:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 8000dea:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d205      	bcs.n	8000dfe <canardHandleRxFrame+0x66a>
 8000df2:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8000df6:	68ba      	ldr	r2, [r7, #8]
 8000df8:	4413      	add	r3, r2
 8000dfa:	3304      	adds	r3, #4
 8000dfc:	e000      	b.n	8000e00 <canardHandleRxFrame+0x66c>
 8000dfe:	2300      	movs	r3, #0
        CanardRxTransfer rx_transfer = {
 8000e00:	623b      	str	r3, [r7, #32]
            .payload_len = (uint16_t)(rx_state->payload_len + frame_payload_size),
 8000e02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000e04:	8adb      	ldrh	r3, [r3, #22]
 8000e06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	4413      	add	r3, r2
 8000e16:	b29b      	uxth	r3, r3
        CanardRxTransfer rx_transfer = {
 8000e18:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8000e1a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8000e1e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000e20:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000e24:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            .data_type_id = data_type_id,
            .transfer_type = (uint8_t)transfer_type,
            .transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte),
 8000e28:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000e2c:	f003 031f 	and.w	r3, r3, #31
 8000e30:	b2db      	uxtb	r3, r3
        CanardRxTransfer rx_transfer = {
 8000e32:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8000e36:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000e3a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8000e3e:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8000e42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
#elif CANARD_ENABLE_TAO_OPTION
            .tao = !ins->tao_disabled
#endif
        };

        rx_state->buffer_blocks = CANARD_BUFFER_IDX_NONE;     // Block list ownership has been transferred to rx_transfer!
 8000e46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000e48:	2200      	movs	r2, #0
 8000e4a:	605a      	str	r2, [r3, #4]

        // CRC validation
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc, frame->data, frame->data_len - 1U);
 8000e4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000e4e:	8a98      	ldrh	r0, [r3, #20]
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	1d19      	adds	r1, r3, #4
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	7b1b      	ldrb	r3, [r3, #12]
 8000e58:	3b01      	subs	r3, #1
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	f001 f97c 	bl	8002158 <crcAdd>
 8000e60:	4603      	mov	r3, r0
 8000e62:	461a      	mov	r2, r3
 8000e64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000e66:	829a      	strh	r2, [r3, #20]
        if (rx_state->calculated_crc == rx_state->payload_crc)
 8000e68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000e6a:	8a9a      	ldrh	r2, [r3, #20]
 8000e6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000e6e:	8b1b      	ldrh	r3, [r3, #24]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d106      	bne.n	8000e82 <canardHandleRxFrame+0x6ee>
        {
            ins->on_reception(ins, &rx_transfer);
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	f107 0210 	add.w	r2, r7, #16
 8000e7c:	4611      	mov	r1, r2
 8000e7e:	68f8      	ldr	r0, [r7, #12]
 8000e80:	4798      	blx	r3
        }

        // Making sure the payload is released even if the application didn't bother with it
        canardReleaseRxTransferPayload(ins, &rx_transfer);
 8000e82:	f107 0310 	add.w	r3, r7, #16
 8000e86:	4619      	mov	r1, r3
 8000e88:	68f8      	ldr	r0, [r7, #12]
 8000e8a:	f000 fa93 	bl	80013b4 <canardReleaseRxTransferPayload>
        prepareForNextTransfer(rx_state);
 8000e8e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8000e90:	f000 fd13 	bl	80018ba <prepareForNextTransfer>

        if (rx_state->calculated_crc == rx_state->payload_crc)
 8000e94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000e96:	8a9a      	ldrh	r2, [r3, #20]
 8000e98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000e9a:	8b1b      	ldrh	r3, [r3, #24]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d101      	bne.n	8000ea4 <canardHandleRxFrame+0x710>
        {
            return CANARD_OK;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	e00f      	b.n	8000ec4 <canardHandleRxFrame+0x730>
        }
        else
        {
            return -CANARD_ERROR_RX_BAD_CRC;
 8000ea4:	f06f 0310 	mvn.w	r3, #16
 8000ea8:	e00c      	b.n	8000ec4 <canardHandleRxFrame+0x730>
        }
    }

    rx_state->next_toggle = rx_state->next_toggle ? 0 : 1;
 8000eaa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000eac:	7ddb      	ldrb	r3, [r3, #23]
 8000eae:	b25b      	sxtb	r3, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	09db      	lsrs	r3, r3, #7
 8000eb6:	b2d9      	uxtb	r1, r3
 8000eb8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000eba:	7dd3      	ldrb	r3, [r2, #23]
 8000ebc:	f361 13c7 	bfi	r3, r1, #7, #1
 8000ec0:	75d3      	strb	r3, [r2, #23]
    return CANARD_OK;
 8000ec2:	2300      	movs	r3, #0
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3774      	adds	r7, #116	@ 0x74
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000ece:	bf00      	nop

08000ed0 <canardCleanupStaleTransfers>:

void canardCleanupStaleTransfers(CanardInstance* ins, uint64_t current_time_usec)
{
 8000ed0:	b5b0      	push	{r4, r5, r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	e9c7 2300 	strd	r2, r3, [r7]
    CanardRxState* prev = ins->rx_states, * state = ins->rx_states;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	6a1b      	ldr	r3, [r3, #32]
 8000ee0:	617b      	str	r3, [r7, #20]
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	6a1b      	ldr	r3, [r3, #32]
 8000ee6:	613b      	str	r3, [r7, #16]

    while (state != NULL)
 8000ee8:	e053      	b.n	8000f92 <canardCleanupStaleTransfers+0xc2>
    {
        if ((current_time_usec - state->timestamp_usec) > TRANSFER_TIMEOUT_USEC)
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000ef0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000ef4:	1a84      	subs	r4, r0, r2
 8000ef6:	eb61 0503 	sbc.w	r5, r1, r3
 8000efa:	4b2a      	ldr	r3, [pc, #168]	@ (8000fa4 <canardCleanupStaleTransfers+0xd4>)
 8000efc:	429c      	cmp	r4, r3
 8000efe:	f175 0300 	sbcs.w	r3, r5, #0
 8000f02:	d33a      	bcc.n	8000f7a <canardCleanupStaleTransfers+0xaa>
        {
            if (state == ins->rx_states)
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	6a1b      	ldr	r3, [r3, #32]
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d11c      	bne.n	8000f48 <canardCleanupStaleTransfers+0x78>
            {
                releaseStatePayload(ins, state);
 8000f0e:	6939      	ldr	r1, [r7, #16]
 8000f10:	68f8      	ldr	r0, [r7, #12]
 8000f12:	f000 fdd1 	bl	8001ab8 <releaseStatePayload>
                ins->rx_states = canardRxFromIdx(&ins->allocator, ins->rx_states->next);
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	f103 020c 	add.w	r2, r3, #12
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	6a1b      	ldr	r3, [r3, #32]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4619      	mov	r1, r3
 8000f24:	4610      	mov	r0, r2
 8000f26:	f7ff fb49 	bl	80005bc <canardRxFromIdx>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	621a      	str	r2, [r3, #32]
                freeBlock(&ins->allocator, state);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	330c      	adds	r3, #12
 8000f34:	6939      	ldr	r1, [r7, #16]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f001 f98b 	bl	8002252 <freeBlock>
                state = ins->rx_states;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	6a1b      	ldr	r3, [r3, #32]
 8000f40:	613b      	str	r3, [r7, #16]
                prev = state;
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	617b      	str	r3, [r7, #20]
 8000f46:	e024      	b.n	8000f92 <canardCleanupStaleTransfers+0xc2>
            }
            else
            {
                releaseStatePayload(ins, state);
 8000f48:	6939      	ldr	r1, [r7, #16]
 8000f4a:	68f8      	ldr	r0, [r7, #12]
 8000f4c:	f000 fdb4 	bl	8001ab8 <releaseStatePayload>
                prev->next = state->next;
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	601a      	str	r2, [r3, #0]
                freeBlock(&ins->allocator, state);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	330c      	adds	r3, #12
 8000f5c:	6939      	ldr	r1, [r7, #16]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f001 f977 	bl	8002252 <freeBlock>
                state = canardRxFromIdx(&ins->allocator, prev->next);
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f103 020c 	add.w	r2, r3, #12
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4610      	mov	r0, r2
 8000f72:	f7ff fb23 	bl	80005bc <canardRxFromIdx>
 8000f76:	6138      	str	r0, [r7, #16]
 8000f78:	e00b      	b.n	8000f92 <canardCleanupStaleTransfers+0xc2>
            }
        }
        else
        {
            prev = state;
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	617b      	str	r3, [r7, #20]
            state = canardRxFromIdx(&ins->allocator, state->next);
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	f103 020c 	add.w	r2, r3, #12
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4610      	mov	r0, r2
 8000f8c:	f7ff fb16 	bl	80005bc <canardRxFromIdx>
 8000f90:	6138      	str	r0, [r7, #16]
    while (state != NULL)
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d1a8      	bne.n	8000eea <canardCleanupStaleTransfers+0x1a>
            prev_item = item;
            item = item->next;
        }
    }
#endif
}
 8000f98:	bf00      	nop
 8000f9a:	bf00      	nop
 8000f9c:	3718      	adds	r7, #24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bdb0      	pop	{r4, r5, r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	001e8481 	.word	0x001e8481

08000fa8 <canardDecodeScalar>:
int16_t canardDecodeScalar(const CanardRxTransfer* transfer,
                           uint32_t bit_offset,
                           uint8_t bit_length,
                           bool value_is_signed,
                           void* out_value)
{
 8000fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fac:	b08d      	sub	sp, #52	@ 0x34
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	61f8      	str	r0, [r7, #28]
 8000fb2:	61b9      	str	r1, [r7, #24]
 8000fb4:	4611      	mov	r1, r2
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	460b      	mov	r3, r1
 8000fba:	75fb      	strb	r3, [r7, #23]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	75bb      	strb	r3, [r7, #22]
    if (transfer == NULL || out_value == NULL)
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d002      	beq.n	8000fcc <canardDecodeScalar+0x24>
 8000fc6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d102      	bne.n	8000fd2 <canardDecodeScalar+0x2a>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8000fcc:	f06f 0301 	mvn.w	r3, #1
 8000fd0:	e16e      	b.n	80012b0 <canardDecodeScalar+0x308>
    }

    if (bit_length < 1 || bit_length > 64)
 8000fd2:	7dfb      	ldrb	r3, [r7, #23]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d002      	beq.n	8000fde <canardDecodeScalar+0x36>
 8000fd8:	7dfb      	ldrb	r3, [r7, #23]
 8000fda:	2b40      	cmp	r3, #64	@ 0x40
 8000fdc:	d902      	bls.n	8000fe4 <canardDecodeScalar+0x3c>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8000fde:	f06f 0301 	mvn.w	r3, #1
 8000fe2:	e165      	b.n	80012b0 <canardDecodeScalar+0x308>
    }

    if (bit_length == 1 && value_is_signed)
 8000fe4:	7dfb      	ldrb	r3, [r7, #23]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d105      	bne.n	8000ff6 <canardDecodeScalar+0x4e>
 8000fea:	7dbb      	ldrb	r3, [r7, #22]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d002      	beq.n	8000ff6 <canardDecodeScalar+0x4e>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8000ff0:	f06f 0301 	mvn.w	r3, #1
 8000ff4:	e15c      	b.n	80012b0 <canardDecodeScalar+0x308>
        uint64_t u64;
        int64_t  s64;           ///< Also double, possibly float, possibly long double (depends on implementation)
        uint8_t bytes[8];
    } storage;

    memset(&storage, 0, sizeof(storage));   // This is important
 8000ff6:	f107 0320 	add.w	r3, r7, #32
 8000ffa:	2208      	movs	r2, #8
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f004 fca8 	bl	8005954 <memset>

    const int16_t result = descatterTransferPayload(transfer, bit_offset, bit_length, &storage.bytes[0]);
 8001004:	f107 0320 	add.w	r3, r7, #32
 8001008:	7dfa      	ldrb	r2, [r7, #23]
 800100a:	69b9      	ldr	r1, [r7, #24]
 800100c:	69f8      	ldr	r0, [r7, #28]
 800100e:	f000 ff0f 	bl	8001e30 <descatterTransferPayload>
 8001012:	4603      	mov	r3, r0
 8001014:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    if (result <= 0)
 8001016:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 800101a:	2b00      	cmp	r3, #0
 800101c:	dc02      	bgt.n	8001024 <canardDecodeScalar+0x7c>
    {
        return result;
 800101e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8001022:	e145      	b.n	80012b0 <canardDecodeScalar+0x308>
     * The bit copy algorithm assumes that more significant bits have lower index, so we need to shift some.
     * Extra most significant bits will be filled with zeroes, which is fine.
     * Coverity Scan mistakenly believes that the array may be overrun if bit_length == 64; however, this branch will
     * not be taken if bit_length == 64, because 64 % 8 == 0.
     */
    if ((bit_length % 8) != 0)
 8001024:	7dfb      	ldrb	r3, [r7, #23]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	b2db      	uxtb	r3, r3
 800102c:	2b00      	cmp	r3, #0
 800102e:	d018      	beq.n	8001062 <canardDecodeScalar+0xba>
    {
        // coverity[overrun-local]
        storage.bytes[bit_length / 8U] = (uint8_t)(storage.bytes[bit_length / 8U] >> ((8U - (bit_length % 8U)) & 7U));
 8001030:	7dfb      	ldrb	r3, [r7, #23]
 8001032:	08db      	lsrs	r3, r3, #3
 8001034:	b2db      	uxtb	r3, r3
 8001036:	3320      	adds	r3, #32
 8001038:	f107 0210 	add.w	r2, r7, #16
 800103c:	4413      	add	r3, r2
 800103e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001042:	461a      	mov	r2, r3
 8001044:	7dfb      	ldrb	r3, [r7, #23]
 8001046:	425b      	negs	r3, r3
 8001048:	f003 0307 	and.w	r3, r3, #7
 800104c:	411a      	asrs	r2, r3
 800104e:	7dfb      	ldrb	r3, [r7, #23]
 8001050:	08db      	lsrs	r3, r3, #3
 8001052:	b2db      	uxtb	r3, r3
 8001054:	b2d2      	uxtb	r2, r2
 8001056:	3320      	adds	r3, #32
 8001058:	f107 0110 	add.w	r1, r7, #16
 800105c:	440b      	add	r3, r1
 800105e:	f803 2c10 	strb.w	r2, [r3, #-16]
    }

    /*
     * Determining the closest standard byte length - this will be needed for byte reordering and sign bit extension.
     */
    uint8_t std_byte_length = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if      (bit_length == 1)   { std_byte_length = sizeof(bool); }
 8001068:	7dfb      	ldrb	r3, [r7, #23]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d103      	bne.n	8001076 <canardDecodeScalar+0xce>
 800106e:	2301      	movs	r3, #1
 8001070:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001074:	e01e      	b.n	80010b4 <canardDecodeScalar+0x10c>
    else if (bit_length <= 8)   { std_byte_length = 1; }
 8001076:	7dfb      	ldrb	r3, [r7, #23]
 8001078:	2b08      	cmp	r3, #8
 800107a:	d803      	bhi.n	8001084 <canardDecodeScalar+0xdc>
 800107c:	2301      	movs	r3, #1
 800107e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001082:	e017      	b.n	80010b4 <canardDecodeScalar+0x10c>
    else if (bit_length <= 16)  { std_byte_length = 2; }
 8001084:	7dfb      	ldrb	r3, [r7, #23]
 8001086:	2b10      	cmp	r3, #16
 8001088:	d803      	bhi.n	8001092 <canardDecodeScalar+0xea>
 800108a:	2302      	movs	r3, #2
 800108c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001090:	e010      	b.n	80010b4 <canardDecodeScalar+0x10c>
    else if (bit_length <= 32)  { std_byte_length = 4; }
 8001092:	7dfb      	ldrb	r3, [r7, #23]
 8001094:	2b20      	cmp	r3, #32
 8001096:	d803      	bhi.n	80010a0 <canardDecodeScalar+0xf8>
 8001098:	2304      	movs	r3, #4
 800109a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800109e:	e009      	b.n	80010b4 <canardDecodeScalar+0x10c>
    else if (bit_length <= 64)  { std_byte_length = 8; }
 80010a0:	7dfb      	ldrb	r3, [r7, #23]
 80010a2:	2b40      	cmp	r3, #64	@ 0x40
 80010a4:	d803      	bhi.n	80010ae <canardDecodeScalar+0x106>
 80010a6:	2308      	movs	r3, #8
 80010a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80010ac:	e002      	b.n	80010b4 <canardDecodeScalar+0x10c>
    else
    {
        CANARD_ASSERT(false);
        return -CANARD_ERROR_INTERNAL;
 80010ae:	f06f 0308 	mvn.w	r3, #8
 80010b2:	e0fd      	b.n	80012b0 <canardDecodeScalar+0x308>
    CANARD_ASSERT((std_byte_length > 0) && (std_byte_length <= 8));

    /*
     * Flipping the byte order if needed.
     */
    if (isBigEndian())
 80010b4:	f000 ffb1 	bl	800201a <isBigEndian>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d007      	beq.n	80010ce <canardDecodeScalar+0x126>
    {
        swapByteOrder(&storage.bytes[0], std_byte_length);
 80010be:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80010c2:	f107 0320 	add.w	r3, r7, #32
 80010c6:	4611      	mov	r1, r2
 80010c8:	4618      	mov	r0, r3
 80010ca:	f000 ffb7 	bl	800203c <swapByteOrder>

    /*
     * Extending the sign bit if needed. I miss templates.
     * Note that we operate on unsigned values in order to avoid undefined behaviors.
     */
    if (value_is_signed && (std_byte_length * 8 != bit_length))
 80010ce:	7dbb      	ldrb	r3, [r7, #22]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	f000 809b 	beq.w	800120c <canardDecodeScalar+0x264>
 80010d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010da:	00da      	lsls	r2, r3, #3
 80010dc:	7dfb      	ldrb	r3, [r7, #23]
 80010de:	429a      	cmp	r2, r3
 80010e0:	f000 8094 	beq.w	800120c <canardDecodeScalar+0x264>
    {
        if (bit_length <= 8)
 80010e4:	7dfb      	ldrb	r3, [r7, #23]
 80010e6:	2b08      	cmp	r3, #8
 80010e8:	d819      	bhi.n	800111e <canardDecodeScalar+0x176>
        {
            if ((storage.u8 & (1U << (bit_length - 1U))) != 0)                           // If the sign bit is set...
 80010ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80010ee:	461a      	mov	r2, r3
 80010f0:	7dfb      	ldrb	r3, [r7, #23]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	fa22 f303 	lsr.w	r3, r2, r3
 80010f8:	f003 0301 	and.w	r3, r3, #1
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	f000 8085 	beq.w	800120c <canardDecodeScalar+0x264>
            {
                storage.u8 |= (uint8_t) 0xFFU & (uint8_t) ~((1U << bit_length) - 1U);   // ...set all bits above it.
 8001102:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001106:	7dfb      	ldrb	r3, [r7, #23]
 8001108:	2101      	movs	r1, #1
 800110a:	fa01 f303 	lsl.w	r3, r1, r3
 800110e:	b2db      	uxtb	r3, r3
 8001110:	425b      	negs	r3, r3
 8001112:	b2db      	uxtb	r3, r3
 8001114:	4313      	orrs	r3, r2
 8001116:	b2db      	uxtb	r3, r3
 8001118:	f887 3020 	strb.w	r3, [r7, #32]
 800111c:	e076      	b.n	800120c <canardDecodeScalar+0x264>
            }
        }
        else if (bit_length <= 16)
 800111e:	7dfb      	ldrb	r3, [r7, #23]
 8001120:	2b10      	cmp	r3, #16
 8001122:	d815      	bhi.n	8001150 <canardDecodeScalar+0x1a8>
        {
            if ((storage.u16 & (1U << (bit_length - 1U))) != 0)
 8001124:	8c3b      	ldrh	r3, [r7, #32]
 8001126:	461a      	mov	r2, r3
 8001128:	7dfb      	ldrb	r3, [r7, #23]
 800112a:	3b01      	subs	r3, #1
 800112c:	fa22 f303 	lsr.w	r3, r2, r3
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	2b00      	cmp	r3, #0
 8001136:	d069      	beq.n	800120c <canardDecodeScalar+0x264>
            {
                storage.u16 |= (uint16_t) 0xFFFFU & (uint16_t) ~((1U << bit_length) - 1U);
 8001138:	8c3a      	ldrh	r2, [r7, #32]
 800113a:	7dfb      	ldrb	r3, [r7, #23]
 800113c:	2101      	movs	r1, #1
 800113e:	fa01 f303 	lsl.w	r3, r1, r3
 8001142:	b29b      	uxth	r3, r3
 8001144:	425b      	negs	r3, r3
 8001146:	b29b      	uxth	r3, r3
 8001148:	4313      	orrs	r3, r2
 800114a:	b29b      	uxth	r3, r3
 800114c:	843b      	strh	r3, [r7, #32]
 800114e:	e05d      	b.n	800120c <canardDecodeScalar+0x264>
            }
        }
        else if (bit_length <= 32)
 8001150:	7dfb      	ldrb	r3, [r7, #23]
 8001152:	2b20      	cmp	r3, #32
 8001154:	d811      	bhi.n	800117a <canardDecodeScalar+0x1d2>
        {
            if ((storage.u32 & (((uint32_t) 1) << (bit_length - 1U))) != 0)
 8001156:	6a3a      	ldr	r2, [r7, #32]
 8001158:	7dfb      	ldrb	r3, [r7, #23]
 800115a:	3b01      	subs	r3, #1
 800115c:	fa22 f303 	lsr.w	r3, r2, r3
 8001160:	f003 0301 	and.w	r3, r3, #1
 8001164:	2b00      	cmp	r3, #0
 8001166:	d051      	beq.n	800120c <canardDecodeScalar+0x264>
            {
                storage.u32 |= (uint32_t) 0xFFFFFFFFUL & (uint32_t) ~((((uint32_t) 1) << bit_length) - 1U);
 8001168:	6a3a      	ldr	r2, [r7, #32]
 800116a:	7dfb      	ldrb	r3, [r7, #23]
 800116c:	2101      	movs	r1, #1
 800116e:	fa01 f303 	lsl.w	r3, r1, r3
 8001172:	425b      	negs	r3, r3
 8001174:	4313      	orrs	r3, r2
 8001176:	623b      	str	r3, [r7, #32]
 8001178:	e048      	b.n	800120c <canardDecodeScalar+0x264>
            }
        }
        else if (bit_length < 64)   // Strictly less, this is not a typo
 800117a:	7dfb      	ldrb	r3, [r7, #23]
 800117c:	2b3f      	cmp	r3, #63	@ 0x3f
 800117e:	d842      	bhi.n	8001206 <canardDecodeScalar+0x25e>
        {
            if ((storage.u64 & (((uint64_t) 1) << (bit_length - 1U))) != 0)
 8001180:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001184:	7df9      	ldrb	r1, [r7, #23]
 8001186:	1e48      	subs	r0, r1, #1
 8001188:	f1c0 0620 	rsb	r6, r0, #32
 800118c:	f1a0 0120 	sub.w	r1, r0, #32
 8001190:	fa22 f400 	lsr.w	r4, r2, r0
 8001194:	fa03 f606 	lsl.w	r6, r3, r6
 8001198:	4334      	orrs	r4, r6
 800119a:	fa23 f101 	lsr.w	r1, r3, r1
 800119e:	430c      	orrs	r4, r1
 80011a0:	fa23 f500 	lsr.w	r5, r3, r0
 80011a4:	f004 0301 	and.w	r3, r4, #1
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80011b2:	460b      	mov	r3, r1
 80011b4:	4313      	orrs	r3, r2
 80011b6:	d029      	beq.n	800120c <canardDecodeScalar+0x264>
            {
                storage.u64 |= (uint64_t) 0xFFFFFFFFFFFFFFFFULL & (uint64_t) ~((((uint64_t) 1) << bit_length) - 1U);
 80011b8:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80011bc:	7df9      	ldrb	r1, [r7, #23]
 80011be:	f04f 0201 	mov.w	r2, #1
 80011c2:	f04f 0300 	mov.w	r3, #0
 80011c6:	f1a1 0620 	sub.w	r6, r1, #32
 80011ca:	f1c1 0020 	rsb	r0, r1, #32
 80011ce:	fa03 f901 	lsl.w	r9, r3, r1
 80011d2:	fa02 f606 	lsl.w	r6, r2, r6
 80011d6:	ea49 0906 	orr.w	r9, r9, r6
 80011da:	fa22 f000 	lsr.w	r0, r2, r0
 80011de:	ea49 0900 	orr.w	r9, r9, r0
 80011e2:	fa02 f801 	lsl.w	r8, r2, r1
 80011e6:	2300      	movs	r3, #0
 80011e8:	f1d8 0a00 	rsbs	sl, r8, #0
 80011ec:	eb63 0b09 	sbc.w	fp, r3, r9
 80011f0:	ea44 030a 	orr.w	r3, r4, sl
 80011f4:	603b      	str	r3, [r7, #0]
 80011f6:	ea45 030b 	orr.w	r3, r5, fp
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001200:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8001204:	e002      	b.n	800120c <canardDecodeScalar+0x264>
            }
        }
        else
        {
            CANARD_ASSERT(false);
            return -CANARD_ERROR_INTERNAL;
 8001206:	f06f 0308 	mvn.w	r3, #8
 800120a:	e051      	b.n	80012b0 <canardDecodeScalar+0x308>
    }

    /*
     * Copying the result out.
     */
    if (value_is_signed)
 800120c:	7dbb      	ldrb	r3, [r7, #22]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d022      	beq.n	8001258 <canardDecodeScalar+0x2b0>
    {
        if      (bit_length <= 8)   { *( (int8_t*) out_value) = storage.s8;  }
 8001212:	7dfb      	ldrb	r3, [r7, #23]
 8001214:	2b08      	cmp	r3, #8
 8001216:	d804      	bhi.n	8001222 <canardDecodeScalar+0x27a>
 8001218:	f997 2020 	ldrsb.w	r2, [r7, #32]
 800121c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800121e:	701a      	strb	r2, [r3, #0]
 8001220:	e044      	b.n	80012ac <canardDecodeScalar+0x304>
        else if (bit_length <= 16)  { *((int16_t*) out_value) = storage.s16; }
 8001222:	7dfb      	ldrb	r3, [r7, #23]
 8001224:	2b10      	cmp	r3, #16
 8001226:	d804      	bhi.n	8001232 <canardDecodeScalar+0x28a>
 8001228:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800122c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800122e:	801a      	strh	r2, [r3, #0]
 8001230:	e03c      	b.n	80012ac <canardDecodeScalar+0x304>
        else if (bit_length <= 32)  { *((int32_t*) out_value) = storage.s32; }
 8001232:	7dfb      	ldrb	r3, [r7, #23]
 8001234:	2b20      	cmp	r3, #32
 8001236:	d803      	bhi.n	8001240 <canardDecodeScalar+0x298>
 8001238:	6a3a      	ldr	r2, [r7, #32]
 800123a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	e035      	b.n	80012ac <canardDecodeScalar+0x304>
        else if (bit_length <= 64)  { *((int64_t*) out_value) = storage.s64; }
 8001240:	7dfb      	ldrb	r3, [r7, #23]
 8001242:	2b40      	cmp	r3, #64	@ 0x40
 8001244:	d805      	bhi.n	8001252 <canardDecodeScalar+0x2aa>
 8001246:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800124a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800124c:	e9c1 2300 	strd	r2, r3, [r1]
 8001250:	e02c      	b.n	80012ac <canardDecodeScalar+0x304>
        else
        {
            CANARD_ASSERT(false);
            return -CANARD_ERROR_INTERNAL;
 8001252:	f06f 0308 	mvn.w	r3, #8
 8001256:	e02b      	b.n	80012b0 <canardDecodeScalar+0x308>
        }
    }
    else
    {
        if      (bit_length == 1)   { *(    (bool*) out_value) = storage.boolean; }
 8001258:	7dfb      	ldrb	r3, [r7, #23]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d104      	bne.n	8001268 <canardDecodeScalar+0x2c0>
 800125e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001262:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001264:	701a      	strb	r2, [r3, #0]
 8001266:	e021      	b.n	80012ac <canardDecodeScalar+0x304>
        else if (bit_length <= 8)   { *( (uint8_t*) out_value) = storage.u8;  }
 8001268:	7dfb      	ldrb	r3, [r7, #23]
 800126a:	2b08      	cmp	r3, #8
 800126c:	d804      	bhi.n	8001278 <canardDecodeScalar+0x2d0>
 800126e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001272:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001274:	701a      	strb	r2, [r3, #0]
 8001276:	e019      	b.n	80012ac <canardDecodeScalar+0x304>
        else if (bit_length <= 16)  { *((uint16_t*) out_value) = storage.u16; }
 8001278:	7dfb      	ldrb	r3, [r7, #23]
 800127a:	2b10      	cmp	r3, #16
 800127c:	d803      	bhi.n	8001286 <canardDecodeScalar+0x2de>
 800127e:	8c3a      	ldrh	r2, [r7, #32]
 8001280:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001282:	801a      	strh	r2, [r3, #0]
 8001284:	e012      	b.n	80012ac <canardDecodeScalar+0x304>
        else if (bit_length <= 32)  { *((uint32_t*) out_value) = storage.u32; }
 8001286:	7dfb      	ldrb	r3, [r7, #23]
 8001288:	2b20      	cmp	r3, #32
 800128a:	d803      	bhi.n	8001294 <canardDecodeScalar+0x2ec>
 800128c:	6a3a      	ldr	r2, [r7, #32]
 800128e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	e00b      	b.n	80012ac <canardDecodeScalar+0x304>
        else if (bit_length <= 64)  { *((uint64_t*) out_value) = storage.u64; }
 8001294:	7dfb      	ldrb	r3, [r7, #23]
 8001296:	2b40      	cmp	r3, #64	@ 0x40
 8001298:	d805      	bhi.n	80012a6 <canardDecodeScalar+0x2fe>
 800129a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800129e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80012a0:	e9c1 2300 	strd	r2, r3, [r1]
 80012a4:	e002      	b.n	80012ac <canardDecodeScalar+0x304>
        else
        {
            CANARD_ASSERT(false);
            return -CANARD_ERROR_INTERNAL;
 80012a6:	f06f 0308 	mvn.w	r3, #8
 80012aa:	e001      	b.n	80012b0 <canardDecodeScalar+0x308>
        }
    }

    CANARD_ASSERT(result <= bit_length);
    CANARD_ASSERT(result > 0);
    return result;
 80012ac:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3734      	adds	r7, #52	@ 0x34
 80012b4:	46bd      	mov	sp, r7
 80012b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080012ba <canardEncodeScalar>:

void canardEncodeScalar(void* destination,
                        uint32_t bit_offset,
                        uint8_t bit_length,
                        const void* value)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b08a      	sub	sp, #40	@ 0x28
 80012be:	af02      	add	r7, sp, #8
 80012c0:	60f8      	str	r0, [r7, #12]
 80012c2:	60b9      	str	r1, [r7, #8]
 80012c4:	603b      	str	r3, [r7, #0]
 80012c6:	4613      	mov	r3, r2
 80012c8:	71fb      	strb	r3, [r7, #7]
     * Maybe not the best solution, but it simplifies the API.
     */
    CANARD_ASSERT(destination != NULL);
    CANARD_ASSERT(value != NULL);

    if (bit_length > 64)
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	2b40      	cmp	r3, #64	@ 0x40
 80012ce:	d901      	bls.n	80012d4 <canardEncodeScalar+0x1a>
    {
        CANARD_ASSERT(false);
        bit_length = 64;
 80012d0:	2340      	movs	r3, #64	@ 0x40
 80012d2:	71fb      	strb	r3, [r7, #7]
    }

    if (bit_length < 1)
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d101      	bne.n	80012de <canardEncodeScalar+0x24>
    {
        CANARD_ASSERT(false);
        bit_length = 1;
 80012da:	2301      	movs	r3, #1
 80012dc:	71fb      	strb	r3, [r7, #7]
        uint32_t u32;
        uint64_t u64;
        uint8_t bytes[8];
    } storage;

    memset(&storage, 0, sizeof(storage));
 80012de:	f107 0310 	add.w	r3, r7, #16
 80012e2:	2208      	movs	r2, #8
 80012e4:	2100      	movs	r1, #0
 80012e6:	4618      	mov	r0, r3
 80012e8:	f004 fb34 	bl	8005954 <memset>

    uint8_t std_byte_length = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	77fb      	strb	r3, [r7, #31]

    // Extra most significant bits can be safely ignored here.
    if      (bit_length == 1)   { std_byte_length = sizeof(bool);   storage.boolean = (*((bool*) value) != 0); }
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d105      	bne.n	8001302 <canardEncodeScalar+0x48>
 80012f6:	2301      	movs	r3, #1
 80012f8:	77fb      	strb	r3, [r7, #31]
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	743b      	strb	r3, [r7, #16]
 8001300:	e024      	b.n	800134c <canardEncodeScalar+0x92>
    else if (bit_length <= 8)   { std_byte_length = 1;              storage.u8  = *((uint8_t*) value);  }
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	2b08      	cmp	r3, #8
 8001306:	d805      	bhi.n	8001314 <canardEncodeScalar+0x5a>
 8001308:	2301      	movs	r3, #1
 800130a:	77fb      	strb	r3, [r7, #31]
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	743b      	strb	r3, [r7, #16]
 8001312:	e01b      	b.n	800134c <canardEncodeScalar+0x92>
    else if (bit_length <= 16)  { std_byte_length = 2;              storage.u16 = *((uint16_t*) value); }
 8001314:	79fb      	ldrb	r3, [r7, #7]
 8001316:	2b10      	cmp	r3, #16
 8001318:	d805      	bhi.n	8001326 <canardEncodeScalar+0x6c>
 800131a:	2302      	movs	r3, #2
 800131c:	77fb      	strb	r3, [r7, #31]
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	881b      	ldrh	r3, [r3, #0]
 8001322:	823b      	strh	r3, [r7, #16]
 8001324:	e012      	b.n	800134c <canardEncodeScalar+0x92>
    else if (bit_length <= 32)  { std_byte_length = 4;              storage.u32 = *((uint32_t*) value); }
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	2b20      	cmp	r3, #32
 800132a:	d805      	bhi.n	8001338 <canardEncodeScalar+0x7e>
 800132c:	2304      	movs	r3, #4
 800132e:	77fb      	strb	r3, [r7, #31]
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	e009      	b.n	800134c <canardEncodeScalar+0x92>
    else if (bit_length <= 64)  { std_byte_length = 8;              storage.u64 = *((uint64_t*) value); }
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	2b40      	cmp	r3, #64	@ 0x40
 800133c:	d806      	bhi.n	800134c <canardEncodeScalar+0x92>
 800133e:	2308      	movs	r3, #8
 8001340:	77fb      	strb	r3, [r7, #31]
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001348:	e9c7 2304 	strd	r2, r3, [r7, #16]
            storage.bytes[i] = (temp >> (8*i)) & 0xFFU;
        }
    }
#endif

    if (isBigEndian())
 800134c:	f000 fe65 	bl	800201a <isBigEndian>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d006      	beq.n	8001364 <canardEncodeScalar+0xaa>
    {
        swapByteOrder(&storage.bytes[0], std_byte_length);
 8001356:	7ffa      	ldrb	r2, [r7, #31]
 8001358:	f107 0310 	add.w	r3, r7, #16
 800135c:	4611      	mov	r1, r2
 800135e:	4618      	mov	r0, r3
 8001360:	f000 fe6c 	bl	800203c <swapByteOrder>
     * Extra least significant bits will be filled with zeroes, which is fine.
     * Extra most significant bits will be discarded here.
     * Coverity Scan mistakenly believes that the array may be overrun if bit_length == 64; however, this branch will
     * not be taken if bit_length == 64, because 64 % 8 == 0.
     */
    if ((bit_length % 8) != 0)
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b00      	cmp	r3, #0
 800136e:	d014      	beq.n	800139a <canardEncodeScalar+0xe0>
    {
        // coverity[overrun-local]
        storage.bytes[bit_length / 8U] = (uint8_t)(storage.bytes[bit_length / 8U] << ((8U - (bit_length % 8U)) & 7U));
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	08db      	lsrs	r3, r3, #3
 8001374:	b2db      	uxtb	r3, r3
 8001376:	3320      	adds	r3, #32
 8001378:	443b      	add	r3, r7
 800137a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800137e:	461a      	mov	r2, r3
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	425b      	negs	r3, r3
 8001384:	f003 0307 	and.w	r3, r3, #7
 8001388:	409a      	lsls	r2, r3
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	08db      	lsrs	r3, r3, #3
 800138e:	b2db      	uxtb	r3, r3
 8001390:	b2d2      	uxtb	r2, r2
 8001392:	3320      	adds	r3, #32
 8001394:	443b      	add	r3, r7
 8001396:	f803 2c10 	strb.w	r2, [r3, #-16]
    }

    /*
     * Now, the storage contains properly serialized scalar. Copying it out.
     */
    copyBitArray(&storage.bytes[0], 0, bit_length, (uint8_t*) destination, bit_offset);
 800139a:	79fa      	ldrb	r2, [r7, #7]
 800139c:	f107 0010 	add.w	r0, r7, #16
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2100      	movs	r1, #0
 80013a8:	f000 fccb 	bl	8001d42 <copyBitArray>
}
 80013ac:	bf00      	nop
 80013ae:	3720      	adds	r7, #32
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <canardReleaseRxTransferPayload>:

void canardReleaseRxTransferPayload(CanardInstance* ins, CanardRxTransfer* transfer)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
    while (transfer->payload_middle != NULL)
 80013be:	e00f      	b.n	80013e0 <canardReleaseRxTransferPayload+0x2c>
    {
        CanardBufferBlock* const temp = transfer->payload_middle->next;
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	60fb      	str	r3, [r7, #12]
        freeBlock(&ins->allocator, transfer->payload_middle);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f103 020c 	add.w	r2, r3, #12
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	4619      	mov	r1, r3
 80013d4:	4610      	mov	r0, r2
 80013d6:	f000 ff3c 	bl	8002252 <freeBlock>
        transfer->payload_middle = temp;
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	68fa      	ldr	r2, [r7, #12]
 80013de:	60da      	str	r2, [r3, #12]
    while (transfer->payload_middle != NULL)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1eb      	bne.n	80013c0 <canardReleaseRxTransferPayload+0xc>
    }

    transfer->payload_middle = NULL;
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	2200      	movs	r2, #0
 80013ec:	60da      	str	r2, [r3, #12]
    transfer->payload_head = NULL;
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
    transfer->payload_tail = NULL;
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	2200      	movs	r2, #0
 80013f8:	611a      	str	r2, [r3, #16]
    transfer->payload_len = 0;
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	2200      	movs	r2, #0
 80013fe:	829a      	strh	r2, [r3, #20]
}
 8001400:	bf00      	nop
 8001402:	3710      	adds	r7, #16
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <computeTransferIDForwardDistance>:

/*
 * Internal (static functions)
 */
CANARD_INTERNAL int16_t computeTransferIDForwardDistance(uint8_t a, uint8_t b)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	460a      	mov	r2, r1
 8001412:	71fb      	strb	r3, [r7, #7]
 8001414:	4613      	mov	r3, r2
 8001416:	71bb      	strb	r3, [r7, #6]
    int16_t d = (int16_t)(a - b);
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	b29a      	uxth	r2, r3
 800141c:	79bb      	ldrb	r3, [r7, #6]
 800141e:	b29b      	uxth	r3, r3
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	b29b      	uxth	r3, r3
 8001424:	81fb      	strh	r3, [r7, #14]
    if (d < 0)
 8001426:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800142a:	2b00      	cmp	r3, #0
 800142c:	da03      	bge.n	8001436 <computeTransferIDForwardDistance+0x2e>
    {
        d = (int16_t)(d + (int16_t)(1U << TRANSFER_ID_BIT_LEN));
 800142e:	89fb      	ldrh	r3, [r7, #14]
 8001430:	3320      	adds	r3, #32
 8001432:	b29b      	uxth	r3, r3
 8001434:	81fb      	strh	r3, [r7, #14]
    }
    return d;
 8001436:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800143a:	4618      	mov	r0, r3
 800143c:	3714      	adds	r7, #20
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <incrementTransferID>:

CANARD_INTERNAL void incrementTransferID(uint8_t* transfer_id)
{
 8001446:	b480      	push	{r7}
 8001448:	b083      	sub	sp, #12
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
    CANARD_ASSERT(transfer_id != NULL);

    (*transfer_id)++;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	3301      	adds	r3, #1
 8001454:	b2da      	uxtb	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	701a      	strb	r2, [r3, #0]
    if (*transfer_id >= 32)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b1f      	cmp	r3, #31
 8001460:	d902      	bls.n	8001468 <incrementTransferID+0x22>
    {
        *transfer_id = 0;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	701a      	strb	r2, [r3, #0]
    }
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <dlcToDataLength>:

CANARD_INTERNAL uint16_t dlcToDataLength(uint16_t dlc) {
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	80fb      	strh	r3, [r7, #6]
    /*
    Data Length Code      9  10  11  12  13  14  15
    Number of data bytes 12  16  20  24  32  48  64
    */
    if (dlc <= 8) {
 800147e:	88fb      	ldrh	r3, [r7, #6]
 8001480:	2b08      	cmp	r3, #8
 8001482:	d801      	bhi.n	8001488 <dlcToDataLength+0x14>
        return dlc;
 8001484:	88fb      	ldrh	r3, [r7, #6]
 8001486:	e01e      	b.n	80014c6 <dlcToDataLength+0x52>
    } else if (dlc == 9) {
 8001488:	88fb      	ldrh	r3, [r7, #6]
 800148a:	2b09      	cmp	r3, #9
 800148c:	d101      	bne.n	8001492 <dlcToDataLength+0x1e>
        return 12;
 800148e:	230c      	movs	r3, #12
 8001490:	e019      	b.n	80014c6 <dlcToDataLength+0x52>
    } else if (dlc == 10) {
 8001492:	88fb      	ldrh	r3, [r7, #6]
 8001494:	2b0a      	cmp	r3, #10
 8001496:	d101      	bne.n	800149c <dlcToDataLength+0x28>
        return 16;
 8001498:	2310      	movs	r3, #16
 800149a:	e014      	b.n	80014c6 <dlcToDataLength+0x52>
    } else if (dlc == 11) {
 800149c:	88fb      	ldrh	r3, [r7, #6]
 800149e:	2b0b      	cmp	r3, #11
 80014a0:	d101      	bne.n	80014a6 <dlcToDataLength+0x32>
        return 20;
 80014a2:	2314      	movs	r3, #20
 80014a4:	e00f      	b.n	80014c6 <dlcToDataLength+0x52>
    } else if (dlc == 12) {
 80014a6:	88fb      	ldrh	r3, [r7, #6]
 80014a8:	2b0c      	cmp	r3, #12
 80014aa:	d101      	bne.n	80014b0 <dlcToDataLength+0x3c>
        return 24;
 80014ac:	2318      	movs	r3, #24
 80014ae:	e00a      	b.n	80014c6 <dlcToDataLength+0x52>
    } else if (dlc == 13) {
 80014b0:	88fb      	ldrh	r3, [r7, #6]
 80014b2:	2b0d      	cmp	r3, #13
 80014b4:	d101      	bne.n	80014ba <dlcToDataLength+0x46>
        return 32;
 80014b6:	2320      	movs	r3, #32
 80014b8:	e005      	b.n	80014c6 <dlcToDataLength+0x52>
    } else if (dlc == 14) {
 80014ba:	88fb      	ldrh	r3, [r7, #6]
 80014bc:	2b0e      	cmp	r3, #14
 80014be:	d101      	bne.n	80014c4 <dlcToDataLength+0x50>
        return 48;
 80014c0:	2330      	movs	r3, #48	@ 0x30
 80014c2:	e000      	b.n	80014c6 <dlcToDataLength+0x52>
    }
    return 64;
 80014c4:	2340      	movs	r3, #64	@ 0x40
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <dataLengthToDlc>:

CANARD_INTERNAL uint16_t dataLengthToDlc(uint16_t data_length) {
 80014d2:	b480      	push	{r7}
 80014d4:	b083      	sub	sp, #12
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	4603      	mov	r3, r0
 80014da:	80fb      	strh	r3, [r7, #6]
    if (data_length <= 8) {
 80014dc:	88fb      	ldrh	r3, [r7, #6]
 80014de:	2b08      	cmp	r3, #8
 80014e0:	d801      	bhi.n	80014e6 <dataLengthToDlc+0x14>
        return data_length;
 80014e2:	88fb      	ldrh	r3, [r7, #6]
 80014e4:	e01e      	b.n	8001524 <dataLengthToDlc+0x52>
    } else if (data_length <= 12) {
 80014e6:	88fb      	ldrh	r3, [r7, #6]
 80014e8:	2b0c      	cmp	r3, #12
 80014ea:	d801      	bhi.n	80014f0 <dataLengthToDlc+0x1e>
        return 9;
 80014ec:	2309      	movs	r3, #9
 80014ee:	e019      	b.n	8001524 <dataLengthToDlc+0x52>
    } else if (data_length <= 16) {
 80014f0:	88fb      	ldrh	r3, [r7, #6]
 80014f2:	2b10      	cmp	r3, #16
 80014f4:	d801      	bhi.n	80014fa <dataLengthToDlc+0x28>
        return 10;
 80014f6:	230a      	movs	r3, #10
 80014f8:	e014      	b.n	8001524 <dataLengthToDlc+0x52>
    } else if (data_length <= 20) {
 80014fa:	88fb      	ldrh	r3, [r7, #6]
 80014fc:	2b14      	cmp	r3, #20
 80014fe:	d801      	bhi.n	8001504 <dataLengthToDlc+0x32>
        return 11;
 8001500:	230b      	movs	r3, #11
 8001502:	e00f      	b.n	8001524 <dataLengthToDlc+0x52>
    } else if (data_length <= 24) {
 8001504:	88fb      	ldrh	r3, [r7, #6]
 8001506:	2b18      	cmp	r3, #24
 8001508:	d801      	bhi.n	800150e <dataLengthToDlc+0x3c>
        return 12;
 800150a:	230c      	movs	r3, #12
 800150c:	e00a      	b.n	8001524 <dataLengthToDlc+0x52>
    } else if (data_length <= 32) {
 800150e:	88fb      	ldrh	r3, [r7, #6]
 8001510:	2b20      	cmp	r3, #32
 8001512:	d801      	bhi.n	8001518 <dataLengthToDlc+0x46>
        return 13;
 8001514:	230d      	movs	r3, #13
 8001516:	e005      	b.n	8001524 <dataLengthToDlc+0x52>
    } else if (data_length <= 48) {
 8001518:	88fb      	ldrh	r3, [r7, #6]
 800151a:	2b30      	cmp	r3, #48	@ 0x30
 800151c:	d801      	bhi.n	8001522 <dataLengthToDlc+0x50>
        return 14;
 800151e:	230e      	movs	r3, #14
 8001520:	e000      	b.n	8001524 <dataLengthToDlc+0x52>
    }
    return 15;
 8001522:	230f      	movs	r3, #15
}
 8001524:	4618      	mov	r0, r3
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <enqueueTxFrames>:
CANARD_INTERNAL int16_t enqueueTxFrames(CanardInstance* ins,
                                        uint32_t can_id,
                                        uint16_t crc,
                                        CanardTxTransfer* transfer
)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08a      	sub	sp, #40	@ 0x28
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	4613      	mov	r3, r2
 800153e:	80fb      	strh	r3, [r7, #6]
    CANARD_ASSERT(ins != NULL);
    CANARD_ASSERT((can_id & CANARD_CAN_EXT_ID_MASK) == can_id);            // Flags must be cleared

    if (transfer->inout_transfer_id == NULL)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	695b      	ldr	r3, [r3, #20]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d102      	bne.n	800154e <enqueueTxFrames+0x1e>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8001548:	f06f 0301 	mvn.w	r3, #1
 800154c:	e0f9      	b.n	8001742 <enqueueTxFrames+0x212>
    }

    if ((transfer->payload_len > 0) && (transfer->payload == NULL))
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	8c1b      	ldrh	r3, [r3, #32]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d006      	beq.n	8001564 <enqueueTxFrames+0x34>
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	69db      	ldr	r3, [r3, #28]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d102      	bne.n	8001564 <enqueueTxFrames+0x34>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 800155e:	f06f 0301 	mvn.w	r3, #1
 8001562:	e0ee      	b.n	8001742 <enqueueTxFrames+0x212>
    }

    int16_t result = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	84fb      	strh	r3, [r7, #38]	@ 0x26
#if CANARD_ENABLE_CANFD
    uint8_t frame_max_data_len = transfer->canfd ? CANARD_CANFD_FRAME_MAX_DATA_LEN:CANARD_CAN_FRAME_MAX_DATA_LEN;
#else
    uint8_t frame_max_data_len = CANARD_CAN_FRAME_MAX_DATA_LEN;
 8001568:	2308      	movs	r3, #8
 800156a:	77fb      	strb	r3, [r7, #31]
#endif
    if (transfer->payload_len < frame_max_data_len)                        // Single frame transfer
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	8c1a      	ldrh	r2, [r3, #32]
 8001570:	7ffb      	ldrb	r3, [r7, #31]
 8001572:	b29b      	uxth	r3, r3
 8001574:	429a      	cmp	r2, r3
 8001576:	d24b      	bcs.n	8001610 <enqueueTxFrames+0xe0>
    {
        CanardTxQueueItem* queue_item = createTxItem(&ins->allocator);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	330c      	adds	r3, #12
 800157c:	4618      	mov	r0, r3
 800157e:	f000 f929 	bl	80017d4 <createTxItem>
 8001582:	6178      	str	r0, [r7, #20]
        if (queue_item == NULL)
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d102      	bne.n	8001590 <enqueueTxFrames+0x60>
        {
            return -CANARD_ERROR_OUT_OF_MEMORY;
 800158a:	f06f 0302 	mvn.w	r3, #2
 800158e:	e0d8      	b.n	8001742 <enqueueTxFrames+0x212>
        }

        memcpy(queue_item->frame.data, transfer->payload, transfer->payload_len);
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	f103 0008 	add.w	r0, r3, #8
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	69d9      	ldr	r1, [r3, #28]
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	8c1b      	ldrh	r3, [r3, #32]
 800159e:	461a      	mov	r2, r3
 80015a0:	f004 fa73 	bl	8005a8a <memcpy>

        transfer->payload_len = dlcToDataLength(dataLengthToDlc(transfer->payload_len+1))-1;
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	8c1b      	ldrh	r3, [r3, #32]
 80015a8:	3301      	adds	r3, #1
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ff90 	bl	80014d2 <dataLengthToDlc>
 80015b2:	4603      	mov	r3, r0
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff ff5d 	bl	8001474 <dlcToDataLength>
 80015ba:	4603      	mov	r3, r0
 80015bc:	3b01      	subs	r3, #1
 80015be:	b29a      	uxth	r2, r3
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	841a      	strh	r2, [r3, #32]
        queue_item->frame.data_len = (uint8_t)(transfer->payload_len + 1);
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	8c1b      	ldrh	r3, [r3, #32]
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	3301      	adds	r3, #1
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	741a      	strb	r2, [r3, #16]
        queue_item->frame.data[transfer->payload_len] = (uint8_t)(0xC0U | (*transfer->inout_transfer_id & 31U));
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	f003 031f 	and.w	r3, r3, #31
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	8c12      	ldrh	r2, [r2, #32]
 80015e2:	4611      	mov	r1, r2
 80015e4:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	440b      	add	r3, r1
 80015ee:	721a      	strb	r2, [r3, #8]
        queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	605a      	str	r2, [r3, #4]
        queue_item->frame.iface_mask = transfer->iface_mask;
#endif
#if CANARD_ENABLE_CANFD
        queue_item->frame.canfd = transfer->canfd;
#endif
        pushTxQueue(ins, queue_item);
 80015fa:	6979      	ldr	r1, [r7, #20]
 80015fc:	68f8      	ldr	r0, [r7, #12]
 80015fe:	f000 f8a4 	bl	800174a <pushTxQueue>
        result++;
 8001602:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001606:	b29b      	uxth	r3, r3
 8001608:	3301      	adds	r3, #1
 800160a:	b29b      	uxth	r3, r3
 800160c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800160e:	e096      	b.n	800173e <enqueueTxFrames+0x20e>
    }
    else                                                                    // Multi frame transfer
    {
        uint16_t data_index = 0;
 8001610:	2300      	movs	r3, #0
 8001612:	84bb      	strh	r3, [r7, #36]	@ 0x24
        uint8_t toggle = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        uint8_t sot_eot = 0x80;
 800161a:	2380      	movs	r3, #128	@ 0x80
 800161c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

        CanardTxQueueItem* queue_item = NULL;
 8001620:	2300      	movs	r3, #0
 8001622:	61bb      	str	r3, [r7, #24]

        while (transfer->payload_len - data_index != 0)
 8001624:	e085      	b.n	8001732 <enqueueTxFrames+0x202>
        {
            queue_item = createTxItem(&ins->allocator);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	330c      	adds	r3, #12
 800162a:	4618      	mov	r0, r3
 800162c:	f000 f8d2 	bl	80017d4 <createTxItem>
 8001630:	61b8      	str	r0, [r7, #24]
            if (queue_item == NULL)
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d102      	bne.n	800163e <enqueueTxFrames+0x10e>
            {
                CANARD_ASSERT(false);
                return -CANARD_ERROR_OUT_OF_MEMORY;          // TODO: Purge all frames enqueued so far
 8001638:	f06f 0302 	mvn.w	r3, #2
 800163c:	e081      	b.n	8001742 <enqueueTxFrames+0x212>
            }

            uint16_t i = 0;
 800163e:	2300      	movs	r3, #0
 8001640:	843b      	strh	r3, [r7, #32]
            if (data_index == 0)
 8001642:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001644:	2b00      	cmp	r3, #0
 8001646:	d10c      	bne.n	8001662 <enqueueTxFrames+0x132>
            {
                // add crc
                queue_item->frame.data[0] = (uint8_t) (crc);
 8001648:	88fb      	ldrh	r3, [r7, #6]
 800164a:	b2da      	uxtb	r2, r3
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	721a      	strb	r2, [r3, #8]
                queue_item->frame.data[1] = (uint8_t) (crc >> 8U);
 8001650:	88fb      	ldrh	r3, [r7, #6]
 8001652:	0a1b      	lsrs	r3, r3, #8
 8001654:	b29b      	uxth	r3, r3
 8001656:	b2da      	uxtb	r2, r3
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	725a      	strb	r2, [r3, #9]
                i = 2;
 800165c:	2302      	movs	r3, #2
 800165e:	843b      	strh	r3, [r7, #32]
 8001660:	e012      	b.n	8001688 <enqueueTxFrames+0x158>
            }
            else
            {
                i = 0;
 8001662:	2300      	movs	r3, #0
 8001664:	843b      	strh	r3, [r7, #32]
            }

            for (; i < (frame_max_data_len - 1) && data_index < transfer->payload_len; i++, data_index++)
 8001666:	e00f      	b.n	8001688 <enqueueTxFrames+0x158>
            {
                queue_item->frame.data[i] = transfer->payload[data_index];
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	69da      	ldr	r2, [r3, #28]
 800166c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800166e:	441a      	add	r2, r3
 8001670:	8c3b      	ldrh	r3, [r7, #32]
 8001672:	7811      	ldrb	r1, [r2, #0]
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4413      	add	r3, r2
 8001678:	460a      	mov	r2, r1
 800167a:	721a      	strb	r2, [r3, #8]
            for (; i < (frame_max_data_len - 1) && data_index < transfer->payload_len; i++, data_index++)
 800167c:	8c3b      	ldrh	r3, [r7, #32]
 800167e:	3301      	adds	r3, #1
 8001680:	843b      	strh	r3, [r7, #32]
 8001682:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001684:	3301      	adds	r3, #1
 8001686:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001688:	8c3a      	ldrh	r2, [r7, #32]
 800168a:	7ffb      	ldrb	r3, [r7, #31]
 800168c:	3b01      	subs	r3, #1
 800168e:	429a      	cmp	r2, r3
 8001690:	da04      	bge.n	800169c <enqueueTxFrames+0x16c>
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	8c1b      	ldrh	r3, [r3, #32]
 8001696:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001698:	429a      	cmp	r2, r3
 800169a:	d3e5      	bcc.n	8001668 <enqueueTxFrames+0x138>
            }
            // tail byte
            sot_eot = (data_index == transfer->payload_len) ? (uint8_t)0x40 : sot_eot;
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	8c1b      	ldrh	r3, [r3, #32]
 80016a0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d002      	beq.n	80016ac <enqueueTxFrames+0x17c>
 80016a6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80016aa:	e000      	b.n	80016ae <enqueueTxFrames+0x17e>
 80016ac:	2340      	movs	r3, #64	@ 0x40
 80016ae:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            
            i = dlcToDataLength(dataLengthToDlc(i+1))-1;
 80016b2:	8c3b      	ldrh	r3, [r7, #32]
 80016b4:	3301      	adds	r3, #1
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ff0a 	bl	80014d2 <dataLengthToDlc>
 80016be:	4603      	mov	r3, r0
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff fed7 	bl	8001474 <dlcToDataLength>
 80016c6:	4603      	mov	r3, r0
 80016c8:	3b01      	subs	r3, #1
 80016ca:	843b      	strh	r3, [r7, #32]
            queue_item->frame.data[i] = (uint8_t)(sot_eot | ((uint32_t)toggle << 5U) | ((uint32_t)*transfer->inout_transfer_id & 31U));
 80016cc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80016d0:	015b      	lsls	r3, r3, #5
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80016d8:	4313      	orrs	r3, r2
 80016da:	b2d9      	uxtb	r1, r3
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	695b      	ldr	r3, [r3, #20]
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	f003 031f 	and.w	r3, r3, #31
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	8c3b      	ldrh	r3, [r7, #32]
 80016ea:	430a      	orrs	r2, r1
 80016ec:	b2d1      	uxtb	r1, r2
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4413      	add	r3, r2
 80016f2:	460a      	mov	r2, r1
 80016f4:	721a      	strb	r2, [r3, #8]
            queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	605a      	str	r2, [r3, #4]
            queue_item->frame.data_len = (uint8_t)(i + 1);
 8001700:	8c3b      	ldrh	r3, [r7, #32]
 8001702:	b2db      	uxtb	r3, r3
 8001704:	3301      	adds	r3, #1
 8001706:	b2da      	uxtb	r2, r3
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	741a      	strb	r2, [r3, #16]
            queue_item->frame.iface_mask = transfer->iface_mask;
#endif
#if CANARD_ENABLE_CANFD
            queue_item->frame.canfd = transfer->canfd;
#endif
            pushTxQueue(ins, queue_item);
 800170c:	69b9      	ldr	r1, [r7, #24]
 800170e:	68f8      	ldr	r0, [r7, #12]
 8001710:	f000 f81b 	bl	800174a <pushTxQueue>

            result++;
 8001714:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001718:	b29b      	uxth	r3, r3
 800171a:	3301      	adds	r3, #1
 800171c:	b29b      	uxth	r3, r3
 800171e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            toggle ^= 1;
 8001720:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001724:	f083 0301 	eor.w	r3, r3, #1
 8001728:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            sot_eot = 0;
 800172c:	2300      	movs	r3, #0
 800172e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        while (transfer->payload_len - data_index != 0)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	8c1b      	ldrh	r3, [r3, #32]
 8001736:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001738:	429a      	cmp	r2, r3
 800173a:	f47f af74 	bne.w	8001626 <enqueueTxFrames+0xf6>
        }
    }

    return result;
 800173e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
}
 8001742:	4618      	mov	r0, r3
 8001744:	3728      	adds	r7, #40	@ 0x28
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <pushTxQueue>:

/**
 * Puts frame on on the TX queue. Higher priority placed first
 */
CANARD_INTERNAL void pushTxQueue(CanardInstance* ins, CanardTxQueueItem* item)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b084      	sub	sp, #16
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
 8001752:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(ins != NULL);
    CANARD_ASSERT(item->frame.data_len > 0);       // UAVCAN doesn't allow zero-payload frames

    if (ins->tx_queue == NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001758:	2b00      	cmp	r3, #0
 800175a:	d103      	bne.n	8001764 <pushTxQueue+0x1a>
    {
        ins->tx_queue = item;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	625a      	str	r2, [r3, #36]	@ 0x24
        return;
 8001762:	e034      	b.n	80017ce <pushTxQueue+0x84>
    }

    CanardTxQueueItem* queue = ins->tx_queue;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001768:	60fb      	str	r3, [r7, #12]
    CanardTxQueueItem* previous = ins->tx_queue;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800176e:	60bb      	str	r3, [r7, #8]

    while (queue != NULL)
 8001770:	e02a      	b.n	80017c8 <pushTxQueue+0x7e>
    {
        if (isPriorityHigher(queue->frame.id, item->frame.id)) // lower number wins
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	685a      	ldr	r2, [r3, #4]
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	4619      	mov	r1, r3
 800177c:	4610      	mov	r0, r2
 800177e:	f000 f840 	bl	8001802 <isPriorityHigher>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d012      	beq.n	80017ae <pushTxQueue+0x64>
        {
            if (queue == ins->tx_queue)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800178c:	68fa      	ldr	r2, [r7, #12]
 800178e:	429a      	cmp	r2, r3
 8001790:	d106      	bne.n	80017a0 <pushTxQueue+0x56>
            {
                item->next = queue;
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	68fa      	ldr	r2, [r7, #12]
 8001796:	601a      	str	r2, [r3, #0]
                ins->tx_queue = item;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	625a      	str	r2, [r3, #36]	@ 0x24
            else
            {
                previous->next = item;
                item->next = queue;
            }
            return;
 800179e:	e016      	b.n	80017ce <pushTxQueue+0x84>
                previous->next = item;
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	683a      	ldr	r2, [r7, #0]
 80017a4:	601a      	str	r2, [r3, #0]
                item->next = queue;
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	68fa      	ldr	r2, [r7, #12]
 80017aa:	601a      	str	r2, [r3, #0]
            return;
 80017ac:	e00f      	b.n	80017ce <pushTxQueue+0x84>
        }
        else
        {
            if (queue->next == NULL)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d103      	bne.n	80017be <pushTxQueue+0x74>
            {
                queue->next = item;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	601a      	str	r2, [r3, #0]
                return;
 80017bc:	e007      	b.n	80017ce <pushTxQueue+0x84>
            }
            else
            {
                previous = queue;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	60bb      	str	r3, [r7, #8]
                queue = queue->next;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	60fb      	str	r3, [r7, #12]
    while (queue != NULL)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1d1      	bne.n	8001772 <pushTxQueue+0x28>
            }
        }
    }
}
 80017ce:	3710      	adds	r7, #16
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <createTxItem>:

/**
 * Creates new tx queue item from allocator
 */
CANARD_INTERNAL CanardTxQueueItem* createTxItem(CanardPoolAllocator* allocator)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
    CanardTxQueueItem* item = (CanardTxQueueItem*) allocateBlock(allocator);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f000 fd0f 	bl	8002200 <allocateBlock>
 80017e2:	60f8      	str	r0, [r7, #12]
    if (item == NULL)
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <createTxItem+0x1a>
    {
        return NULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	e005      	b.n	80017fa <createTxItem+0x26>
    }
    memset(item, 0, sizeof(*item));
 80017ee:	2214      	movs	r2, #20
 80017f0:	2100      	movs	r1, #0
 80017f2:	68f8      	ldr	r0, [r7, #12]
 80017f4:	f004 f8ae 	bl	8005954 <memset>
    return item;
 80017f8:	68fb      	ldr	r3, [r7, #12]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <isPriorityHigher>:

/**
 * Returns true if priority of rhs is higher than id
 */
CANARD_INTERNAL bool isPriorityHigher(uint32_t rhs, uint32_t id)
{
 8001802:	b480      	push	{r7}
 8001804:	b089      	sub	sp, #36	@ 0x24
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
 800180a:	6039      	str	r1, [r7, #0]
    const uint32_t clean_id = id & CANARD_CAN_EXT_ID_MASK;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8001812:	61fb      	str	r3, [r7, #28]
    const uint32_t rhs_clean_id = rhs & CANARD_CAN_EXT_ID_MASK;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 800181a:	61bb      	str	r3, [r7, #24]

    /*
     * STD vs EXT - if 11 most significant bits are the same, EXT loses.
     */
    const bool ext = (id & CANARD_CAN_FRAME_EFF) != 0;
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	0fdb      	lsrs	r3, r3, #31
 8001820:	75fb      	strb	r3, [r7, #23]
    const bool rhs_ext = (rhs & CANARD_CAN_FRAME_EFF) != 0;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	0fdb      	lsrs	r3, r3, #31
 8001826:	75bb      	strb	r3, [r7, #22]
    if (ext != rhs_ext)
 8001828:	7dfa      	ldrb	r2, [r7, #23]
 800182a:	7dbb      	ldrb	r3, [r7, #22]
 800182c:	429a      	cmp	r2, r3
 800182e:	d01d      	beq.n	800186c <isPriorityHigher+0x6a>
    {
        uint32_t arb11 = ext ? (clean_id >> 18U) : clean_id;
 8001830:	7dfb      	ldrb	r3, [r7, #23]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d002      	beq.n	800183c <isPriorityHigher+0x3a>
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	0c9b      	lsrs	r3, r3, #18
 800183a:	e000      	b.n	800183e <isPriorityHigher+0x3c>
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	613b      	str	r3, [r7, #16]
        uint32_t rhs_arb11 = rhs_ext ? (rhs_clean_id >> 18U) : rhs_clean_id;
 8001840:	7dbb      	ldrb	r3, [r7, #22]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d002      	beq.n	800184c <isPriorityHigher+0x4a>
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	0c9b      	lsrs	r3, r3, #18
 800184a:	e000      	b.n	800184e <isPriorityHigher+0x4c>
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	60fb      	str	r3, [r7, #12]
        if (arb11 != rhs_arb11)
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	429a      	cmp	r2, r3
 8001856:	d007      	beq.n	8001868 <isPriorityHigher+0x66>
        {
            return arb11 < rhs_arb11;
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	429a      	cmp	r2, r3
 800185e:	bf34      	ite	cc
 8001860:	2301      	movcc	r3, #1
 8001862:	2300      	movcs	r3, #0
 8001864:	b2db      	uxtb	r3, r3
 8001866:	e022      	b.n	80018ae <isPriorityHigher+0xac>
        }
        else
        {
            return rhs_ext;
 8001868:	7dbb      	ldrb	r3, [r7, #22]
 800186a:	e020      	b.n	80018ae <isPriorityHigher+0xac>
    }

    /*
     * RTR vs Data frame - if frame identifiers and frame types are the same, RTR loses.
     */
    const bool rtr = (id & CANARD_CAN_FRAME_RTR) != 0;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001872:	2b00      	cmp	r3, #0
 8001874:	bf14      	ite	ne
 8001876:	2301      	movne	r3, #1
 8001878:	2300      	moveq	r3, #0
 800187a:	757b      	strb	r3, [r7, #21]
    const bool rhs_rtr = (rhs & CANARD_CAN_FRAME_RTR) != 0;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	bf14      	ite	ne
 8001886:	2301      	movne	r3, #1
 8001888:	2300      	moveq	r3, #0
 800188a:	753b      	strb	r3, [r7, #20]
    if (clean_id == rhs_clean_id && rtr != rhs_rtr)
 800188c:	69fa      	ldr	r2, [r7, #28]
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	429a      	cmp	r2, r3
 8001892:	d105      	bne.n	80018a0 <isPriorityHigher+0x9e>
 8001894:	7d7a      	ldrb	r2, [r7, #21]
 8001896:	7d3b      	ldrb	r3, [r7, #20]
 8001898:	429a      	cmp	r2, r3
 800189a:	d001      	beq.n	80018a0 <isPriorityHigher+0x9e>
    {
        return rhs_rtr;
 800189c:	7d3b      	ldrb	r3, [r7, #20]
 800189e:	e006      	b.n	80018ae <isPriorityHigher+0xac>
    }

    /*
     * Plain ID arbitration - greater value loses.
     */
    return clean_id < rhs_clean_id;
 80018a0:	69fa      	ldr	r2, [r7, #28]
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	bf34      	ite	cc
 80018a8:	2301      	movcc	r3, #1
 80018aa:	2300      	movcs	r3, #0
 80018ac:	b2db      	uxtb	r3, r3
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3724      	adds	r7, #36	@ 0x24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <prepareForNextTransfer>:

/**
 * preps the rx state for the next transfer. does not delete the state
 */
CANARD_INTERNAL void prepareForNextTransfer(CanardRxState* state)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
    CANARD_ASSERT(state->buffer_blocks == CANARD_BUFFER_IDX_NONE);
    state->transfer_id++;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	7ddb      	ldrb	r3, [r3, #23]
 80018c6:	f3c3 0384 	ubfx	r3, r3, #2, #5
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	3301      	adds	r3, #1
 80018ce:	f003 031f 	and.w	r3, r3, #31
 80018d2:	b2d9      	uxtb	r1, r3
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	7dd3      	ldrb	r3, [r2, #23]
 80018d8:	f361 0386 	bfi	r3, r1, #2, #5
 80018dc:	75d3      	strb	r3, [r2, #23]
    state->payload_len = 0;
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	8ad3      	ldrh	r3, [r2, #22]
 80018e2:	f36f 0309 	bfc	r3, #0, #10
 80018e6:	82d3      	strh	r3, [r2, #22]
    state->next_toggle = 0;
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	7dd3      	ldrb	r3, [r2, #23]
 80018ec:	f36f 13c7 	bfc	r3, #7, #1
 80018f0:	75d3      	strb	r3, [r2, #23]
}
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <extractDataType>:

/**
 * returns data type from id
 */
uint16_t extractDataType(uint32_t id)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b084      	sub	sp, #16
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
    if (extractTransferType(id) == CanardTransferTypeBroadcast)
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f000 f819 	bl	800193e <extractTransferType>
 800190c:	4603      	mov	r3, r0
 800190e:	2b02      	cmp	r3, #2
 8001910:	d10e      	bne.n	8001930 <extractDataType+0x32>
    {
        uint16_t dtid = MSG_TYPE_FROM_ID(id);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	0a1b      	lsrs	r3, r3, #8
 8001916:	81fb      	strh	r3, [r7, #14]
        if (SOURCE_ID_FROM_ID(id) == CANARD_BROADCAST_NODE_ID)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	b2db      	uxtb	r3, r3
 800191c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001920:	2b00      	cmp	r3, #0
 8001922:	d103      	bne.n	800192c <extractDataType+0x2e>
        {
            dtid &= (1U << ANON_MSG_DATA_TYPE_ID_BIT_LEN) - 1U;
 8001924:	89fb      	ldrh	r3, [r7, #14]
 8001926:	f003 0303 	and.w	r3, r3, #3
 800192a:	81fb      	strh	r3, [r7, #14]
        }
        return dtid;
 800192c:	89fb      	ldrh	r3, [r7, #14]
 800192e:	e002      	b.n	8001936 <extractDataType+0x38>
    }
    else
    {
        return (uint16_t) SRV_TYPE_FROM_ID(id);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	0c1b      	lsrs	r3, r3, #16
 8001934:	b2db      	uxtb	r3, r3
    }
}
 8001936:	4618      	mov	r0, r3
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <extractTransferType>:

/**
 * returns transfer type from id
 */
CanardTransferType extractTransferType(uint32_t id)
{
 800193e:	b480      	push	{r7}
 8001940:	b085      	sub	sp, #20
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
    const bool is_service = SERVICE_NOT_MSG_FROM_ID(id);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800194c:	2b00      	cmp	r3, #0
 800194e:	bf14      	ite	ne
 8001950:	2301      	movne	r3, #1
 8001952:	2300      	moveq	r3, #0
 8001954:	73fb      	strb	r3, [r7, #15]
    if (!is_service)
 8001956:	7bfb      	ldrb	r3, [r7, #15]
 8001958:	f083 0301 	eor.w	r3, r3, #1
 800195c:	b2db      	uxtb	r3, r3
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <extractTransferType+0x28>
    {
        return CanardTransferTypeBroadcast;
 8001962:	2302      	movs	r3, #2
 8001964:	e009      	b.n	800197a <extractTransferType+0x3c>
    }
    else if (REQUEST_NOT_RESPONSE_FROM_ID(id) == 1)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	0bdb      	lsrs	r3, r3, #15
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	b2db      	uxtb	r3, r3
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <extractTransferType+0x3a>
    {
        return CanardTransferTypeRequest;
 8001974:	2301      	movs	r3, #1
 8001976:	e000      	b.n	800197a <extractTransferType+0x3c>
    }
    else
    {
        return CanardTransferTypeResponse;
 8001978:	2300      	movs	r3, #0
    }
}
 800197a:	4618      	mov	r0, r3
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <traverseRxStates>:
/**
 * Traverses the list of CanardRxState's and returns a pointer to the CanardRxState
 * with either the Id or a new one at the end
 */
CANARD_INTERNAL CanardRxState* traverseRxStates(CanardInstance* ins, uint32_t transfer_descriptor)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b084      	sub	sp, #16
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
 800198e:	6039      	str	r1, [r7, #0]
    CanardRxState* states = ins->rx_states;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a1b      	ldr	r3, [r3, #32]
 8001994:	60fb      	str	r3, [r7, #12]

    if (states == NULL) // initialize CanardRxStates
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d110      	bne.n	80019be <traverseRxStates+0x38>
    {
        states = createRxState(&ins->allocator, transfer_descriptor);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	330c      	adds	r3, #12
 80019a0:	6839      	ldr	r1, [r7, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f000 f865 	bl	8001a72 <createRxState>
 80019a8:	60f8      	str	r0, [r7, #12]

        if(states == NULL)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d101      	bne.n	80019b4 <traverseRxStates+0x2e>
        {
            return NULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	e013      	b.n	80019dc <traverseRxStates+0x56>
        }

        ins->rx_states = states;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	621a      	str	r2, [r3, #32]
        return states;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	e00e      	b.n	80019dc <traverseRxStates+0x56>
    }

    states = findRxState(ins, transfer_descriptor);
 80019be:	6839      	ldr	r1, [r7, #0]
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f000 f80f 	bl	80019e4 <findRxState>
 80019c6:	60f8      	str	r0, [r7, #12]
    if (states != NULL)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <traverseRxStates+0x4c>
    {
        return states;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	e004      	b.n	80019dc <traverseRxStates+0x56>
    }
    else
    {
        return prependRxState(ins, transfer_descriptor);
 80019d2:	6839      	ldr	r1, [r7, #0]
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f000 f827 	bl	8001a28 <prependRxState>
 80019da:	4603      	mov	r3, r0
    }
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <findRxState>:

/**
 * returns pointer to the rx state of transfer descriptor or null if not found
 */
CANARD_INTERNAL CanardRxState* findRxState(CanardInstance *ins, uint32_t transfer_descriptor)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
    CanardRxState *state = ins->rx_states;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a1b      	ldr	r3, [r3, #32]
 80019f2:	60fb      	str	r3, [r7, #12]
    while (state != NULL)
 80019f4:	e010      	b.n	8001a18 <findRxState+0x34>
    {
        if (state->dtid_tt_snid_dnid == transfer_descriptor)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d101      	bne.n	8001a04 <findRxState+0x20>
        {
            return state;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	e00d      	b.n	8001a20 <findRxState+0x3c>
        }
        state = canardRxFromIdx(&ins->allocator, state->next);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f103 020c 	add.w	r2, r3, #12
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4610      	mov	r0, r2
 8001a12:	f7fe fdd3 	bl	80005bc <canardRxFromIdx>
 8001a16:	60f8      	str	r0, [r7, #12]
    while (state != NULL)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1eb      	bne.n	80019f6 <findRxState+0x12>
    }
    return NULL;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3710      	adds	r7, #16
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <prependRxState>:

/**
 * prepends rx state to the canard instance rx_states
 */
CANARD_INTERNAL CanardRxState* prependRxState(CanardInstance* ins, uint32_t transfer_descriptor)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
    CanardRxState* state = createRxState(&ins->allocator, transfer_descriptor);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	330c      	adds	r3, #12
 8001a36:	6839      	ldr	r1, [r7, #0]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f000 f81a 	bl	8001a72 <createRxState>
 8001a3e:	60f8      	str	r0, [r7, #12]

    if(state == NULL)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <prependRxState+0x22>
    {
        return NULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	e00f      	b.n	8001a6a <prependRxState+0x42>
    }

    state->next = canardRxToIdx(&ins->allocator, ins->rx_states);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f103 020c 	add.w	r2, r3, #12
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	4619      	mov	r1, r3
 8001a56:	4610      	mov	r0, r2
 8001a58:	f7fe fdbc 	bl	80005d4 <canardRxToIdx>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	601a      	str	r2, [r3, #0]
    ins->rx_states = state;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	68fa      	ldr	r2, [r7, #12]
 8001a66:	621a      	str	r2, [r3, #32]
    return state;
 8001a68:	68fb      	ldr	r3, [r7, #12]
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <createRxState>:

CANARD_INTERNAL CanardRxState* createRxState(CanardPoolAllocator* allocator, uint32_t transfer_descriptor)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b08c      	sub	sp, #48	@ 0x30
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
 8001a7a:	6039      	str	r1, [r7, #0]
    CanardRxState init = {
 8001a7c:	f107 0308 	add.w	r3, r7, #8
 8001a80:	2220      	movs	r2, #32
 8001a82:	2100      	movs	r1, #0
 8001a84:	4618      	mov	r0, r3
 8001a86:	f003 ff65 	bl	8005954 <memset>
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	61bb      	str	r3, [r7, #24]
        .next = CANARD_BUFFER_IDX_NONE,
        .buffer_blocks = CANARD_BUFFER_IDX_NONE,
        .dtid_tt_snid_dnid = transfer_descriptor
    };

    CanardRxState* state = (CanardRxState*) allocateBlock(allocator);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f000 fbb6 	bl	8002200 <allocateBlock>
 8001a94:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (state == NULL)
 8001a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <createRxState+0x2e>
    {
        return NULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	e007      	b.n	8001ab0 <createRxState+0x3e>
    }
    memcpy(state, &init, sizeof(*state));
 8001aa0:	f107 0308 	add.w	r3, r7, #8
 8001aa4:	2220      	movs	r2, #32
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001aaa:	f003 ffee 	bl	8005a8a <memcpy>

    return state;
 8001aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3730      	adds	r7, #48	@ 0x30
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <releaseStatePayload>:

CANARD_INTERNAL uint64_t releaseStatePayload(CanardInstance* ins, CanardRxState* rxstate)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
    while (rxstate->buffer_blocks != CANARD_BUFFER_IDX_NONE)
 8001ac2:	e01b      	b.n	8001afc <releaseStatePayload+0x44>
    {
        CanardBufferBlock* block = canardBufferFromIdx(&ins->allocator, rxstate->buffer_blocks);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f103 020c 	add.w	r2, r3, #12
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4610      	mov	r0, r2
 8001ad2:	f7fe fd5b 	bl	800058c <canardBufferFromIdx>
 8001ad6:	60f8      	str	r0, [r7, #12]
        CanardBufferBlock* const temp = block->next;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	60bb      	str	r3, [r7, #8]
        freeBlock(&ins->allocator, block);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	330c      	adds	r3, #12
 8001ae2:	68f9      	ldr	r1, [r7, #12]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f000 fbb4 	bl	8002252 <freeBlock>
        rxstate->buffer_blocks = canardBufferToIdx(&ins->allocator, temp);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	330c      	adds	r3, #12
 8001aee:	68b9      	ldr	r1, [r7, #8]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7fe fd57 	bl	80005a4 <canardBufferToIdx>
 8001af6:	4602      	mov	r2, r0
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	605a      	str	r2, [r3, #4]
    while (rxstate->buffer_blocks != CANARD_BUFFER_IDX_NONE)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d1df      	bne.n	8001ac4 <releaseStatePayload+0xc>
    }
    rxstate->payload_len = 0;
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	8ad3      	ldrh	r3, [r2, #22]
 8001b08:	f36f 0309 	bfc	r3, #0, #10
 8001b0c:	82d3      	strh	r3, [r2, #22]
    return CANARD_OK;
 8001b0e:	f04f 0200 	mov.w	r2, #0
 8001b12:	f04f 0300 	mov.w	r3, #0
}
 8001b16:	4610      	mov	r0, r2
 8001b18:	4619      	mov	r1, r3
 8001b1a:	3710      	adds	r7, #16
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <bufferBlockPushBytes>:
 */
CANARD_INTERNAL int16_t bufferBlockPushBytes(CanardPoolAllocator* allocator,
                                             CanardRxState* state,
                                             const uint8_t* data,
                                             uint8_t data_len)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b08a      	sub	sp, #40	@ 0x28
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
 8001b2c:	70fb      	strb	r3, [r7, #3]
    uint16_t data_index = 0;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	84fb      	strh	r3, [r7, #38]	@ 0x26

    // if head is not full, add data to head
    if ((CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE - state->payload_len) > 0)
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	8adb      	ldrh	r3, [r3, #22]
 8001b36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	2b05      	cmp	r3, #5
 8001b3e:	d036      	beq.n	8001bae <bufferBlockPushBytes+0x8e>
    {
        for (uint16_t i = (uint16_t)state->payload_len;
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	8adb      	ldrh	r3, [r3, #22]
 8001b44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001b4c:	e00e      	b.n	8001b6c <bufferBlockPushBytes+0x4c>
             i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE && data_index < data_len;
             i++, data_index++)
        {
            state->buffer_head[i] = data[data_index];
 8001b4e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	441a      	add	r2, r3
 8001b54:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001b56:	7811      	ldrb	r1, [r2, #0]
 8001b58:	68ba      	ldr	r2, [r7, #8]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	460a      	mov	r2, r1
 8001b5e:	76da      	strb	r2, [r3, #27]
             i++, data_index++)
 8001b60:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001b62:	3301      	adds	r3, #1
 8001b64:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001b66:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001b68:	3301      	adds	r3, #1
 8001b6a:	84fb      	strh	r3, [r7, #38]	@ 0x26
             i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE && data_index < data_len;
 8001b6c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	d804      	bhi.n	8001b7c <bufferBlockPushBytes+0x5c>
 8001b72:	78fb      	ldrb	r3, [r7, #3]
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d3e8      	bcc.n	8001b4e <bufferBlockPushBytes+0x2e>
        }
        if (data_index >= data_len)
 8001b7c:	78fb      	ldrb	r3, [r7, #3]
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d313      	bcc.n	8001bae <bufferBlockPushBytes+0x8e>
        {
            state->payload_len =
                (uint16_t)(state->payload_len + data_len) & ((1U << CANARD_TRANSFER_PAYLOAD_LEN_BITS) - 1U);
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	8adb      	ldrh	r3, [r3, #22]
 8001b8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	461a      	mov	r2, r3
 8001b92:	78fb      	ldrb	r3, [r7, #3]
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	4413      	add	r3, r2
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b9e:	b299      	uxth	r1, r3
            state->payload_len =
 8001ba0:	68ba      	ldr	r2, [r7, #8]
 8001ba2:	8ad3      	ldrh	r3, [r2, #22]
 8001ba4:	f361 0309 	bfi	r3, r1, #0, #10
 8001ba8:	82d3      	strh	r3, [r2, #22]
            return 1;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e0ae      	b.n	8001d0c <bufferBlockPushBytes+0x1ec>
        }
    } // head is full.

    uint16_t index_at_nth_block =
        (uint16_t)(((state->payload_len) - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) % CANARD_BUFFER_BLOCK_DATA_SIZE);
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	8adb      	ldrh	r3, [r3, #22]
 8001bb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	1f5a      	subs	r2, r3, #5
 8001bba:	0893      	lsrs	r3, r2, #2
 8001bbc:	4955      	ldr	r1, [pc, #340]	@ (8001d14 <bufferBlockPushBytes+0x1f4>)
 8001bbe:	fba1 3103 	umull	r3, r1, r1, r3
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	1a5b      	subs	r3, r3, r1
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	1ad3      	subs	r3, r2, r3
    uint16_t index_at_nth_block =
 8001bcc:	847b      	strh	r3, [r7, #34]	@ 0x22

    // get to current block
    CanardBufferBlock* block = NULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61fb      	str	r3, [r7, #28]

    // buffer blocks uninitialized
    if (state->buffer_blocks == CANARD_BUFFER_IDX_NONE)
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d113      	bne.n	8001c02 <bufferBlockPushBytes+0xe2>
    {
        block = createBufferBlock(allocator);
 8001bda:	68f8      	ldr	r0, [r7, #12]
 8001bdc:	f000 f89c 	bl	8001d18 <createBufferBlock>
 8001be0:	61f8      	str	r0, [r7, #28]
        state->buffer_blocks = canardBufferToIdx(allocator, block);
 8001be2:	69f9      	ldr	r1, [r7, #28]
 8001be4:	68f8      	ldr	r0, [r7, #12]
 8001be6:	f7fe fcdd 	bl	80005a4 <canardBufferToIdx>
 8001bea:	4602      	mov	r2, r0
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	605a      	str	r2, [r3, #4]
        if (block == NULL)
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d102      	bne.n	8001bfc <bufferBlockPushBytes+0xdc>
        {
            return -CANARD_ERROR_OUT_OF_MEMORY;
 8001bf6:	f06f 0302 	mvn.w	r3, #2
 8001bfa:	e087      	b.n	8001d0c <bufferBlockPushBytes+0x1ec>
        }

        index_at_nth_block = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	847b      	strh	r3, [r7, #34]	@ 0x22
 8001c00:	e06c      	b.n	8001cdc <bufferBlockPushBytes+0x1bc>
    }
    else
    {
        uint16_t nth_block = 1;
 8001c02:	2301      	movs	r3, #1
 8001c04:	837b      	strh	r3, [r7, #26]

        // get to block
        block = canardBufferFromIdx(allocator, state->buffer_blocks);
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	68f8      	ldr	r0, [r7, #12]
 8001c0e:	f7fe fcbd 	bl	800058c <canardBufferFromIdx>
 8001c12:	61f8      	str	r0, [r7, #28]
        while (block->next != NULL)
 8001c14:	e005      	b.n	8001c22 <bufferBlockPushBytes+0x102>
        {
            nth_block++;
 8001c16:	8b7b      	ldrh	r3, [r7, #26]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	837b      	strh	r3, [r7, #26]
            block = block->next;
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	61fb      	str	r3, [r7, #28]
        while (block->next != NULL)
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1f5      	bne.n	8001c16 <bufferBlockPushBytes+0xf6>
        }

        const uint16_t num_buffer_blocks =
            (uint16_t) (((((uint32_t)state->payload_len + data_len) - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) /
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	8adb      	ldrh	r3, [r3, #22]
 8001c2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	461a      	mov	r2, r3
 8001c36:	78fb      	ldrb	r3, [r7, #3]
 8001c38:	4413      	add	r3, r2
 8001c3a:	3b05      	subs	r3, #5
 8001c3c:	089b      	lsrs	r3, r3, #2
 8001c3e:	4a35      	ldr	r2, [pc, #212]	@ (8001d14 <bufferBlockPushBytes+0x1f4>)
 8001c40:	fba2 2303 	umull	r2, r3, r2, r3
 8001c44:	b29b      	uxth	r3, r3
        const uint16_t num_buffer_blocks =
 8001c46:	3301      	adds	r3, #1
 8001c48:	82fb      	strh	r3, [r7, #22]
                         CANARD_BUFFER_BLOCK_DATA_SIZE) + 1U);

        if (num_buffer_blocks > nth_block && index_at_nth_block == 0)
 8001c4a:	8afa      	ldrh	r2, [r7, #22]
 8001c4c:	8b7b      	ldrh	r3, [r7, #26]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d944      	bls.n	8001cdc <bufferBlockPushBytes+0x1bc>
 8001c52:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d141      	bne.n	8001cdc <bufferBlockPushBytes+0x1bc>
        {
            block->next = createBufferBlock(allocator);
 8001c58:	68f8      	ldr	r0, [r7, #12]
 8001c5a:	f000 f85d 	bl	8001d18 <createBufferBlock>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	601a      	str	r2, [r3, #0]
            if (block->next == NULL)
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d102      	bne.n	8001c72 <bufferBlockPushBytes+0x152>
            {
                return -CANARD_ERROR_OUT_OF_MEMORY;
 8001c6c:	f06f 0302 	mvn.w	r3, #2
 8001c70:	e04c      	b.n	8001d0c <bufferBlockPushBytes+0x1ec>
            }
            block = block->next;
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	61fb      	str	r3, [r7, #28]
        }
    }

    // add data to current block until it becomes full, add new block if necessary
    while (data_index < data_len)
 8001c78:	e030      	b.n	8001cdc <bufferBlockPushBytes+0x1bc>
    {
        for (uint16_t i = index_at_nth_block;
 8001c7a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001c7c:	833b      	strh	r3, [r7, #24]
 8001c7e:	e00e      	b.n	8001c9e <bufferBlockPushBytes+0x17e>
             i < CANARD_BUFFER_BLOCK_DATA_SIZE && data_index < data_len;
             i++, data_index++)
        {
            block->data[i] = data[data_index];
 8001c80:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	441a      	add	r2, r3
 8001c86:	8b3b      	ldrh	r3, [r7, #24]
 8001c88:	7811      	ldrb	r1, [r2, #0]
 8001c8a:	69fa      	ldr	r2, [r7, #28]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	460a      	mov	r2, r1
 8001c90:	711a      	strb	r2, [r3, #4]
             i++, data_index++)
 8001c92:	8b3b      	ldrh	r3, [r7, #24]
 8001c94:	3301      	adds	r3, #1
 8001c96:	833b      	strh	r3, [r7, #24]
 8001c98:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	84fb      	strh	r3, [r7, #38]	@ 0x26
             i < CANARD_BUFFER_BLOCK_DATA_SIZE && data_index < data_len;
 8001c9e:	8b3b      	ldrh	r3, [r7, #24]
 8001ca0:	2b1b      	cmp	r3, #27
 8001ca2:	d804      	bhi.n	8001cae <bufferBlockPushBytes+0x18e>
 8001ca4:	78fb      	ldrb	r3, [r7, #3]
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d3e8      	bcc.n	8001c80 <bufferBlockPushBytes+0x160>
        }

        if (data_index < data_len)
 8001cae:	78fb      	ldrb	r3, [r7, #3]
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d211      	bcs.n	8001cdc <bufferBlockPushBytes+0x1bc>
        {
            block->next = createBufferBlock(allocator);
 8001cb8:	68f8      	ldr	r0, [r7, #12]
 8001cba:	f000 f82d 	bl	8001d18 <createBufferBlock>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	601a      	str	r2, [r3, #0]
            if (block->next == NULL)
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d102      	bne.n	8001cd2 <bufferBlockPushBytes+0x1b2>
            {
                return -CANARD_ERROR_OUT_OF_MEMORY;
 8001ccc:	f06f 0302 	mvn.w	r3, #2
 8001cd0:	e01c      	b.n	8001d0c <bufferBlockPushBytes+0x1ec>
            }
            block = block->next;
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	61fb      	str	r3, [r7, #28]
            index_at_nth_block = 0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	847b      	strh	r3, [r7, #34]	@ 0x22
    while (data_index < data_len)
 8001cdc:	78fb      	ldrb	r3, [r7, #3]
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d3c9      	bcc.n	8001c7a <bufferBlockPushBytes+0x15a>
        }
    }

    state->payload_len = (uint16_t)(state->payload_len + data_len) & ((1U << CANARD_TRANSFER_PAYLOAD_LEN_BITS) - 1U);
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	8adb      	ldrh	r3, [r3, #22]
 8001cea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	78fb      	ldrb	r3, [r7, #3]
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	4413      	add	r3, r2
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cfe:	b299      	uxth	r1, r3
 8001d00:	68ba      	ldr	r2, [r7, #8]
 8001d02:	8ad3      	ldrh	r3, [r2, #22]
 8001d04:	f361 0309 	bfi	r3, r1, #0, #10
 8001d08:	82d3      	strh	r3, [r2, #22]

    return 1;
 8001d0a:	2301      	movs	r3, #1
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3728      	adds	r7, #40	@ 0x28
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	24924925 	.word	0x24924925

08001d18 <createBufferBlock>:

CANARD_INTERNAL CanardBufferBlock* createBufferBlock(CanardPoolAllocator* allocator)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
    CanardBufferBlock* block = (CanardBufferBlock*) allocateBlock(allocator);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 fa6d 	bl	8002200 <allocateBlock>
 8001d26:	60f8      	str	r0, [r7, #12]
    if (block == NULL)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <createBufferBlock+0x1a>
    {
        return NULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	e003      	b.n	8001d3a <createBufferBlock+0x22>
    }
    block->next = NULL;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
    return block;
 8001d38:	68fb      	ldr	r3, [r7, #12]
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <copyBitArray>:
/**
 * Bit array copy routine, originally developed by Ben Dyer for Libuavcan. Thanks Ben.
 */
void copyBitArray(const uint8_t* src, uint32_t src_offset, uint32_t src_len,
                        uint8_t* dst, uint32_t dst_offset)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b089      	sub	sp, #36	@ 0x24
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	60f8      	str	r0, [r7, #12]
 8001d4a:	60b9      	str	r1, [r7, #8]
 8001d4c:	607a      	str	r2, [r7, #4]
 8001d4e:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(src_len > 0U);

    // Normalizing inputs
    src += src_offset / 8U;
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	08db      	lsrs	r3, r3, #3
 8001d54:	68fa      	ldr	r2, [r7, #12]
 8001d56:	4413      	add	r3, r2
 8001d58:	60fb      	str	r3, [r7, #12]
    dst += dst_offset / 8U;
 8001d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d5c:	08db      	lsrs	r3, r3, #3
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	4413      	add	r3, r2
 8001d62:	603b      	str	r3, [r7, #0]

    src_offset %= 8U;
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	60bb      	str	r3, [r7, #8]
    dst_offset %= 8U;
 8001d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	62bb      	str	r3, [r7, #40]	@ 0x28

    const size_t last_bit = src_offset + src_len;
 8001d74:	68ba      	ldr	r2, [r7, #8]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4413      	add	r3, r2
 8001d7a:	61fb      	str	r3, [r7, #28]
    while (last_bit - src_offset)
 8001d7c:	e04d      	b.n	8001e1a <copyBitArray+0xd8>
    {
        const uint8_t src_bit_offset = (uint8_t)(src_offset % 8U);
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	76fb      	strb	r3, [r7, #27]
        const uint8_t dst_bit_offset = (uint8_t)(dst_offset % 8U);
 8001d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	76bb      	strb	r3, [r7, #26]

        const uint8_t max_offset = MAX(src_bit_offset, dst_bit_offset);
 8001d92:	7eba      	ldrb	r2, [r7, #26]
 8001d94:	7efb      	ldrb	r3, [r7, #27]
 8001d96:	4293      	cmp	r3, r2
 8001d98:	bf38      	it	cc
 8001d9a:	4613      	movcc	r3, r2
 8001d9c:	767b      	strb	r3, [r7, #25]
        const uint32_t copy_bits = (uint32_t)MIN(last_bit - src_offset, 8U - max_offset);
 8001d9e:	7e7b      	ldrb	r3, [r7, #25]
 8001da0:	f1c3 0208 	rsb	r2, r3, #8
 8001da4:	69f9      	ldr	r1, [r7, #28]
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	1acb      	subs	r3, r1, r3
 8001daa:	4293      	cmp	r3, r2
 8001dac:	bf28      	it	cs
 8001dae:	4613      	movcs	r3, r2
 8001db0:	617b      	str	r3, [r7, #20]
        const uint8_t src_data = (uint8_t)(((uint32_t)src[src_offset / 8U] << src_bit_offset) >> dst_bit_offset)&0xFF;

        dst[dst_offset / 8U] =
            (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask))&0xFF;
#else
        const uint8_t write_mask = (uint8_t)((uint8_t)(0xFF00U >> copy_bits) >> dst_bit_offset);
 8001db2:	f44f 427f 	mov.w	r2, #65280	@ 0xff00
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	7ebb      	ldrb	r3, [r7, #26]
 8001dc2:	fa42 f303 	asr.w	r3, r2, r3
 8001dc6:	74fb      	strb	r3, [r7, #19]
        const uint8_t src_data = (uint8_t)(((uint32_t)src[src_offset / 8U] << src_bit_offset) >> dst_bit_offset);
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	08db      	lsrs	r3, r3, #3
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	4413      	add	r3, r2
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	7efb      	ldrb	r3, [r7, #27]
 8001dd6:	409a      	lsls	r2, r3
 8001dd8:	7ebb      	ldrb	r3, [r7, #26]
 8001dda:	fa22 f303 	lsr.w	r3, r2, r3
 8001dde:	74bb      	strb	r3, [r7, #18]

        dst[dst_offset / 8U] =
            (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask));
 8001de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001de2:	08db      	lsrs	r3, r3, #3
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	4413      	add	r3, r2
 8001de8:	781a      	ldrb	r2, [r3, #0]
 8001dea:	7cfb      	ldrb	r3, [r7, #19]
 8001dec:	43db      	mvns	r3, r3
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	4013      	ands	r3, r2
 8001df2:	b2d9      	uxtb	r1, r3
 8001df4:	7cba      	ldrb	r2, [r7, #18]
 8001df6:	7cfb      	ldrb	r3, [r7, #19]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	b2da      	uxtb	r2, r3
        dst[dst_offset / 8U] =
 8001dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dfe:	08db      	lsrs	r3, r3, #3
 8001e00:	6838      	ldr	r0, [r7, #0]
 8001e02:	4403      	add	r3, r0
            (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask));
 8001e04:	430a      	orrs	r2, r1
 8001e06:	b2d2      	uxtb	r2, r2
        dst[dst_offset / 8U] =
 8001e08:	701a      	strb	r2, [r3, #0]
#endif

        src_offset += copy_bits;
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	4413      	add	r3, r2
 8001e10:	60bb      	str	r3, [r7, #8]
        dst_offset += copy_bits;
 8001e12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	4413      	add	r3, r2
 8001e18:	62bb      	str	r3, [r7, #40]	@ 0x28
    while (last_bit - src_offset)
 8001e1a:	69fa      	ldr	r2, [r7, #28]
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d1ad      	bne.n	8001d7e <copyBitArray+0x3c>
    }
}
 8001e22:	bf00      	nop
 8001e24:	bf00      	nop
 8001e26:	3724      	adds	r7, #36	@ 0x24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <descatterTransferPayload>:

CANARD_INTERNAL int16_t descatterTransferPayload(const CanardRxTransfer* transfer,
                                                 uint32_t bit_offset,
                                                 uint8_t bit_length,
                                                 void* output)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b090      	sub	sp, #64	@ 0x40
 8001e34:	af02      	add	r7, sp, #8
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	603b      	str	r3, [r7, #0]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	71fb      	strb	r3, [r7, #7]
    CANARD_ASSERT(transfer != 0);

    if (bit_offset >= transfer->payload_len * 8)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	8a9b      	ldrh	r3, [r3, #20]
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	461a      	mov	r2, r3
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d301      	bcc.n	8001e52 <descatterTransferPayload+0x22>
    {
        return 0;       // Out of range, reading zero bits
 8001e4e:	2300      	movs	r3, #0
 8001e50:	e0df      	b.n	8002012 <descatterTransferPayload+0x1e2>
    }

    if (bit_offset + bit_length > transfer->payload_len * 8)
 8001e52:	79fa      	ldrb	r2, [r7, #7]
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	4413      	add	r3, r2
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	8a92      	ldrh	r2, [r2, #20]
 8001e5c:	00d2      	lsls	r2, r2, #3
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d908      	bls.n	8001e74 <descatterTransferPayload+0x44>
    {
        bit_length = (uint8_t)(transfer->payload_len * 8U - bit_offset);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	8a9b      	ldrh	r3, [r3, #20]
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	b2da      	uxtb	r2, r3
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	71fb      	strb	r3, [r7, #7]
    }

    CANARD_ASSERT(bit_length > 0);

    if ((transfer->payload_middle != NULL) || (transfer->payload_tail != NULL)) // Multi frame
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d104      	bne.n	8001e86 <descatterTransferPayload+0x56>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f000 80b9 	beq.w	8001ff8 <descatterTransferPayload+0x1c8>
        /*
         * This part is hideously complicated and probably should be redesigned.
         * The objective here is to copy the requested number of bits from scattered storage into the temporary
         * local storage. We go through great pains to ensure that all corner cases are handled correctly.
         */
        uint32_t input_bit_offset = bit_offset;
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	637b      	str	r3, [r7, #52]	@ 0x34
        uint8_t output_bit_offset = 0;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        uint8_t remaining_bit_length = bit_length;
 8001e90:	79fb      	ldrb	r3, [r7, #7]
 8001e92:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

        // Reading head
        if (input_bit_offset < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8)
 8001e96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e98:	2b27      	cmp	r3, #39	@ 0x27
 8001e9a:	d82d      	bhi.n	8001ef8 <descatterTransferPayload+0xc8>
        {
            const uint8_t amount = (uint8_t)MIN(remaining_bit_length,
 8001e9c:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8001ea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ea2:	f1c3 0328 	rsb	r3, r3, #40	@ 0x28
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d305      	bcc.n	8001eb6 <descatterTransferPayload+0x86>
 8001eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	f1c3 0328 	rsb	r3, r3, #40	@ 0x28
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	e001      	b.n	8001eba <descatterTransferPayload+0x8a>
 8001eb6:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001eba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                                                CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U - input_bit_offset);

            copyBitArray(&transfer->payload_head[0], input_bit_offset, amount, (uint8_t*) output, 0);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6898      	ldr	r0, [r3, #8]
 8001ec2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001ece:	f7ff ff38 	bl	8001d42 <copyBitArray>

            input_bit_offset += amount;
 8001ed2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001ed6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001ed8:	4413      	add	r3, r2
 8001eda:	637b      	str	r3, [r7, #52]	@ 0x34
            output_bit_offset = (uint8_t)(output_bit_offset + amount);
 8001edc:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8001ee0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001ee4:	4413      	add	r3, r2
 8001ee6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            remaining_bit_length = (uint8_t)(remaining_bit_length - amount);
 8001eea:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8001eee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
        }

        // Reading middle
        uint32_t remaining_bits = (uint32_t)(transfer->payload_len * 8U - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8a9b      	ldrh	r3, [r3, #20]
 8001efc:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8001f00:	3b05      	subs	r3, #5
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint32_t block_bit_offset = CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U;
 8001f06:	2328      	movs	r3, #40	@ 0x28
 8001f08:	62bb      	str	r3, [r7, #40]	@ 0x28
        const CanardBufferBlock* block = transfer->payload_middle;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	627b      	str	r3, [r7, #36]	@ 0x24

        while ((block != NULL) && (remaining_bit_length > 0))
 8001f10:	e044      	b.n	8001f9c <descatterTransferPayload+0x16c>
        {
            CANARD_ASSERT(remaining_bits > 0);
            const uint32_t block_end_bit_offset = block_bit_offset + MIN(CANARD_BUFFER_BLOCK_DATA_SIZE * 8,
 8001f12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f14:	2be0      	cmp	r3, #224	@ 0xe0
 8001f16:	bf28      	it	cs
 8001f18:	23e0      	movcs	r3, #224	@ 0xe0
 8001f1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f1c:	4413      	add	r3, r2
 8001f1e:	61fb      	str	r3, [r7, #28]
                                                                         remaining_bits);

            // Perform copy if we've reached the requested offset, otherwise jump over this block and try next
            if (block_end_bit_offset > input_bit_offset)
 8001f20:	69fa      	ldr	r2, [r7, #28]
 8001f22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d92e      	bls.n	8001f86 <descatterTransferPayload+0x156>
            {
                const uint8_t amount = (uint8_t) MIN(remaining_bit_length, block_end_bit_offset - input_bit_offset);
 8001f28:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8001f2c:	69f9      	ldr	r1, [r7, #28]
 8001f2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f30:	1acb      	subs	r3, r1, r3
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d306      	bcc.n	8001f44 <descatterTransferPayload+0x114>
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	e001      	b.n	8001f48 <descatterTransferPayload+0x118>
 8001f44:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001f48:	76fb      	strb	r3, [r7, #27]

                CANARD_ASSERT(input_bit_offset >= block_bit_offset);
                const uint32_t bit_offset_within_block = input_bit_offset - block_bit_offset;
 8001f4a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	617b      	str	r3, [r7, #20]

                copyBitArray(&block->data[0], bit_offset_within_block, amount, (uint8_t*) output, output_bit_offset);
 8001f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f54:	1d18      	adds	r0, r3, #4
 8001f56:	7efa      	ldrb	r2, [r7, #27]
 8001f58:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	6979      	ldr	r1, [r7, #20]
 8001f62:	f7ff feee 	bl	8001d42 <copyBitArray>

                input_bit_offset += amount;
 8001f66:	7efb      	ldrb	r3, [r7, #27]
 8001f68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001f6a:	4413      	add	r3, r2
 8001f6c:	637b      	str	r3, [r7, #52]	@ 0x34
                output_bit_offset = (uint8_t)(output_bit_offset + amount);
 8001f6e:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8001f72:	7efb      	ldrb	r3, [r7, #27]
 8001f74:	4413      	add	r3, r2
 8001f76:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                remaining_bit_length = (uint8_t)(remaining_bit_length - amount);
 8001f7a:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8001f7e:	7efb      	ldrb	r3, [r7, #27]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
            }

            CANARD_ASSERT(block_end_bit_offset > block_bit_offset);
            remaining_bits -= block_end_bit_offset - block_bit_offset;
 8001f86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f8e:	4413      	add	r3, r2
 8001f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
            block_bit_offset = block_end_bit_offset;
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	62bb      	str	r3, [r7, #40]	@ 0x28
            block = block->next;
 8001f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	627b      	str	r3, [r7, #36]	@ 0x24
        while ((block != NULL) && (remaining_bit_length > 0))
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <descatterTransferPayload+0x17a>
 8001fa2:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1b3      	bne.n	8001f12 <descatterTransferPayload+0xe2>
        }

        CANARD_ASSERT(remaining_bit_length <= remaining_bits);

        // Reading tail
        if ((transfer->payload_tail != NULL) && (remaining_bit_length > 0))
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d02c      	beq.n	800200c <descatterTransferPayload+0x1dc>
 8001fb2:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d028      	beq.n	800200c <descatterTransferPayload+0x1dc>
        {
            CANARD_ASSERT(input_bit_offset >= block_bit_offset);
            const uint32_t offset = input_bit_offset - block_bit_offset;
 8001fba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	613b      	str	r3, [r7, #16]

            copyBitArray(&transfer->payload_tail[0], offset, remaining_bit_length, (uint8_t*) output,
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6918      	ldr	r0, [r3, #16]
 8001fc6:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8001fca:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	6939      	ldr	r1, [r7, #16]
 8001fd4:	f7ff feb5 	bl	8001d42 <copyBitArray>
                         output_bit_offset);

            input_bit_offset += remaining_bit_length;
 8001fd8:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001fdc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001fde:	4413      	add	r3, r2
 8001fe0:	637b      	str	r3, [r7, #52]	@ 0x34
            output_bit_offset = (uint8_t)(output_bit_offset + remaining_bit_length);
 8001fe2:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8001fe6:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001fea:	4413      	add	r3, r2
 8001fec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            remaining_bit_length = 0;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    {
 8001ff6:	e009      	b.n	800200c <descatterTransferPayload+0x1dc>
        CANARD_ASSERT(output_bit_offset <= 64);
        CANARD_ASSERT(remaining_bit_length == 0);
    }
    else                                                                    // Single frame
    {
        copyBitArray(&transfer->payload_head[0], bit_offset, bit_length, (uint8_t*) output, 0);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6898      	ldr	r0, [r3, #8]
 8001ffc:	79fa      	ldrb	r2, [r7, #7]
 8001ffe:	2300      	movs	r3, #0
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	68b9      	ldr	r1, [r7, #8]
 8002006:	f7ff fe9c 	bl	8001d42 <copyBitArray>
 800200a:	e000      	b.n	800200e <descatterTransferPayload+0x1de>
    {
 800200c:	bf00      	nop
    }

    return bit_length;
 800200e:	79fb      	ldrb	r3, [r7, #7]
 8002010:	b21b      	sxth	r3, r3
}
 8002012:	4618      	mov	r0, r3
 8002014:	3738      	adds	r7, #56	@ 0x38
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <isBigEndian>:

CANARD_INTERNAL bool isBigEndian(void)
{
 800201a:	b480      	push	{r7}
 800201c:	b083      	sub	sp, #12
 800201e:	af00      	add	r7, sp, #0
#else
        uint16_t a;
        uint8_t b[2];
#endif
    } u;
    u.a = 1;
 8002020:	2301      	movs	r3, #1
 8002022:	80bb      	strh	r3, [r7, #4]
    return u.b[1] == 1;                             // Some don't...
 8002024:	797b      	ldrb	r3, [r7, #5]
 8002026:	2b01      	cmp	r3, #1
 8002028:	bf0c      	ite	eq
 800202a:	2301      	moveq	r3, #1
 800202c:	2300      	movne	r3, #0
 800202e:	b2db      	uxtb	r3, r3
#endif
}
 8002030:	4618      	mov	r0, r3
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <swapByteOrder>:

CANARD_INTERNAL void swapByteOrder(void* data, unsigned size)
{
 800203c:	b480      	push	{r7}
 800203e:	b087      	sub	sp, #28
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(data != NULL);

    uint8_t* const bytes = (uint8_t*) data;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	60fb      	str	r3, [r7, #12]

    size_t fwd = 0;
 800204a:	2300      	movs	r3, #0
 800204c:	617b      	str	r3, [r7, #20]
    size_t rev = size - 1;
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	3b01      	subs	r3, #1
 8002052:	613b      	str	r3, [r7, #16]

    while (fwd < rev)
 8002054:	e017      	b.n	8002086 <swapByteOrder+0x4a>
    {
        const uint8_t x = bytes[fwd];
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	4413      	add	r3, r2
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	72fb      	strb	r3, [r7, #11]
        bytes[fwd] = bytes[rev];
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	441a      	add	r2, r3
 8002066:	68f9      	ldr	r1, [r7, #12]
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	440b      	add	r3, r1
 800206c:	7812      	ldrb	r2, [r2, #0]
 800206e:	701a      	strb	r2, [r3, #0]
        bytes[rev] = x;
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	4413      	add	r3, r2
 8002076:	7afa      	ldrb	r2, [r7, #11]
 8002078:	701a      	strb	r2, [r3, #0]
        fwd++;
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	3301      	adds	r3, #1
 800207e:	617b      	str	r3, [r7, #20]
        rev--;
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	3b01      	subs	r3, #1
 8002084:	613b      	str	r3, [r7, #16]
    while (fwd < rev)
 8002086:	697a      	ldr	r2, [r7, #20]
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	429a      	cmp	r2, r3
 800208c:	d3e3      	bcc.n	8002056 <swapByteOrder+0x1a>
    }
}
 800208e:	bf00      	nop
 8002090:	bf00      	nop
 8002092:	371c      	adds	r7, #28
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <crcAddByte>:

/*
 * CRC functions
 */
CANARD_INTERNAL uint16_t crcAddByte(uint16_t crc_val, uint8_t byte)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4603      	mov	r3, r0
 80020a4:	460a      	mov	r2, r1
 80020a6:	80fb      	strh	r3, [r7, #6]
 80020a8:	4613      	mov	r3, r2
 80020aa:	717b      	strb	r3, [r7, #5]
    crc_val ^= (uint16_t) ((uint16_t) (byte) << 8U);
 80020ac:	797b      	ldrb	r3, [r7, #5]
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	021b      	lsls	r3, r3, #8
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	88fb      	ldrh	r3, [r7, #6]
 80020b6:	4053      	eors	r3, r2
 80020b8:	80fb      	strh	r3, [r7, #6]
    for (uint8_t j = 0; j < 8; j++)
 80020ba:	2300      	movs	r3, #0
 80020bc:	73fb      	strb	r3, [r7, #15]
 80020be:	e012      	b.n	80020e6 <crcAddByte+0x4a>
    {
        if (crc_val & 0x8000U)
 80020c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	da08      	bge.n	80020da <crcAddByte+0x3e>
        {
            crc_val = (uint16_t) ((uint16_t) (crc_val << 1U) ^ 0x1021U);
 80020c8:	88fb      	ldrh	r3, [r7, #6]
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 80020d2:	f083 0301 	eor.w	r3, r3, #1
 80020d6:	80fb      	strh	r3, [r7, #6]
 80020d8:	e002      	b.n	80020e0 <crcAddByte+0x44>
        }
        else
        {
            crc_val = (uint16_t) (crc_val << 1U);
 80020da:	88fb      	ldrh	r3, [r7, #6]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	80fb      	strh	r3, [r7, #6]
    for (uint8_t j = 0; j < 8; j++)
 80020e0:	7bfb      	ldrb	r3, [r7, #15]
 80020e2:	3301      	adds	r3, #1
 80020e4:	73fb      	strb	r3, [r7, #15]
 80020e6:	7bfb      	ldrb	r3, [r7, #15]
 80020e8:	2b07      	cmp	r3, #7
 80020ea:	d9e9      	bls.n	80020c0 <crcAddByte+0x24>
        }
    }
    return crc_val;
 80020ec:	88fb      	ldrh	r3, [r7, #6]
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3714      	adds	r7, #20
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <crcAddSignature>:

CANARD_INTERNAL uint16_t crcAddSignature(uint16_t crc_val, uint64_t data_type_signature)
{
 80020fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020fc:	b087      	sub	sp, #28
 80020fe:	af00      	add	r7, sp, #0
 8002100:	4601      	mov	r1, r0
 8002102:	e9c7 2300 	strd	r2, r3, [r7]
 8002106:	460b      	mov	r3, r1
 8002108:	81fb      	strh	r3, [r7, #14]
    for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 800210a:	2300      	movs	r3, #0
 800210c:	82fb      	strh	r3, [r7, #22]
 800210e:	e01b      	b.n	8002148 <crcAddSignature+0x4e>
    {
        crc_val = crcAddByte(crc_val, (uint8_t) (data_type_signature >> shift_val));
 8002110:	8af9      	ldrh	r1, [r7, #22]
 8002112:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002116:	f1c1 0620 	rsb	r6, r1, #32
 800211a:	f1a1 0020 	sub.w	r0, r1, #32
 800211e:	fa22 f401 	lsr.w	r4, r2, r1
 8002122:	fa03 f606 	lsl.w	r6, r3, r6
 8002126:	4334      	orrs	r4, r6
 8002128:	fa23 f000 	lsr.w	r0, r3, r0
 800212c:	4304      	orrs	r4, r0
 800212e:	fa23 f501 	lsr.w	r5, r3, r1
 8002132:	b2e2      	uxtb	r2, r4
 8002134:	89fb      	ldrh	r3, [r7, #14]
 8002136:	4611      	mov	r1, r2
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff ffaf 	bl	800209c <crcAddByte>
 800213e:	4603      	mov	r3, r0
 8002140:	81fb      	strh	r3, [r7, #14]
    for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 8002142:	8afb      	ldrh	r3, [r7, #22]
 8002144:	3308      	adds	r3, #8
 8002146:	82fb      	strh	r3, [r7, #22]
 8002148:	8afb      	ldrh	r3, [r7, #22]
 800214a:	2b3f      	cmp	r3, #63	@ 0x3f
 800214c:	d9e0      	bls.n	8002110 <crcAddSignature+0x16>
    }
    return crc_val;
 800214e:	89fb      	ldrh	r3, [r7, #14]
}
 8002150:	4618      	mov	r0, r3
 8002152:	371c      	adds	r7, #28
 8002154:	46bd      	mov	sp, r7
 8002156:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002158 <crcAdd>:

CANARD_INTERNAL uint16_t crcAdd(uint16_t crc_val, const uint8_t* bytes, size_t len)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
 8002164:	81fb      	strh	r3, [r7, #14]
    while (len--)
 8002166:	e00a      	b.n	800217e <crcAdd+0x26>
    {
        crc_val = crcAddByte(crc_val, *bytes++);
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	1c5a      	adds	r2, r3, #1
 800216c:	60ba      	str	r2, [r7, #8]
 800216e:	781a      	ldrb	r2, [r3, #0]
 8002170:	89fb      	ldrh	r3, [r7, #14]
 8002172:	4611      	mov	r1, r2
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff ff91 	bl	800209c <crcAddByte>
 800217a:	4603      	mov	r3, r0
 800217c:	81fb      	strh	r3, [r7, #14]
    while (len--)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	1e5a      	subs	r2, r3, #1
 8002182:	607a      	str	r2, [r7, #4]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d1ef      	bne.n	8002168 <crcAdd+0x10>
    }
    return crc_val;
 8002188:	89fb      	ldrh	r3, [r7, #14]
}
 800218a:	4618      	mov	r0, r3
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <initPoolAllocator>:
 *  Pool Allocator functions
 */
CANARD_INTERNAL void initPoolAllocator(CanardPoolAllocator* allocator,
                                       void* buf,
                                       uint16_t buf_len)
{
 8002192:	b480      	push	{r7}
 8002194:	b089      	sub	sp, #36	@ 0x24
 8002196:	af00      	add	r7, sp, #0
 8002198:	60f8      	str	r0, [r7, #12]
 800219a:	60b9      	str	r1, [r7, #8]
 800219c:	4613      	mov	r3, r2
 800219e:	80fb      	strh	r3, [r7, #6]
    size_t current_index = 0;
 80021a0:	2300      	movs	r3, #0
 80021a2:	61fb      	str	r3, [r7, #28]
    CanardPoolAllocatorBlock *abuf = buf;
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	617b      	str	r3, [r7, #20]
    allocator->arena = buf;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	68ba      	ldr	r2, [r7, #8]
 80021ac:	611a      	str	r2, [r3, #16]
    CanardPoolAllocatorBlock** current_block = &(allocator->free_list);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	3304      	adds	r3, #4
 80021b2:	61bb      	str	r3, [r7, #24]
    while (current_index < buf_len)
 80021b4:	e00b      	b.n	80021ce <initPoolAllocator+0x3c>
    {
        *current_block = &abuf[current_index];
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	015b      	lsls	r3, r3, #5
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	441a      	add	r2, r3
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	601a      	str	r2, [r3, #0]
        current_block = &((*current_block)->next);
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	61bb      	str	r3, [r7, #24]
        current_index++;
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	3301      	adds	r3, #1
 80021cc:	61fb      	str	r3, [r7, #28]
    while (current_index < buf_len)
 80021ce:	88fb      	ldrh	r3, [r7, #6]
 80021d0:	69fa      	ldr	r2, [r7, #28]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d3ef      	bcc.n	80021b6 <initPoolAllocator+0x24>
    }
    *current_block = NULL;
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]

    allocator->statistics.capacity_blocks = buf_len;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	88fa      	ldrh	r2, [r7, #6]
 80021e0:	811a      	strh	r2, [r3, #8]
    allocator->statistics.current_usage_blocks = 0;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2200      	movs	r2, #0
 80021e6:	815a      	strh	r2, [r3, #10]
    allocator->statistics.peak_usage_blocks = 0;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2200      	movs	r2, #0
 80021ec:	819a      	strh	r2, [r3, #12]
    // user should initialize semaphore after the canardInit
    // or at first call of canard_allocate_sem_take
    allocator->semaphore = NULL;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
}
 80021f4:	bf00      	nop
 80021f6:	3724      	adds	r7, #36	@ 0x24
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <allocateBlock>:

CANARD_INTERNAL void* allocateBlock(CanardPoolAllocator* allocator)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_take(allocator);
#endif
    // Check if there are any blocks available in the free list.
    if (allocator->free_list == NULL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d101      	bne.n	8002214 <allocateBlock+0x14>
    {
#if CANARD_ALLOCATE_SEM
        canard_allocate_sem_give(allocator);
#endif
        return NULL;
 8002210:	2300      	movs	r3, #0
 8002212:	e018      	b.n	8002246 <allocateBlock+0x46>
    }

    // Take first available block and prepares next block for use.
    void* result = allocator->free_list;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	60fb      	str	r3, [r7, #12]
    allocator->free_list = allocator->free_list->next;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	605a      	str	r2, [r3, #4]

    // Update statistics
    allocator->statistics.current_usage_blocks++;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	895b      	ldrh	r3, [r3, #10]
 8002228:	3301      	adds	r3, #1
 800222a:	b29a      	uxth	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	815a      	strh	r2, [r3, #10]
    if (allocator->statistics.peak_usage_blocks < allocator->statistics.current_usage_blocks)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	899a      	ldrh	r2, [r3, #12]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	895b      	ldrh	r3, [r3, #10]
 8002238:	429a      	cmp	r2, r3
 800223a:	d203      	bcs.n	8002244 <allocateBlock+0x44>
    {
        allocator->statistics.peak_usage_blocks = allocator->statistics.current_usage_blocks;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	895a      	ldrh	r2, [r3, #10]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	819a      	strh	r2, [r3, #12]
    }
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_give(allocator);
#endif
    return result;
 8002244:	68fb      	ldr	r3, [r7, #12]
}
 8002246:	4618      	mov	r0, r3
 8002248:	3714      	adds	r7, #20
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <freeBlock>:

CANARD_INTERNAL void freeBlock(CanardPoolAllocator* allocator, void* p)
{
 8002252:	b480      	push	{r7}
 8002254:	b085      	sub	sp, #20
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
 800225a:	6039      	str	r1, [r7, #0]
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_take(allocator);
#endif
    CanardPoolAllocatorBlock* block = (CanardPoolAllocatorBlock*) p;
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	60fb      	str	r3, [r7, #12]

    block->next = allocator->free_list;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	601a      	str	r2, [r3, #0]
    allocator->free_list = block;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	605a      	str	r2, [r3, #4]

    CANARD_ASSERT(allocator->statistics.current_usage_blocks > 0);
    allocator->statistics.current_usage_blocks--;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	895b      	ldrh	r3, [r3, #10]
 8002272:	3b01      	subs	r3, #1
 8002274:	b29a      	uxth	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	815a      	strh	r2, [r3, #10]
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_give(allocator);
#endif
}
 800227a:	bf00      	nop
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <canardSTM32Recieve>:
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @param  rx_frame pointer to a CanardCANFrame structure where the received CAN message will be
  * 		stored.
  * @retval ret == 1: OK, ret < 0: CANARD_ERROR, ret == 0: Check hcan->ErrorCode
  */
int16_t canardSTM32Recieve(CAN_HandleTypeDef *hcan, uint32_t RxLocation, CanardCANFrame *const rx_frame) {
 8002286:	b580      	push	{r7, lr}
 8002288:	b08e      	sub	sp, #56	@ 0x38
 800228a:	af00      	add	r7, sp, #0
 800228c:	60f8      	str	r0, [r7, #12]
 800228e:	60b9      	str	r1, [r7, #8]
 8002290:	607a      	str	r2, [r7, #4]
	if (rx_frame == NULL) {
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d102      	bne.n	800229e <canardSTM32Recieve+0x18>
		return -CANARD_ERROR_INVALID_ARGUMENT;
 8002298:	f06f 0301 	mvn.w	r3, #1
 800229c:	e035      	b.n	800230a <canardSTM32Recieve+0x84>
	}

	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];

	if (HAL_CAN_GetRxMessage(hcan, RxLocation, &RxHeader, RxData) == HAL_OK) {
 800229e:	f107 0314 	add.w	r3, r7, #20
 80022a2:	f107 021c 	add.w	r2, r7, #28
 80022a6:	68b9      	ldr	r1, [r7, #8]
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	f001 fcc2 	bl	8003c32 <HAL_CAN_GetRxMessage>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d129      	bne.n	8002308 <canardSTM32Recieve+0x82>
		//		printf("%02x", RxData[i]);
		//	}
		//	printf("\n");

		// Process ID to canard format
		if (RxHeader.IDE == CAN_ID_EXT) { // canard will only process the message if it is extended ID
 80022b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d109      	bne.n	80022ce <canardSTM32Recieve+0x48>
			rx_frame->id = RxHeader.ExtId;
 80022ba:	6a3a      	ldr	r2, [r7, #32]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	601a      	str	r2, [r3, #0]
			rx_frame->id |= CANARD_CAN_FRAME_EFF;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	e002      	b.n	80022d4 <canardSTM32Recieve+0x4e>
		} else {
			rx_frame->id = RxHeader.StdId;
 80022ce:	69fa      	ldr	r2, [r7, #28]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	601a      	str	r2, [r3, #0]
		}

		if (RxHeader.RTR == CAN_RTR_REMOTE) { // canard won't process the message if it is a remote frame
 80022d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d105      	bne.n	80022e6 <canardSTM32Recieve+0x60>
			rx_frame->id |= CANARD_CAN_FRAME_RTR;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	601a      	str	r2, [r3, #0]
		}

		rx_frame->data_len = RxHeader.DLC;
 80022e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	731a      	strb	r2, [r3, #12]
		memcpy(rx_frame->data, RxData, RxHeader.DLC);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3304      	adds	r3, #4
 80022f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022f4:	f107 0114 	add.w	r1, r7, #20
 80022f8:	4618      	mov	r0, r3
 80022fa:	f003 fbc6 	bl	8005a8a <memcpy>

		// assume a single interface
		rx_frame->iface_id = 0;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	735a      	strb	r2, [r3, #13]

		return 1;
 8002304:	2301      	movs	r3, #1
 8002306:	e000      	b.n	800230a <canardSTM32Recieve+0x84>
	}

	// Either no CAN msg to be read, or an error that can be read from hfdcan->ErrorCode
	return 0;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3738      	adds	r7, #56	@ 0x38
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <canardSTM32Transmit>:
  *         the configuration information for the specified FDCAN.
  * @param  tx_frame pointer to a CanardCANFrame structure that contains the CAN message to
  * 		transmit.
  * @retval ret == 1: OK, ret < 0: CANARD_ERROR, ret == 0: Check hcan->ErrorCode
  */
int16_t canardSTM32Transmit(CAN_HandleTypeDef *hcan, const CanardCANFrame* const tx_frame) {
 8002312:	b580      	push	{r7, lr}
 8002314:	b08c      	sub	sp, #48	@ 0x30
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
 800231a:	6039      	str	r1, [r7, #0]
	if (tx_frame == NULL) {
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d102      	bne.n	8002328 <canardSTM32Transmit+0x16>
		return -CANARD_ERROR_INVALID_ARGUMENT;
 8002322:	f06f 0301 	mvn.w	r3, #1
 8002326:	e043      	b.n	80023b0 <canardSTM32Transmit+0x9e>
	}

	if (tx_frame->id & CANARD_CAN_FRAME_ERR) {
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d002      	beq.n	800233a <canardSTM32Transmit+0x28>
		return -CANARD_ERROR_INVALID_ARGUMENT; // unsupported frame format
 8002334:	f06f 0301 	mvn.w	r3, #1
 8002338:	e03a      	b.n	80023b0 <canardSTM32Transmit+0x9e>
	// For now, we discard it. If we later wanted to check if our message is pending, 
	// or if we wanted to abort the transmission, we would need to store it.
	uint32_t TxMailbox; 

	// Process canard id to STM FDCAN header format
	if (tx_frame->id & CANARD_CAN_FRAME_EFF) {
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	da07      	bge.n	8002352 <canardSTM32Transmit+0x40>
		TxHeader.IDE = CAN_ID_EXT;
 8002342:	2304      	movs	r3, #4
 8002344:	623b      	str	r3, [r7, #32]
		TxHeader.ExtId = tx_frame->id & CANARD_CAN_EXT_ID_MASK;
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 800234e:	61fb      	str	r3, [r7, #28]
 8002350:	e006      	b.n	8002360 <canardSTM32Transmit+0x4e>
	} else {
		TxHeader.IDE = CAN_ID_STD;
 8002352:	2300      	movs	r3, #0
 8002354:	623b      	str	r3, [r7, #32]
		TxHeader.StdId = tx_frame->id & CANARD_CAN_STD_ID_MASK;
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800235e:	61bb      	str	r3, [r7, #24]
	}

	TxHeader.DLC = tx_frame->data_len;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	7b1b      	ldrb	r3, [r3, #12]
 8002364:	62bb      	str	r3, [r7, #40]	@ 0x28

	if (tx_frame->id & CANARD_CAN_FRAME_RTR) {
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d002      	beq.n	8002378 <canardSTM32Transmit+0x66>
		TxHeader.RTR = CAN_RTR_REMOTE;
 8002372:	2302      	movs	r3, #2
 8002374:	627b      	str	r3, [r7, #36]	@ 0x24
 8002376:	e001      	b.n	800237c <canardSTM32Transmit+0x6a>
	} else {
		TxHeader.RTR = CAN_RTR_DATA;
 8002378:	2300      	movs	r3, #0
 800237a:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	TxHeader.TransmitGlobalTime = DISABLE;
 800237c:	2300      	movs	r3, #0
 800237e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	memcpy(TxData, tx_frame->data, TxHeader.DLC);
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	1d19      	adds	r1, r3, #4
 8002386:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002388:	f107 0310 	add.w	r3, r7, #16
 800238c:	4618      	mov	r0, r3
 800238e:	f003 fb7c 	bl	8005a8a <memcpy>

	if (HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox) == HAL_OK) {
 8002392:	f107 030c 	add.w	r3, r7, #12
 8002396:	f107 0210 	add.w	r2, r7, #16
 800239a:	f107 0118 	add.w	r1, r7, #24
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f001 fb77 	bl	8003a92 <HAL_CAN_AddTxMessage>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <canardSTM32Transmit+0x9c>
//		printf("Successfully sent message with id: %lu \n", TxHeader.ExtId);
		return 1;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e000      	b.n	80023b0 <canardSTM32Transmit+0x9e>
	}

//	printf("Failed at adding message with id: %lu to Tx Mailbox", TxHeader.ExtId);
	// This might be for many reasons including all Tx Mailboxes being full, the error can be read from hfdcan->ErrorCode
	return 0;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3730      	adds	r7, #48	@ 0x30
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <getUniqueID>:
/**
  * @brief  Return a unique ID made out of the 96-bit STM32 UID
  * @param  id an array of size 16 to fill with the unique ID
  * @retval None
  */
void getUniqueID(uint8_t id[16]){
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
	uint32_t HALUniqueIDs[4];
	// Make Unique ID out of the 96-bit STM32 UID
	memset(id, 0, 16);
 80023c0:	2210      	movs	r2, #16
 80023c2:	2100      	movs	r1, #0
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f003 fac5 	bl	8005954 <memset>
	HALUniqueIDs[0] = HAL_GetUIDw0();
 80023ca:	f001 f935 	bl	8003638 <HAL_GetUIDw0>
 80023ce:	4603      	mov	r3, r0
 80023d0:	60bb      	str	r3, [r7, #8]
	HALUniqueIDs[1] = HAL_GetUIDw1();
 80023d2:	f001 f93d 	bl	8003650 <HAL_GetUIDw1>
 80023d6:	4603      	mov	r3, r0
 80023d8:	60fb      	str	r3, [r7, #12]
	HALUniqueIDs[2] = HAL_GetUIDw2();
 80023da:	f001 f945 	bl	8003668 <HAL_GetUIDw2>
 80023de:	4603      	mov	r3, r0
 80023e0:	613b      	str	r3, [r7, #16]
	HALUniqueIDs[3] = HAL_GetUIDw1(); // repeating UIDw1 for this, no specific reason I chose this..
 80023e2:	f001 f935 	bl	8003650 <HAL_GetUIDw1>
 80023e6:	4603      	mov	r3, r0
 80023e8:	617b      	str	r3, [r7, #20]
	memcpy(id, HALUniqueIDs, 16);
 80023ea:	f107 0308 	add.w	r3, r7, #8
 80023ee:	2210      	movs	r2, #16
 80023f0:	4619      	mov	r1, r3
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f003 fb49 	bl	8005a8a <memcpy>
}
 80023f8:	bf00      	nop
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b08a      	sub	sp, #40	@ 0x28
 8002404:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002406:	f107 0314 	add.w	r3, r7, #20
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	605a      	str	r2, [r3, #4]
 8002410:	609a      	str	r2, [r3, #8]
 8002412:	60da      	str	r2, [r3, #12]
 8002414:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002416:	4b45      	ldr	r3, [pc, #276]	@ (800252c <MX_GPIO_Init+0x12c>)
 8002418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800241a:	4a44      	ldr	r2, [pc, #272]	@ (800252c <MX_GPIO_Init+0x12c>)
 800241c:	f043 0304 	orr.w	r3, r3, #4
 8002420:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002422:	4b42      	ldr	r3, [pc, #264]	@ (800252c <MX_GPIO_Init+0x12c>)
 8002424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002426:	f003 0304 	and.w	r3, r3, #4
 800242a:	613b      	str	r3, [r7, #16]
 800242c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800242e:	4b3f      	ldr	r3, [pc, #252]	@ (800252c <MX_GPIO_Init+0x12c>)
 8002430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002432:	4a3e      	ldr	r2, [pc, #248]	@ (800252c <MX_GPIO_Init+0x12c>)
 8002434:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002438:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800243a:	4b3c      	ldr	r3, [pc, #240]	@ (800252c <MX_GPIO_Init+0x12c>)
 800243c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800243e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002446:	4b39      	ldr	r3, [pc, #228]	@ (800252c <MX_GPIO_Init+0x12c>)
 8002448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800244a:	4a38      	ldr	r2, [pc, #224]	@ (800252c <MX_GPIO_Init+0x12c>)
 800244c:	f043 0301 	orr.w	r3, r3, #1
 8002450:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002452:	4b36      	ldr	r3, [pc, #216]	@ (800252c <MX_GPIO_Init+0x12c>)
 8002454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	60bb      	str	r3, [r7, #8]
 800245c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800245e:	4b33      	ldr	r3, [pc, #204]	@ (800252c <MX_GPIO_Init+0x12c>)
 8002460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002462:	4a32      	ldr	r2, [pc, #200]	@ (800252c <MX_GPIO_Init+0x12c>)
 8002464:	f043 0302 	orr.w	r3, r3, #2
 8002468:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800246a:	4b30      	ldr	r3, [pc, #192]	@ (800252c <MX_GPIO_Init+0x12c>)
 800246c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	607b      	str	r3, [r7, #4]
 8002474:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8002476:	2200      	movs	r2, #0
 8002478:	21b0      	movs	r1, #176	@ 0xb0
 800247a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800247e:	f002 f9db 	bl	8004838 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8002482:	2200      	movs	r2, #0
 8002484:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002488:	4829      	ldr	r0, [pc, #164]	@ (8002530 <MX_GPIO_Init+0x130>)
 800248a:	f002 f9d5 	bl	8004838 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800248e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002492:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002494:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002498:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249a:	2300      	movs	r3, #0
 800249c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800249e:	f107 0314 	add.w	r3, r7, #20
 80024a2:	4619      	mov	r1, r3
 80024a4:	4823      	ldr	r0, [pc, #140]	@ (8002534 <MX_GPIO_Init+0x134>)
 80024a6:	f002 f84d 	bl	8004544 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80024aa:	230c      	movs	r3, #12
 80024ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ae:	2302      	movs	r3, #2
 80024b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b2:	2300      	movs	r3, #0
 80024b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b6:	2303      	movs	r3, #3
 80024b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024ba:	2307      	movs	r3, #7
 80024bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024be:	f107 0314 	add.w	r3, r7, #20
 80024c2:	4619      	mov	r1, r3
 80024c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024c8:	f002 f83c 	bl	8004544 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 80024cc:	23b0      	movs	r3, #176	@ 0xb0
 80024ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024d0:	2301      	movs	r3, #1
 80024d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d4:	2300      	movs	r3, #0
 80024d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d8:	2300      	movs	r3, #0
 80024da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024dc:	f107 0314 	add.w	r3, r7, #20
 80024e0:	4619      	mov	r1, r3
 80024e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024e6:	f002 f82d 	bl	8004544 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 80024ea:	2340      	movs	r3, #64	@ 0x40
 80024ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024ee:	2300      	movs	r3, #0
 80024f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024f2:	2301      	movs	r3, #1
 80024f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 80024f6:	f107 0314 	add.w	r3, r7, #20
 80024fa:	4619      	mov	r1, r3
 80024fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002500:	f002 f820 	bl	8004544 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8002504:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002508:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800250a:	2301      	movs	r3, #1
 800250c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250e:	2300      	movs	r3, #0
 8002510:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002512:	2300      	movs	r3, #0
 8002514:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8002516:	f107 0314 	add.w	r3, r7, #20
 800251a:	4619      	mov	r1, r3
 800251c:	4804      	ldr	r0, [pc, #16]	@ (8002530 <MX_GPIO_Init+0x130>)
 800251e:	f002 f811 	bl	8004544 <HAL_GPIO_Init>

}
 8002522:	bf00      	nop
 8002524:	3728      	adds	r7, #40	@ 0x28
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40021000 	.word	0x40021000
 8002530:	48000400 	.word	0x48000400
 8002534:	48000800 	.word	0x48000800

08002538 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// The actual ISR, modify this to your needs
// Run HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) once to set up the ISR
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8002538:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800253c:	b08a      	sub	sp, #40	@ 0x28
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
	// Receiving
	CanardCANFrame rx_frame;

	const uint64_t timestamp = HAL_GetTick() * 1000ULL;
 8002542:	f001 f86d 	bl	8003620 <HAL_GetTick>
 8002546:	4603      	mov	r3, r0
 8002548:	2200      	movs	r2, #0
 800254a:	469a      	mov	sl, r3
 800254c:	4693      	mov	fp, r2
 800254e:	4652      	mov	r2, sl
 8002550:	465b      	mov	r3, fp
 8002552:	f04f 0000 	mov.w	r0, #0
 8002556:	f04f 0100 	mov.w	r1, #0
 800255a:	0159      	lsls	r1, r3, #5
 800255c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002560:	0150      	lsls	r0, r2, #5
 8002562:	4602      	mov	r2, r0
 8002564:	460b      	mov	r3, r1
 8002566:	ebb2 040a 	subs.w	r4, r2, sl
 800256a:	eb63 050b 	sbc.w	r5, r3, fp
 800256e:	f04f 0200 	mov.w	r2, #0
 8002572:	f04f 0300 	mov.w	r3, #0
 8002576:	00ab      	lsls	r3, r5, #2
 8002578:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800257c:	00a2      	lsls	r2, r4, #2
 800257e:	4614      	mov	r4, r2
 8002580:	461d      	mov	r5, r3
 8002582:	eb14 080a 	adds.w	r8, r4, sl
 8002586:	eb45 090b 	adc.w	r9, r5, fp
 800258a:	f04f 0200 	mov.w	r2, #0
 800258e:	f04f 0300 	mov.w	r3, #0
 8002592:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002596:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800259a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800259e:	4690      	mov	r8, r2
 80025a0:	4699      	mov	r9, r3
 80025a2:	e9c7 8908 	strd	r8, r9, [r7, #32]
	const int16_t rx_res = canardSTM32Recieve(hcan, CAN_RX_FIFO0, &rx_frame);
 80025a6:	f107 030c 	add.w	r3, r7, #12
 80025aa:	461a      	mov	r2, r3
 80025ac:	2100      	movs	r1, #0
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7ff fe69 	bl	8002286 <canardSTM32Recieve>
 80025b4:	4603      	mov	r3, r0
 80025b6:	83fb      	strh	r3, [r7, #30]

	if (rx_res < 0) {
 80025b8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	da06      	bge.n	80025ce <HAL_CAN_RxFifo0MsgPendingCallback+0x96>
		printf("Receive error %d\n", rx_res);
 80025c0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80025c4:	4619      	mov	r1, r3
 80025c6:	480a      	ldr	r0, [pc, #40]	@ (80025f0 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 80025c8:	f003 f874 	bl	80056b4 <iprintf>
	}
	else if (rx_res > 0)        // Success - process the frame
	{
		canardHandleRxFrame(&canard, &rx_frame, timestamp);
	}
}
 80025cc:	e00a      	b.n	80025e4 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>
	else if (rx_res > 0)        // Success - process the frame
 80025ce:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	dd06      	ble.n	80025e4 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>
		canardHandleRxFrame(&canard, &rx_frame, timestamp);
 80025d6:	f107 010c 	add.w	r1, r7, #12
 80025da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80025de:	4805      	ldr	r0, [pc, #20]	@ (80025f4 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 80025e0:	f7fe f8d8 	bl	8000794 <canardHandleRxFrame>
}
 80025e4:	bf00      	nop
 80025e6:	3728      	adds	r7, #40	@ 0x28
 80025e8:	46bd      	mov	sp, r7
 80025ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025ee:	bf00      	nop
 80025f0:	08006538 	.word	0x08006538
 80025f4:	200000ac 	.word	0x200000ac

080025f8 <setupCANFilter>:

// CAN Filter setup, modify this to your needs
// Run this once before calling HAL_CAN_Start()
void setupCANFilter(CAN_HandleTypeDef *hcan) {
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08c      	sub	sp, #48	@ 0x30
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
    CAN_FilterTypeDef filter;
    filter.FilterBank = 0;
 8002600:	2300      	movs	r3, #0
 8002602:	61fb      	str	r3, [r7, #28]
	filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8002604:	2300      	movs	r3, #0
 8002606:	623b      	str	r3, [r7, #32]
	filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002608:	2300      	movs	r3, #0
 800260a:	61bb      	str	r3, [r7, #24]
	filter.FilterIdHigh = 0;
 800260c:	2300      	movs	r3, #0
 800260e:	60bb      	str	r3, [r7, #8]
	filter.FilterIdLow = 0;
 8002610:	2300      	movs	r3, #0
 8002612:	60fb      	str	r3, [r7, #12]
	filter.FilterMaskIdHigh = 0;
 8002614:	2300      	movs	r3, #0
 8002616:	613b      	str	r3, [r7, #16]
	filter.FilterMaskIdLow = 0;
 8002618:	2300      	movs	r3, #0
 800261a:	617b      	str	r3, [r7, #20]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 800261c:	2301      	movs	r3, #1
 800261e:	627b      	str	r3, [r7, #36]	@ 0x24
	filter.FilterActivation = ENABLE;
 8002620:	2301      	movs	r3, #1
 8002622:	62bb      	str	r3, [r7, #40]	@ 0x28
	filter.SlaveStartFilterBank = 14;
 8002624:	230e      	movs	r3, #14
 8002626:	62fb      	str	r3, [r7, #44]	@ 0x2c

	HAL_CAN_ConfigFilter(hcan, &filter);
 8002628:	f107 0308 	add.w	r3, r7, #8
 800262c:	4619      	mov	r1, r3
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f001 f921 	bl	8003876 <HAL_CAN_ConfigFilter>
}
 8002634:	bf00      	nop
 8002636:	3730      	adds	r7, #48	@ 0x30
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <handle_NodeStatus>:
// NOTE: All canard handlers and senders are based on this reference: https://dronecan.github.io/Specification/7._List_of_standard_data_types/
// Alternatively, you can look at the corresponding generated header file in the dsdlc_generated folder

// Canard Handlers ( Many have code copied from libcanard esc_node example: https://github.com/dronecan/libcanard/blob/master/examples/ESCNode/esc_node.c )

void handle_NodeStatus(CanardInstance *ins, CanardRxTransfer *transfer) {
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
	struct uavcan_protocol_NodeStatus nodeStatus;

	if (uavcan_protocol_NodeStatus_decode(transfer, &nodeStatus)) {
 8002646:	f107 030c 	add.w	r3, r7, #12
 800264a:	4619      	mov	r1, r3
 800264c:	6838      	ldr	r0, [r7, #0]
 800264e:	f000 ff53 	bl	80034f8 <uavcan_protocol_NodeStatus_decode>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d15d      	bne.n	8002714 <handle_NodeStatus+0xd8>
		return;
	}

	printf("Node health: %ud Node Mode: %ud\n", nodeStatus.health, nodeStatus.mode);
 8002658:	7c3b      	ldrb	r3, [r7, #16]
 800265a:	4619      	mov	r1, r3
 800265c:	7c7b      	ldrb	r3, [r7, #17]
 800265e:	461a      	mov	r2, r3
 8002660:	482e      	ldr	r0, [pc, #184]	@ (800271c <handle_NodeStatus+0xe0>)
 8002662:	f003 f827 	bl	80056b4 <iprintf>

	printf("Node Health ");
 8002666:	482e      	ldr	r0, [pc, #184]	@ (8002720 <handle_NodeStatus+0xe4>)
 8002668:	f003 f824 	bl	80056b4 <iprintf>

	switch (nodeStatus.health) {
 800266c:	7c3b      	ldrb	r3, [r7, #16]
 800266e:	2b03      	cmp	r3, #3
 8002670:	d81a      	bhi.n	80026a8 <handle_NodeStatus+0x6c>
 8002672:	a201      	add	r2, pc, #4	@ (adr r2, 8002678 <handle_NodeStatus+0x3c>)
 8002674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002678:	08002689 	.word	0x08002689
 800267c:	08002691 	.word	0x08002691
 8002680:	08002699 	.word	0x08002699
 8002684:	080026a1 	.word	0x080026a1
	case UAVCAN_PROTOCOL_NODESTATUS_HEALTH_OK:
		printf("OK\n");
 8002688:	4826      	ldr	r0, [pc, #152]	@ (8002724 <handle_NodeStatus+0xe8>)
 800268a:	f003 f883 	bl	8005794 <puts>
		break;
 800268e:	e00f      	b.n	80026b0 <handle_NodeStatus+0x74>
	case UAVCAN_PROTOCOL_NODESTATUS_HEALTH_WARNING:
		printf("WARNING\n");
 8002690:	4825      	ldr	r0, [pc, #148]	@ (8002728 <handle_NodeStatus+0xec>)
 8002692:	f003 f87f 	bl	8005794 <puts>
		break;
 8002696:	e00b      	b.n	80026b0 <handle_NodeStatus+0x74>
	case UAVCAN_PROTOCOL_NODESTATUS_HEALTH_ERROR:
		printf("ERROR\n");
 8002698:	4824      	ldr	r0, [pc, #144]	@ (800272c <handle_NodeStatus+0xf0>)
 800269a:	f003 f87b 	bl	8005794 <puts>
		break;
 800269e:	e007      	b.n	80026b0 <handle_NodeStatus+0x74>
	case UAVCAN_PROTOCOL_NODESTATUS_HEALTH_CRITICAL:
		printf("CRITICAL\n");
 80026a0:	4823      	ldr	r0, [pc, #140]	@ (8002730 <handle_NodeStatus+0xf4>)
 80026a2:	f003 f877 	bl	8005794 <puts>
		break;
 80026a6:	e003      	b.n	80026b0 <handle_NodeStatus+0x74>
	default:
		printf("UNKNOWN?\n");
 80026a8:	4822      	ldr	r0, [pc, #136]	@ (8002734 <handle_NodeStatus+0xf8>)
 80026aa:	f003 f873 	bl	8005794 <puts>
		break;
 80026ae:	bf00      	nop
	}

	printf("Node Mode ");
 80026b0:	4821      	ldr	r0, [pc, #132]	@ (8002738 <handle_NodeStatus+0xfc>)
 80026b2:	f002 ffff 	bl	80056b4 <iprintf>

	switch(nodeStatus.mode) {
 80026b6:	7c7b      	ldrb	r3, [r7, #17]
 80026b8:	2b07      	cmp	r3, #7
 80026ba:	d827      	bhi.n	800270c <handle_NodeStatus+0xd0>
 80026bc:	a201      	add	r2, pc, #4	@ (adr r2, 80026c4 <handle_NodeStatus+0x88>)
 80026be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026c2:	bf00      	nop
 80026c4:	080026e5 	.word	0x080026e5
 80026c8:	080026ed 	.word	0x080026ed
 80026cc:	080026f5 	.word	0x080026f5
 80026d0:	080026fd 	.word	0x080026fd
 80026d4:	0800270d 	.word	0x0800270d
 80026d8:	0800270d 	.word	0x0800270d
 80026dc:	0800270d 	.word	0x0800270d
 80026e0:	08002705 	.word	0x08002705
	case UAVCAN_PROTOCOL_NODESTATUS_MODE_OPERATIONAL:
		printf("OPERATIONAL\n");
 80026e4:	4815      	ldr	r0, [pc, #84]	@ (800273c <handle_NodeStatus+0x100>)
 80026e6:	f003 f855 	bl	8005794 <puts>
		break;
 80026ea:	e014      	b.n	8002716 <handle_NodeStatus+0xda>
	case UAVCAN_PROTOCOL_NODESTATUS_MODE_INITIALIZATION:
		printf("INITIALIZATION\n");
 80026ec:	4814      	ldr	r0, [pc, #80]	@ (8002740 <handle_NodeStatus+0x104>)
 80026ee:	f003 f851 	bl	8005794 <puts>
		break;
 80026f2:	e010      	b.n	8002716 <handle_NodeStatus+0xda>
	case UAVCAN_PROTOCOL_NODESTATUS_MODE_MAINTENANCE:
		printf("MAINTENANCE\n");
 80026f4:	4813      	ldr	r0, [pc, #76]	@ (8002744 <handle_NodeStatus+0x108>)
 80026f6:	f003 f84d 	bl	8005794 <puts>
		break;
 80026fa:	e00c      	b.n	8002716 <handle_NodeStatus+0xda>
	case UAVCAN_PROTOCOL_NODESTATUS_MODE_SOFTWARE_UPDATE:
		printf("SOFTWARE UPDATE\n");
 80026fc:	4812      	ldr	r0, [pc, #72]	@ (8002748 <handle_NodeStatus+0x10c>)
 80026fe:	f003 f849 	bl	8005794 <puts>
		break;
 8002702:	e008      	b.n	8002716 <handle_NodeStatus+0xda>
	case UAVCAN_PROTOCOL_NODESTATUS_MODE_OFFLINE:
		printf("OFFLINE\n");
 8002704:	4811      	ldr	r0, [pc, #68]	@ (800274c <handle_NodeStatus+0x110>)
 8002706:	f003 f845 	bl	8005794 <puts>
		break;
 800270a:	e004      	b.n	8002716 <handle_NodeStatus+0xda>
	default:
		printf("UNKNOWN?\n");
 800270c:	4809      	ldr	r0, [pc, #36]	@ (8002734 <handle_NodeStatus+0xf8>)
 800270e:	f003 f841 	bl	8005794 <puts>
		break;
 8002712:	e000      	b.n	8002716 <handle_NodeStatus+0xda>
		return;
 8002714:	bf00      	nop
	}
}
 8002716:	3718      	adds	r7, #24
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	0800654c 	.word	0x0800654c
 8002720:	08006570 	.word	0x08006570
 8002724:	08006580 	.word	0x08006580
 8002728:	08006584 	.word	0x08006584
 800272c:	0800658c 	.word	0x0800658c
 8002730:	08006594 	.word	0x08006594
 8002734:	080065a0 	.word	0x080065a0
 8002738:	080065ac 	.word	0x080065ac
 800273c:	080065b8 	.word	0x080065b8
 8002740:	080065c4 	.word	0x080065c4
 8002744:	080065d4 	.word	0x080065d4
 8002748:	080065e0 	.word	0x080065e0
 800274c:	080065f0 	.word	0x080065f0

08002750 <handle_NotifyState>:

void handle_NotifyState(CanardInstance *ins, CanardRxTransfer *transfer) {
 8002750:	b580      	push	{r7, lr}
 8002752:	b0c8      	sub	sp, #288	@ 0x120
 8002754:	af00      	add	r7, sp, #0
 8002756:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800275a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800275e:	6018      	str	r0, [r3, #0]
 8002760:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002764:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002768:	6019      	str	r1, [r3, #0]
	struct ardupilot_indication_NotifyState notifyState;

	if (ardupilot_indication_NotifyState_decode(transfer, &notifyState)) {
 800276a:	f107 0208 	add.w	r2, r7, #8
 800276e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002772:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002776:	4611      	mov	r1, r2
 8002778:	6818      	ldr	r0, [r3, #0]
 800277a:	f000 fc56 	bl	800302a <ardupilot_indication_NotifyState_decode>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d13b      	bne.n	80027fc <handle_NotifyState+0xac>
		return;
	}

	uint32_t nl = notifyState.vehicle_state & 0xFFFFFFFF;  // ignoring the last 32 bits for printing since the highest vehicle_state value right now is 23 even though they're allowed to be up to 64bit unsigned integer
 8002784:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002788:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800278c:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	@ 0x108
 8002790:	4613      	mov	r3, r2
 8002792:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

	printf("Vehicle State: %lu ", nl);
 8002796:	f8d7 1118 	ldr.w	r1, [r7, #280]	@ 0x118
 800279a:	481b      	ldr	r0, [pc, #108]	@ (8002808 <handle_NotifyState+0xb8>)
 800279c:	f002 ff8a 	bl	80056b4 <iprintf>

	if (notifyState.aux_data.len > 0) {
 80027a0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80027a4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80027a8:	785b      	ldrb	r3, [r3, #1]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d022      	beq.n	80027f4 <handle_NotifyState+0xa4>
		printf("Aux Data: 0x");
 80027ae:	4817      	ldr	r0, [pc, #92]	@ (800280c <handle_NotifyState+0xbc>)
 80027b0:	f002 ff80 	bl	80056b4 <iprintf>

		for (int i = 0; i < notifyState.aux_data.len; i++) {
 80027b4:	2300      	movs	r3, #0
 80027b6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80027ba:	e011      	b.n	80027e0 <handle_NotifyState+0x90>
			printf("%02x", notifyState.aux_data.data[i]);
 80027bc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80027c0:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 80027c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80027c8:	4413      	add	r3, r2
 80027ca:	3302      	adds	r3, #2
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	4619      	mov	r1, r3
 80027d0:	480f      	ldr	r0, [pc, #60]	@ (8002810 <handle_NotifyState+0xc0>)
 80027d2:	f002 ff6f 	bl	80056b4 <iprintf>
		for (int i = 0; i < notifyState.aux_data.len; i++) {
 80027d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80027da:	3301      	adds	r3, #1
 80027dc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80027e0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80027e4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80027e8:	785b      	ldrb	r3, [r3, #1]
 80027ea:	461a      	mov	r2, r3
 80027ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80027f0:	4293      	cmp	r3, r2
 80027f2:	dbe3      	blt.n	80027bc <handle_NotifyState+0x6c>
		}
	}

	printf("\n");
 80027f4:	200a      	movs	r0, #10
 80027f6:	f002 ff6f 	bl	80056d8 <putchar>
 80027fa:	e000      	b.n	80027fe <handle_NotifyState+0xae>
		return;
 80027fc:	bf00      	nop

}
 80027fe:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	080065f8 	.word	0x080065f8
 800280c:	0800660c 	.word	0x0800660c
 8002810:	0800661c 	.word	0x0800661c
 8002814:	00000000 	.word	0x00000000

08002818 <handle_GetNodeInfo>:

/*
  handle a GetNodeInfo request
*/
// TODO: All the data in here is temporary for testing. If actually need to send valid data, edit accordingly.
void handle_GetNodeInfo(CanardInstance *ins, CanardRxTransfer *transfer) {
 8002818:	b590      	push	{r4, r7, lr}
 800281a:	f5ad 7d4b 	sub.w	sp, sp, #812	@ 0x32c
 800281e:	af06      	add	r7, sp, #24
 8002820:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8002824:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8002828:	6018      	str	r0, [r3, #0]
 800282a:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 800282e:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8002832:	6019      	str	r1, [r3, #0]
	printf("GetNodeInfo request from %d\n", transfer->source_node_id);
 8002834:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8002838:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	7edb      	ldrb	r3, [r3, #27]
 8002840:	4619      	mov	r1, r3
 8002842:	484f      	ldr	r0, [pc, #316]	@ (8002980 <handle_GetNodeInfo+0x168>)
 8002844:	f002 ff36 	bl	80056b4 <iprintf>

	uint8_t buffer[UAVCAN_PROTOCOL_GETNODEINFO_RESPONSE_MAX_SIZE];
	struct uavcan_protocol_GetNodeInfoResponse pkt;

	memset(&pkt, 0, sizeof(pkt));
 8002848:	f107 0308 	add.w	r3, r7, #8
 800284c:	f44f 72c4 	mov.w	r2, #392	@ 0x188
 8002850:	2100      	movs	r1, #0
 8002852:	4618      	mov	r0, r3
 8002854:	f003 f87e 	bl	8005954 <memset>

	node_status.uptime_sec = HAL_GetTick() / 1000ULL;
 8002858:	f000 fee2 	bl	8003620 <HAL_GetTick>
 800285c:	4603      	mov	r3, r0
 800285e:	4a49      	ldr	r2, [pc, #292]	@ (8002984 <handle_GetNodeInfo+0x16c>)
 8002860:	fba2 2303 	umull	r2, r3, r2, r3
 8002864:	099b      	lsrs	r3, r3, #6
 8002866:	4a48      	ldr	r2, [pc, #288]	@ (8002988 <handle_GetNodeInfo+0x170>)
 8002868:	6013      	str	r3, [r2, #0]
	pkt.status = node_status;
 800286a:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 800286e:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8002872:	4a45      	ldr	r2, [pc, #276]	@ (8002988 <handle_GetNodeInfo+0x170>)
 8002874:	ca07      	ldmia	r2, {r0, r1, r2}
 8002876:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	// fill in your major and minor firmware version
	pkt.software_version.major = 1;
 800287a:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 800287e:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8002882:	2201      	movs	r2, #1
 8002884:	741a      	strb	r2, [r3, #16]
	pkt.software_version.minor = 0;
 8002886:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 800288a:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 800288e:	2200      	movs	r2, #0
 8002890:	745a      	strb	r2, [r3, #17]
	pkt.software_version.optional_field_flags = 0;
 8002892:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8002896:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 800289a:	2200      	movs	r2, #0
 800289c:	749a      	strb	r2, [r3, #18]
	pkt.software_version.vcs_commit = 0; // should put git hash in here
 800289e:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 80028a2:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 80028a6:	2200      	movs	r2, #0
 80028a8:	615a      	str	r2, [r3, #20]

	// should fill in hardware version
	pkt.hardware_version.major = 1;
 80028aa:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 80028ae:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2020 	strb.w	r2, [r3, #32]
	pkt.hardware_version.minor = 0;
 80028b8:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 80028bc:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	// just setting all 16 bytes to 1 for testing
	getUniqueID(pkt.hardware_version.unique_id);
 80028c6:	f107 0308 	add.w	r3, r7, #8
 80028ca:	3322      	adds	r3, #34	@ 0x22
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff fd73 	bl	80023b8 <getUniqueID>

	strncpy((char*)pkt.name.data, "SERVONode", sizeof(pkt.name.data));
 80028d2:	f107 0308 	add.w	r3, r7, #8
 80028d6:	f203 1333 	addw	r3, r3, #307	@ 0x133
 80028da:	2250      	movs	r2, #80	@ 0x50
 80028dc:	492b      	ldr	r1, [pc, #172]	@ (800298c <handle_GetNodeInfo+0x174>)
 80028de:	4618      	mov	r0, r3
 80028e0:	f003 f840 	bl	8005964 <strncpy>
	pkt.name.len = strnlen((char*)pkt.name.data, sizeof(pkt.name.data));
 80028e4:	f107 0308 	add.w	r3, r7, #8
 80028e8:	f203 1333 	addw	r3, r3, #307	@ 0x133
 80028ec:	2150      	movs	r1, #80	@ 0x50
 80028ee:	4618      	mov	r0, r3
 80028f0:	f003 f84b 	bl	800598a <strnlen>
 80028f4:	4603      	mov	r3, r0
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 80028fc:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8002900:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132

	uint16_t total_size = uavcan_protocol_GetNodeInfoResponse_encode(&pkt, buffer);
 8002904:	f507 72ca 	add.w	r2, r7, #404	@ 0x194
 8002908:	f107 0308 	add.w	r3, r7, #8
 800290c:	4611      	mov	r1, r2
 800290e:	4618      	mov	r0, r3
 8002910:	f000 fd18 	bl	8003344 <uavcan_protocol_GetNodeInfoResponse_encode>
 8002914:	4603      	mov	r3, r0
 8002916:	f8a7 330e 	strh.w	r3, [r7, #782]	@ 0x30e

	canardRequestOrRespond(ins,
 800291a:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 800291e:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	7edc      	ldrb	r4, [r3, #27]
 8002926:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 800292a:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	3319      	adds	r3, #25
 8002932:	f507 7244 	add.w	r2, r7, #784	@ 0x310
 8002936:	f5a2 7244 	sub.w	r2, r2, #784	@ 0x310
 800293a:	6812      	ldr	r2, [r2, #0]
 800293c:	7e92      	ldrb	r2, [r2, #26]
 800293e:	f507 7144 	add.w	r1, r7, #784	@ 0x310
 8002942:	f5a1 7043 	sub.w	r0, r1, #780	@ 0x30c
 8002946:	f8b7 130e 	ldrh.w	r1, [r7, #782]	@ 0x30e
 800294a:	9105      	str	r1, [sp, #20]
 800294c:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8002950:	9104      	str	r1, [sp, #16]
 8002952:	2100      	movs	r1, #0
 8002954:	9103      	str	r1, [sp, #12]
 8002956:	9202      	str	r2, [sp, #8]
 8002958:	9301      	str	r3, [sp, #4]
 800295a:	2301      	movs	r3, #1
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	a306      	add	r3, pc, #24	@ (adr r3, 8002978 <handle_GetNodeInfo+0x160>)
 8002960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002964:	4621      	mov	r1, r4
 8002966:	6800      	ldr	r0, [r0, #0]
 8002968:	f7fd fe64 	bl	8000634 <canardRequestOrRespond>
						   &transfer->transfer_id,
						   transfer->priority,
						   CanardResponse,
						   &buffer[0],
						   total_size);
}
 800296c:	bf00      	nop
 800296e:	f507 7745 	add.w	r7, r7, #788	@ 0x314
 8002972:	46bd      	mov	sp, r7
 8002974:	bd90      	pop	{r4, r7, pc}
 8002976:	bf00      	nop
 8002978:	21c46a9e 	.word	0x21c46a9e
 800297c:	ee468a81 	.word	0xee468a81
 8002980:	08006624 	.word	0x08006624
 8002984:	10624dd3 	.word	0x10624dd3
 8002988:	200004d8 	.word	0x200004d8
 800298c:	08006644 	.word	0x08006644

08002990 <send_NodeStatus>:

/*
  send the 1Hz NodeStatus message. This is what allows a node to show
  up in the DroneCAN GUI tool and in the flight controller logs
 */
void send_NodeStatus(void) {
 8002990:	b580      	push	{r7, lr}
 8002992:	b0e6      	sub	sp, #408	@ 0x198
 8002994:	af06      	add	r7, sp, #24
    uint8_t buffer[UAVCAN_PROTOCOL_GETNODEINFO_RESPONSE_MAX_SIZE];

    node_status.uptime_sec = HAL_GetTick() / 1000UL;
 8002996:	f000 fe43 	bl	8003620 <HAL_GetTick>
 800299a:	4603      	mov	r3, r0
 800299c:	4a1a      	ldr	r2, [pc, #104]	@ (8002a08 <send_NodeStatus+0x78>)
 800299e:	fba2 2303 	umull	r2, r3, r2, r3
 80029a2:	099b      	lsrs	r3, r3, #6
 80029a4:	4a19      	ldr	r2, [pc, #100]	@ (8002a0c <send_NodeStatus+0x7c>)
 80029a6:	6013      	str	r3, [r2, #0]
    node_status.health = UAVCAN_PROTOCOL_NODESTATUS_HEALTH_OK;
 80029a8:	4b18      	ldr	r3, [pc, #96]	@ (8002a0c <send_NodeStatus+0x7c>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	711a      	strb	r2, [r3, #4]
    node_status.mode = UAVCAN_PROTOCOL_NODESTATUS_MODE_OPERATIONAL;
 80029ae:	4b17      	ldr	r3, [pc, #92]	@ (8002a0c <send_NodeStatus+0x7c>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	715a      	strb	r2, [r3, #5]
    node_status.sub_mode = 0;
 80029b4:	4b15      	ldr	r3, [pc, #84]	@ (8002a0c <send_NodeStatus+0x7c>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	719a      	strb	r2, [r3, #6]

    // put whatever you like in here for display in GUI
    node_status.vendor_specific_status_code = 1234;
 80029ba:	4b14      	ldr	r3, [pc, #80]	@ (8002a0c <send_NodeStatus+0x7c>)
 80029bc:	f240 42d2 	movw	r2, #1234	@ 0x4d2
 80029c0:	811a      	strh	r2, [r3, #8]

    uint32_t len = uavcan_protocol_NodeStatus_encode(&node_status, buffer);
 80029c2:	463b      	mov	r3, r7
 80029c4:	4619      	mov	r1, r3
 80029c6:	4811      	ldr	r0, [pc, #68]	@ (8002a0c <send_NodeStatus+0x7c>)
 80029c8:	f000 fd7c 	bl	80034c4 <uavcan_protocol_NodeStatus_encode>
 80029cc:	f8c7 017c 	str.w	r0, [r7, #380]	@ 0x17c
    // we need a static variable for the transfer ID. This is
    // incremeneted on each transfer, allowing for detection of packet
    // loss
    static uint8_t transfer_id;

    canardBroadcast(&canard,
 80029d0:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	9304      	str	r3, [sp, #16]
 80029d8:	463b      	mov	r3, r7
 80029da:	9303      	str	r3, [sp, #12]
 80029dc:	2318      	movs	r3, #24
 80029de:	9302      	str	r3, [sp, #8]
 80029e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002a10 <send_NodeStatus+0x80>)
 80029e2:	9301      	str	r3, [sp, #4]
 80029e4:	f240 1355 	movw	r3, #341	@ 0x155
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	a305      	add	r3, pc, #20	@ (adr r3, 8002a00 <send_NodeStatus+0x70>)
 80029ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f0:	4808      	ldr	r0, [pc, #32]	@ (8002a14 <send_NodeStatus+0x84>)
 80029f2:	f7fd fd19 	bl	8000428 <canardBroadcast>
                    UAVCAN_PROTOCOL_NODESTATUS_ID,
                    &transfer_id,
                    CANARD_TRANSFER_PRIORITY_LOW,
                    buffer,
                    len);
}
 80029f6:	bf00      	nop
 80029f8:	f507 77c0 	add.w	r7, r7, #384	@ 0x180
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	c1a7c6f1 	.word	0xc1a7c6f1
 8002a04:	0f0868d0 	.word	0x0f0868d0
 8002a08:	10624dd3 	.word	0x10624dd3
 8002a0c:	200004d8 	.word	0x200004d8
 8002a10:	200004e4 	.word	0x200004e4
 8002a14:	200000ac 	.word	0x200000ac

08002a18 <shouldAcceptTransfer>:
bool shouldAcceptTransfer(const CanardInstance *ins,
                                 uint64_t *out_data_type_signature,
                                 uint16_t data_type_id,
                                 CanardTransferType transfer_type,
                                 uint8_t source_node_id)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	4611      	mov	r1, r2
 8002a24:	461a      	mov	r2, r3
 8002a26:	460b      	mov	r3, r1
 8002a28:	80fb      	strh	r3, [r7, #6]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	717b      	strb	r3, [r7, #5]
	if (transfer_type == CanardTransferTypeRequest) {
 8002a2e:	797b      	ldrb	r3, [r7, #5]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d10a      	bne.n	8002a4a <shouldAcceptTransfer+0x32>
	// check if we want to handle a specific service request
		switch (data_type_id) {
 8002a34:	88fb      	ldrh	r3, [r7, #6]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d107      	bne.n	8002a4a <shouldAcceptTransfer+0x32>
		case UAVCAN_PROTOCOL_GETNODEINFO_ID: {
			*out_data_type_signature = UAVCAN_PROTOCOL_GETNODEINFO_REQUEST_SIGNATURE;
 8002a3a:	68b9      	ldr	r1, [r7, #8]
 8002a3c:	a316      	add	r3, pc, #88	@ (adr r3, 8002a98 <shouldAcceptTransfer+0x80>)
 8002a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a42:	e9c1 2300 	strd	r2, r3, [r1]
			return true;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e01f      	b.n	8002a8a <shouldAcceptTransfer+0x72>
		}
		}
	}
	if (transfer_type == CanardTransferTypeResponse) {
 8002a4a:	797b      	ldrb	r3, [r7, #5]
 8002a4c:	2b00      	cmp	r3, #0
		// check if we want to handle a specific service request
		switch (data_type_id) {
		}
	}
	if (transfer_type == CanardTransferTypeBroadcast) {
 8002a4e:	797b      	ldrb	r3, [r7, #5]
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d119      	bne.n	8002a88 <shouldAcceptTransfer+0x70>
		// see if we want to handle a specific broadcast packet
		switch (data_type_id) {
 8002a54:	88fb      	ldrh	r3, [r7, #6]
 8002a56:	f240 1255 	movw	r2, #341	@ 0x155
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d004      	beq.n	8002a68 <shouldAcceptTransfer+0x50>
 8002a5e:	f644 6227 	movw	r2, #20007	@ 0x4e27
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d008      	beq.n	8002a78 <shouldAcceptTransfer+0x60>
 8002a66:	e00f      	b.n	8002a88 <shouldAcceptTransfer+0x70>
		case UAVCAN_PROTOCOL_NODESTATUS_ID: {
			*out_data_type_signature = UAVCAN_PROTOCOL_NODESTATUS_SIGNATURE;
 8002a68:	68b9      	ldr	r1, [r7, #8]
 8002a6a:	a30d      	add	r3, pc, #52	@ (adr r3, 8002aa0 <shouldAcceptTransfer+0x88>)
 8002a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a70:	e9c1 2300 	strd	r2, r3, [r1]
			return true;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e008      	b.n	8002a8a <shouldAcceptTransfer+0x72>
		}
		case ARDUPILOT_INDICATION_NOTIFYSTATE_ID: {
			*out_data_type_signature = ARDUPILOT_INDICATION_NOTIFYSTATE_SIGNATURE;
 8002a78:	68b9      	ldr	r1, [r7, #8]
 8002a7a:	a30b      	add	r3, pc, #44	@ (adr r3, 8002aa8 <shouldAcceptTransfer+0x90>)
 8002a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a80:	e9c1 2300 	strd	r2, r3, [r1]
			return true;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e000      	b.n	8002a8a <shouldAcceptTransfer+0x72>
		}
		}
	}
	// we don't want any other messages
	return false;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3714      	adds	r7, #20
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	21c46a9e 	.word	0x21c46a9e
 8002a9c:	ee468a81 	.word	0xee468a81
 8002aa0:	c1a7c6f1 	.word	0xc1a7c6f1
 8002aa4:	0f0868d0 	.word	0x0f0868d0
 8002aa8:	1651fdec 	.word	0x1651fdec
 8002aac:	631f2a9c 	.word	0x631f2a9c

08002ab0 <onTransferReceived>:

void onTransferReceived(CanardInstance *ins, CanardRxTransfer *transfer) {
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
//		for (int i = 0; i < transfer->payload_len; i++) {
//			printf("%02x", transfer->payload_head[i]);
//		}
//
//		printf("\n");
	if (transfer->transfer_type == CanardTransferTypeRequest) {
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	7e1b      	ldrb	r3, [r3, #24]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d108      	bne.n	8002ad4 <onTransferReceived+0x24>
		// check if we want to handle a specific service request
		switch (transfer->data_type_id) {
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	8adb      	ldrh	r3, [r3, #22]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d104      	bne.n	8002ad4 <onTransferReceived+0x24>
		case UAVCAN_PROTOCOL_GETNODEINFO_ID: {
			handle_GetNodeInfo(ins, transfer);
 8002aca:	6839      	ldr	r1, [r7, #0]
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f7ff fea3 	bl	8002818 <handle_GetNodeInfo>
			break;
 8002ad2:	bf00      	nop
		}
		}
	}
	if (transfer->transfer_type == CanardTransferTypeResponse) {
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	7e1b      	ldrb	r3, [r3, #24]
 8002ad8:	2b00      	cmp	r3, #0
		switch (transfer->data_type_id) {
		}
	}
	if (transfer->transfer_type == CanardTransferTypeBroadcast) {
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	7e1b      	ldrb	r3, [r3, #24]
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d114      	bne.n	8002b0c <onTransferReceived+0x5c>
		// check if we want to handle a specific broadcast message
		switch (transfer->data_type_id) {
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	8adb      	ldrh	r3, [r3, #22]
 8002ae6:	f240 1255 	movw	r2, #341	@ 0x155
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d004      	beq.n	8002af8 <onTransferReceived+0x48>
 8002aee:	f644 6227 	movw	r2, #20007	@ 0x4e27
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d005      	beq.n	8002b02 <onTransferReceived+0x52>
			handle_NotifyState(ins, transfer);
			break;
		}
		}
	}
}
 8002af6:	e009      	b.n	8002b0c <onTransferReceived+0x5c>
			handle_NodeStatus(ins, transfer);
 8002af8:	6839      	ldr	r1, [r7, #0]
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f7ff fd9e 	bl	800263c <handle_NodeStatus>
			break;
 8002b00:	e004      	b.n	8002b0c <onTransferReceived+0x5c>
			handle_NotifyState(ins, transfer);
 8002b02:	6839      	ldr	r1, [r7, #0]
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f7ff fe23 	bl	8002750 <handle_NotifyState>
			break;
 8002b0a:	bf00      	nop
}
 8002b0c:	bf00      	nop
 8002b0e:	3708      	adds	r7, #8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <processCanardTxQueue>:

// Processes the canard Tx queue and attempts to transmit the messages
// Call this function very often to check if there are any Tx to process
// Calling it once every cycle of the while(1) loop is not a bad idea
void processCanardTxQueue(CAN_HandleTypeDef *hcan) {
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
	// Transmitting

	for (const CanardCANFrame *tx_frame ; (tx_frame = canardPeekTxQueue(&canard)) != NULL;) {
 8002b1c:	e01a      	b.n	8002b54 <processCanardTxQueue+0x40>
		const int16_t tx_res = canardSTM32Transmit(hcan, tx_frame);
 8002b1e:	68f9      	ldr	r1, [r7, #12]
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f7ff fbf6 	bl	8002312 <canardSTM32Transmit>
 8002b26:	4603      	mov	r3, r0
 8002b28:	817b      	strh	r3, [r7, #10]

		if (tx_res <= 0) {
 8002b2a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	dc06      	bgt.n	8002b40 <processCanardTxQueue+0x2c>
			printf("Transmit error %d\n", tx_res);
 8002b32:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002b36:	4619      	mov	r1, r3
 8002b38:	480c      	ldr	r0, [pc, #48]	@ (8002b6c <processCanardTxQueue+0x58>)
 8002b3a:	f002 fdbb 	bl	80056b4 <iprintf>
 8002b3e:	e006      	b.n	8002b4e <processCanardTxQueue+0x3a>
		} else if (tx_res > 0) {
 8002b40:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	dd02      	ble.n	8002b4e <processCanardTxQueue+0x3a>
			printf("Successfully transmitted message\n");
 8002b48:	4809      	ldr	r0, [pc, #36]	@ (8002b70 <processCanardTxQueue+0x5c>)
 8002b4a:	f002 fe23 	bl	8005794 <puts>
		}

		// Pop canardTxQueue either way
		canardPopTxQueue(&canard);
 8002b4e:	4809      	ldr	r0, [pc, #36]	@ (8002b74 <processCanardTxQueue+0x60>)
 8002b50:	f7fd fe0b 	bl	800076a <canardPopTxQueue>
	for (const CanardCANFrame *tx_frame ; (tx_frame = canardPeekTxQueue(&canard)) != NULL;) {
 8002b54:	4807      	ldr	r0, [pc, #28]	@ (8002b74 <processCanardTxQueue+0x60>)
 8002b56:	f7fd fdf5 	bl	8000744 <canardPeekTxQueue>
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1dd      	bne.n	8002b1e <processCanardTxQueue+0xa>
	}
}
 8002b62:	bf00      	nop
 8002b64:	bf00      	nop
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	08006650 	.word	0x08006650
 8002b70:	08006664 	.word	0x08006664
 8002b74:	200000ac 	.word	0x200000ac

08002b78 <process1HzTasks>:

/*
  This function is called at 1 Hz rate from the main loop.
*/
void process1HzTasks(uint64_t timestamp_usec) {
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	e9c7 0100 	strd	r0, r1, [r7]
    /*
      Purge transfers that are no longer transmitted. This can free up some memory
    */
    canardCleanupStaleTransfers(&canard, timestamp_usec);
 8002b82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b86:	4804      	ldr	r0, [pc, #16]	@ (8002b98 <process1HzTasks+0x20>)
 8002b88:	f7fe f9a2 	bl	8000ed0 <canardCleanupStaleTransfers>

    /*
      Transmit the node status message
    */
    send_NodeStatus();
 8002b8c:	f7ff ff00 	bl	8002990 <send_NodeStatus>
}
 8002b90:	bf00      	nop
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	200000ac 	.word	0x200000ac

08002b9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ba0:	b086      	sub	sp, #24
 8002ba2:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ba4:	f000 fccc 	bl	8003540 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ba8:	f000 f850 	bl	8002c4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002bac:	f7ff fc28 	bl	8002400 <MX_GPIO_Init>
  MX_CAN1_Init();
 8002bb0:	f7fd fb5e 	bl	8000270 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  setupCANFilter(&hcan1);
 8002bb4:	4820      	ldr	r0, [pc, #128]	@ (8002c38 <main+0x9c>)
 8002bb6:	f7ff fd1f 	bl	80025f8 <setupCANFilter>
  HAL_CAN_Start(&hcan1);
 8002bba:	481f      	ldr	r0, [pc, #124]	@ (8002c38 <main+0x9c>)
 8002bbc:	f000 ff25 	bl	8003a0a <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002bc0:	2102      	movs	r1, #2
 8002bc2:	481d      	ldr	r0, [pc, #116]	@ (8002c38 <main+0x9c>)
 8002bc4:	f001 f957 	bl	8003e76 <HAL_CAN_ActivateNotification>

  canardInit(&canard,
 8002bc8:	2300      	movs	r3, #0
 8002bca:	9301      	str	r3, [sp, #4]
 8002bcc:	4b1b      	ldr	r3, [pc, #108]	@ (8002c3c <main+0xa0>)
 8002bce:	9300      	str	r3, [sp, #0]
 8002bd0:	4b1b      	ldr	r3, [pc, #108]	@ (8002c40 <main+0xa4>)
 8002bd2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002bd6:	491b      	ldr	r1, [pc, #108]	@ (8002c44 <main+0xa8>)
 8002bd8:	481b      	ldr	r0, [pc, #108]	@ (8002c48 <main+0xac>)
 8002bda:	f7fd fbcb 	bl	8000374 <canardInit>
			  NULL);

  // Could use DNA (Dynamic Node Allocation) by following example in esc_node.c but that requires a lot of setup and I'm not too sure of what advantage it brings
  // Instead, set a different NODE_ID for each device on the CAN bus by configuring node_settings
  if (NODE_ID > 0) {
	  canardSetLocalNodeID(&canard, NODE_ID);
 8002bde:	2101      	movs	r1, #1
 8002be0:	4819      	ldr	r0, [pc, #100]	@ (8002c48 <main+0xac>)
 8002be2:	f7fd fbfb 	bl	80003dc <canardSetLocalNodeID>
  } else {
	  printf("Node ID is 0, this node is anonymous and can't transmit most messaged. Please update this in node_settings.h\n");
  }

  uint64_t next_1hz_service_at = HAL_GetTick();
 8002be6:	f000 fd1b 	bl	8003620 <HAL_GetTick>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2200      	movs	r2, #0
 8002bee:	469a      	mov	sl, r3
 8002bf0:	4693      	mov	fp, r2
 8002bf2:	e9c7 ab02 	strd	sl, fp, [r7, #8]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	const uint64_t ts = HAL_GetTick();
 8002bf6:	f000 fd13 	bl	8003620 <HAL_GetTick>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	4698      	mov	r8, r3
 8002c00:	4691      	mov	r9, r2
 8002c02:	e9c7 8900 	strd	r8, r9, [r7]

	if (ts >= next_1hz_service_at){
 8002c06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002c0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c0e:	4290      	cmp	r0, r2
 8002c10:	eb71 0303 	sbcs.w	r3, r1, r3
 8002c14:	d30b      	bcc.n	8002c2e <main+0x92>
	  next_1hz_service_at += 1000ULL;
 8002c16:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c1a:	f512 747a 	adds.w	r4, r2, #1000	@ 0x3e8
 8002c1e:	f143 0500 	adc.w	r5, r3, #0
 8002c22:	e9c7 4502 	strd	r4, r5, [r7, #8]
	  process1HzTasks(ts);
 8002c26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002c2a:	f7ff ffa5 	bl	8002b78 <process1HzTasks>
	}

	processCanardTxQueue(&hcan1);
 8002c2e:	4802      	ldr	r0, [pc, #8]	@ (8002c38 <main+0x9c>)
 8002c30:	f7ff ff70 	bl	8002b14 <processCanardTxQueue>
  {
 8002c34:	e7df      	b.n	8002bf6 <main+0x5a>
 8002c36:	bf00      	nop
 8002c38:	20000084 	.word	0x20000084
 8002c3c:	08002a19 	.word	0x08002a19
 8002c40:	08002ab1 	.word	0x08002ab1
 8002c44:	200000d8 	.word	0x200000d8
 8002c48:	200000ac 	.word	0x200000ac

08002c4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b096      	sub	sp, #88	@ 0x58
 8002c50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c52:	f107 0314 	add.w	r3, r7, #20
 8002c56:	2244      	movs	r2, #68	@ 0x44
 8002c58:	2100      	movs	r1, #0
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f002 fe7a 	bl	8005954 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c60:	463b      	mov	r3, r7
 8002c62:	2200      	movs	r2, #0
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	605a      	str	r2, [r3, #4]
 8002c68:	609a      	str	r2, [r3, #8]
 8002c6a:	60da      	str	r2, [r3, #12]
 8002c6c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002c6e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002c72:	f001 fe07 	bl	8004884 <HAL_PWREx_ControlVoltageScaling>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002c7c:	f000 f837 	bl	8002cee <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c80:	2302      	movs	r3, #2
 8002c82:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c88:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c8a:	2310      	movs	r3, #16
 8002c8c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c8e:	2302      	movs	r3, #2
 8002c90:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c92:	2302      	movs	r3, #2
 8002c94:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002c96:	2301      	movs	r3, #1
 8002c98:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002c9a:	230a      	movs	r3, #10
 8002c9c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002c9e:	2307      	movs	r3, #7
 8002ca0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002caa:	f107 0314 	add.w	r3, r7, #20
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f001 fe3e 	bl	8004930 <HAL_RCC_OscConfig>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002cba:	f000 f818 	bl	8002cee <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002cbe:	230f      	movs	r3, #15
 8002cc0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002cd2:	463b      	mov	r3, r7
 8002cd4:	2104      	movs	r1, #4
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f002 fa3e 	bl	8005158 <HAL_RCC_ClockConfig>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002ce2:	f000 f804 	bl	8002cee <Error_Handler>
  }
}
 8002ce6:	bf00      	nop
 8002ce8:	3758      	adds	r7, #88	@ 0x58
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cf2:	b672      	cpsid	i
}
 8002cf4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002cf6:	bf00      	nop
 8002cf8:	e7fd      	b.n	8002cf6 <Error_Handler+0x8>
	...

08002cfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d02:	4b0f      	ldr	r3, [pc, #60]	@ (8002d40 <HAL_MspInit+0x44>)
 8002d04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d06:	4a0e      	ldr	r2, [pc, #56]	@ (8002d40 <HAL_MspInit+0x44>)
 8002d08:	f043 0301 	orr.w	r3, r3, #1
 8002d0c:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d0e:	4b0c      	ldr	r3, [pc, #48]	@ (8002d40 <HAL_MspInit+0x44>)
 8002d10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	607b      	str	r3, [r7, #4]
 8002d18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d1a:	4b09      	ldr	r3, [pc, #36]	@ (8002d40 <HAL_MspInit+0x44>)
 8002d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d1e:	4a08      	ldr	r2, [pc, #32]	@ (8002d40 <HAL_MspInit+0x44>)
 8002d20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d24:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d26:	4b06      	ldr	r3, [pc, #24]	@ (8002d40 <HAL_MspInit+0x44>)
 8002d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d2e:	603b      	str	r3, [r7, #0]
 8002d30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	40021000 	.word	0x40021000

08002d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d48:	bf00      	nop
 8002d4a:	e7fd      	b.n	8002d48 <NMI_Handler+0x4>

08002d4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d50:	bf00      	nop
 8002d52:	e7fd      	b.n	8002d50 <HardFault_Handler+0x4>

08002d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d58:	bf00      	nop
 8002d5a:	e7fd      	b.n	8002d58 <MemManage_Handler+0x4>

08002d5c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d60:	bf00      	nop
 8002d62:	e7fd      	b.n	8002d60 <BusFault_Handler+0x4>

08002d64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d68:	bf00      	nop
 8002d6a:	e7fd      	b.n	8002d68 <UsageFault_Handler+0x4>

08002d6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d70:	bf00      	nop
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d7e:	bf00      	nop
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d8c:	bf00      	nop
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d9a:	f000 fc2d 	bl	80035f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d9e:	bf00      	nop
 8002da0:	bd80      	pop	{r7, pc}
	...

08002da4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002da8:	4802      	ldr	r0, [pc, #8]	@ (8002db4 <CAN1_RX0_IRQHandler+0x10>)
 8002daa:	f001 f88a 	bl	8003ec2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002dae:	bf00      	nop
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	20000084 	.word	0x20000084

08002db8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	617b      	str	r3, [r7, #20]
 8002dc8:	e00a      	b.n	8002de0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002dca:	f3af 8000 	nop.w
 8002dce:	4601      	mov	r1, r0
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	1c5a      	adds	r2, r3, #1
 8002dd4:	60ba      	str	r2, [r7, #8]
 8002dd6:	b2ca      	uxtb	r2, r1
 8002dd8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	3301      	adds	r3, #1
 8002dde:	617b      	str	r3, [r7, #20]
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	dbf0      	blt.n	8002dca <_read+0x12>
  }

  return len;
 8002de8:	687b      	ldr	r3, [r7, #4]
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b086      	sub	sp, #24
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	60f8      	str	r0, [r7, #12]
 8002dfa:	60b9      	str	r1, [r7, #8]
 8002dfc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dfe:	2300      	movs	r3, #0
 8002e00:	617b      	str	r3, [r7, #20]
 8002e02:	e009      	b.n	8002e18 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	1c5a      	adds	r2, r3, #1
 8002e08:	60ba      	str	r2, [r7, #8]
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	3301      	adds	r3, #1
 8002e16:	617b      	str	r3, [r7, #20]
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	dbf1      	blt.n	8002e04 <_write+0x12>
  }
  return len;
 8002e20:	687b      	ldr	r3, [r7, #4]
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3718      	adds	r7, #24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <_close>:

int _close(int file)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e42:	b480      	push	{r7}
 8002e44:	b083      	sub	sp, #12
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
 8002e4a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e52:	605a      	str	r2, [r3, #4]
  return 0;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <_isatty>:

int _isatty(int file)
{
 8002e62:	b480      	push	{r7}
 8002e64:	b083      	sub	sp, #12
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e6a:	2301      	movs	r3, #1
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3714      	adds	r7, #20
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
	...

08002e94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e9c:	4a14      	ldr	r2, [pc, #80]	@ (8002ef0 <_sbrk+0x5c>)
 8002e9e:	4b15      	ldr	r3, [pc, #84]	@ (8002ef4 <_sbrk+0x60>)
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ea8:	4b13      	ldr	r3, [pc, #76]	@ (8002ef8 <_sbrk+0x64>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d102      	bne.n	8002eb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002eb0:	4b11      	ldr	r3, [pc, #68]	@ (8002ef8 <_sbrk+0x64>)
 8002eb2:	4a12      	ldr	r2, [pc, #72]	@ (8002efc <_sbrk+0x68>)
 8002eb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002eb6:	4b10      	ldr	r3, [pc, #64]	@ (8002ef8 <_sbrk+0x64>)
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d207      	bcs.n	8002ed4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ec4:	f002 fdb4 	bl	8005a30 <__errno>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	220c      	movs	r2, #12
 8002ecc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ece:	f04f 33ff 	mov.w	r3, #4294967295
 8002ed2:	e009      	b.n	8002ee8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ed4:	4b08      	ldr	r3, [pc, #32]	@ (8002ef8 <_sbrk+0x64>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002eda:	4b07      	ldr	r3, [pc, #28]	@ (8002ef8 <_sbrk+0x64>)
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	4a05      	ldr	r2, [pc, #20]	@ (8002ef8 <_sbrk+0x64>)
 8002ee4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3718      	adds	r7, #24
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	2000c000 	.word	0x2000c000
 8002ef4:	00000400 	.word	0x00000400
 8002ef8:	200004e8 	.word	0x200004e8
 8002efc:	20000640 	.word	0x20000640

08002f00 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002f04:	4b06      	ldr	r3, [pc, #24]	@ (8002f20 <SystemInit+0x20>)
 8002f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f0a:	4a05      	ldr	r2, [pc, #20]	@ (8002f20 <SystemInit+0x20>)
 8002f0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002f14:	bf00      	nop
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	e000ed00 	.word	0xe000ed00

08002f24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002f24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f5c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002f28:	f7ff ffea 	bl	8002f00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f2c:	480c      	ldr	r0, [pc, #48]	@ (8002f60 <LoopForever+0x6>)
  ldr r1, =_edata
 8002f2e:	490d      	ldr	r1, [pc, #52]	@ (8002f64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f30:	4a0d      	ldr	r2, [pc, #52]	@ (8002f68 <LoopForever+0xe>)
  movs r3, #0
 8002f32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f34:	e002      	b.n	8002f3c <LoopCopyDataInit>

08002f36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f3a:	3304      	adds	r3, #4

08002f3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f40:	d3f9      	bcc.n	8002f36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f42:	4a0a      	ldr	r2, [pc, #40]	@ (8002f6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f44:	4c0a      	ldr	r4, [pc, #40]	@ (8002f70 <LoopForever+0x16>)
  movs r3, #0
 8002f46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f48:	e001      	b.n	8002f4e <LoopFillZerobss>

08002f4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f4c:	3204      	adds	r2, #4

08002f4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f50:	d3fb      	bcc.n	8002f4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f52:	f002 fd73 	bl	8005a3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002f56:	f7ff fe21 	bl	8002b9c <main>

08002f5a <LoopForever>:

LoopForever:
    b LoopForever
 8002f5a:	e7fe      	b.n	8002f5a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002f5c:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8002f60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f64:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002f68:	0800670c 	.word	0x0800670c
  ldr r2, =_sbss
 8002f6c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002f70:	2000063c 	.word	0x2000063c

08002f74 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f74:	e7fe      	b.n	8002f74 <ADC1_IRQHandler>

08002f76 <_ardupilot_indication_NotifyState_decode>:
}

/*
 decode ardupilot_indication_NotifyState, return true on failure, false on success
*/
bool _ardupilot_indication_NotifyState_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct ardupilot_indication_NotifyState* msg, bool tao) {
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b088      	sub	sp, #32
 8002f7a:	af02      	add	r7, sp, #8
 8002f7c:	60f8      	str	r0, [r7, #12]
 8002f7e:	60b9      	str	r1, [r7, #8]
 8002f80:	607a      	str	r2, [r7, #4]
 8002f82:	70fb      	strb	r3, [r7, #3]





    canardDecodeScalar(transfer, *bit_ofs, 8, false, &msg->aux_data_type);
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	6819      	ldr	r1, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	2208      	movs	r2, #8
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f7fe f809 	bl	8000fa8 <canardDecodeScalar>

    *bit_ofs += 8;
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f103 0208 	add.w	r2, r3, #8
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 8, false, &msg->aux_data.len);
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	6819      	ldr	r1, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	9300      	str	r3, [sp, #0]
 8002fac:	2300      	movs	r3, #0
 8002fae:	2208      	movs	r2, #8
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f7fd fff9 	bl	8000fa8 <canardDecodeScalar>
    *bit_ofs += 8;
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f103 0208 	add.w	r2, r3, #8
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	601a      	str	r2, [r3, #0]
#pragma GCC diagnostic ignored "-Wtype-limits"
    if (msg->aux_data.len > 255) {
        return true; /* invalid value */
    }
#pragma GCC diagnostic pop
    for (size_t i=0; i < msg->aux_data.len; i++) {
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	617b      	str	r3, [r7, #20]
 8002fc6:	e014      	b.n	8002ff2 <_ardupilot_indication_NotifyState_decode+0x7c>




        canardDecodeScalar(transfer, *bit_ofs, 8, false, &msg->aux_data.data[i]);
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	6819      	ldr	r1, [r3, #0]
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	3302      	adds	r3, #2
 8002fd4:	9300      	str	r3, [sp, #0]
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	2208      	movs	r2, #8
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f7fd ffe4 	bl	8000fa8 <canardDecodeScalar>

        *bit_ofs += 8;
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f103 0208 	add.w	r2, r3, #8
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < msg->aux_data.len; i++) {
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	617b      	str	r3, [r7, #20]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	785b      	ldrb	r3, [r3, #1]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d3e4      	bcc.n	8002fc8 <_ardupilot_indication_NotifyState_decode+0x52>





    canardDecodeScalar(transfer, *bit_ofs, 64, false, &msg->vehicle_state);
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	6819      	ldr	r1, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8003008:	9300      	str	r3, [sp, #0]
 800300a:	2300      	movs	r3, #0
 800300c:	2240      	movs	r2, #64	@ 0x40
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f7fd ffca 	bl	8000fa8 <canardDecodeScalar>

    *bit_ofs += 64;
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	601a      	str	r2, [r3, #0]





    return false; /* success */
 8003020:	2300      	movs	r3, #0

}
 8003022:	4618      	mov	r0, r3
 8003024:	3718      	adds	r7, #24
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <ardupilot_indication_NotifyState_decode>:
}

/*
  return true if the decode is invalid
 */
bool ardupilot_indication_NotifyState_decode(const CanardRxTransfer* transfer, struct ardupilot_indication_NotifyState* msg) {
 800302a:	b580      	push	{r7, lr}
 800302c:	b084      	sub	sp, #16
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
 8003032:	6039      	str	r1, [r7, #0]
#if CANARD_ENABLE_TAO_OPTION
    if (transfer->tao && (transfer->payload_len > ARDUPILOT_INDICATION_NOTIFYSTATE_MAX_SIZE)) {
        return true; /* invalid payload length */
    }
#endif
    uint32_t bit_ofs = 0;
 8003034:	2300      	movs	r3, #0
 8003036:	60bb      	str	r3, [r7, #8]
    if (_ardupilot_indication_NotifyState_decode(transfer, &bit_ofs, msg,
 8003038:	f107 0108 	add.w	r1, r7, #8
 800303c:	2301      	movs	r3, #1
 800303e:	683a      	ldr	r2, [r7, #0]
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f7ff ff98 	bl	8002f76 <_ardupilot_indication_NotifyState_decode>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <ardupilot_indication_NotifyState_decode+0x26>
    transfer->tao
#else
    true
#endif
    )) {
        return true; /* invalid payload */
 800304c:	2301      	movs	r3, #1
 800304e:	e00c      	b.n	800306a <ardupilot_indication_NotifyState_decode+0x40>
    }

    const uint32_t byte_len = (bit_ofs+7U)/8U;
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	3307      	adds	r3, #7
 8003054:	08db      	lsrs	r3, r3, #3
 8003056:	60fb      	str	r3, [r7, #12]
    // we actually have
    if (!transfer->tao) {
        return byte_len > transfer->payload_len;
    }
#endif
    return byte_len != transfer->payload_len;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	8a9b      	ldrh	r3, [r3, #20]
 800305c:	461a      	mov	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	4293      	cmp	r3, r2
 8003062:	bf14      	ite	ne
 8003064:	2301      	movne	r3, #1
 8003066:	2300      	moveq	r3, #0
 8003068:	b2db      	uxtb	r3, r3
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <_uavcan_protocol_HardwareVersion_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_protocol_HardwareVersion_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_HardwareVersion* msg, bool tao);
static inline bool _uavcan_protocol_HardwareVersion_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_HardwareVersion* msg, bool tao);
void _uavcan_protocol_HardwareVersion_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_HardwareVersion* msg, bool tao) {
 8003072:	b580      	push	{r7, lr}
 8003074:	b088      	sub	sp, #32
 8003076:	af00      	add	r7, sp, #0
 8003078:	60f8      	str	r0, [r7, #12]
 800307a:	60b9      	str	r1, [r7, #8]
 800307c:	607a      	str	r2, [r7, #4]
 800307e:	70fb      	strb	r3, [r7, #3]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->major);
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	6819      	ldr	r1, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2208      	movs	r2, #8
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f7fe f916 	bl	80012ba <canardEncodeScalar>

    *bit_ofs += 8;
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f103 0208 	add.w	r2, r3, #8
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->minor);
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	6819      	ldr	r1, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	3301      	adds	r3, #1
 80030a2:	2208      	movs	r2, #8
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f7fe f908 	bl	80012ba <canardEncodeScalar>

    *bit_ofs += 8;
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f103 0208 	add.w	r2, r3, #8
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	601a      	str	r2, [r3, #0]





    for (size_t i=0; i < 16; i++) {
 80030b6:	2300      	movs	r3, #0
 80030b8:	61fb      	str	r3, [r7, #28]
 80030ba:	e012      	b.n	80030e2 <_uavcan_protocol_HardwareVersion_encode+0x70>




        canardEncodeScalar(buffer, *bit_ofs, 8, &msg->unique_id[i]);
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	6819      	ldr	r1, [r3, #0]
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	4413      	add	r3, r2
 80030c6:	3302      	adds	r3, #2
 80030c8:	2208      	movs	r2, #8
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f7fe f8f5 	bl	80012ba <canardEncodeScalar>

        *bit_ofs += 8;
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f103 0208 	add.w	r2, r3, #8
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < 16; i++) {
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	3301      	adds	r3, #1
 80030e0:	61fb      	str	r3, [r7, #28]
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	2b0f      	cmp	r3, #15
 80030e6:	d9e9      	bls.n	80030bc <_uavcan_protocol_HardwareVersion_encode+0x4a>





    if (!tao) {
 80030e8:	78fb      	ldrb	r3, [r7, #3]
 80030ea:	f083 0301 	eor.w	r3, r3, #1
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00d      	beq.n	8003110 <_uavcan_protocol_HardwareVersion_encode+0x9e>


        canardEncodeScalar(buffer, *bit_ofs, 8, &msg->certificate_of_authenticity.len);
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	6819      	ldr	r1, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3312      	adds	r3, #18
 80030fc:	2208      	movs	r2, #8
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f7fe f8db 	bl	80012ba <canardEncodeScalar>
        *bit_ofs += 8;
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f103 0208 	add.w	r2, r3, #8
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	601a      	str	r2, [r3, #0]

    }

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wtype-limits"
    const size_t certificate_of_authenticity_len = msg->certificate_of_authenticity.len > 255 ? 255 : msg->certificate_of_authenticity.len;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	7c9b      	ldrb	r3, [r3, #18]
 8003114:	617b      	str	r3, [r7, #20]
#pragma GCC diagnostic pop
    for (size_t i=0; i < certificate_of_authenticity_len; i++) {
 8003116:	2300      	movs	r3, #0
 8003118:	61bb      	str	r3, [r7, #24]
 800311a:	e013      	b.n	8003144 <_uavcan_protocol_HardwareVersion_encode+0xd2>




        canardEncodeScalar(buffer, *bit_ofs, 8, &msg->certificate_of_authenticity.data[i]);
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	6819      	ldr	r1, [r3, #0]
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	3310      	adds	r3, #16
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	4413      	add	r3, r2
 8003128:	3303      	adds	r3, #3
 800312a:	2208      	movs	r2, #8
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f7fe f8c4 	bl	80012ba <canardEncodeScalar>

        *bit_ofs += 8;
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f103 0208 	add.w	r2, r3, #8
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < certificate_of_authenticity_len; i++) {
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	3301      	adds	r3, #1
 8003142:	61bb      	str	r3, [r7, #24]
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	429a      	cmp	r2, r3
 800314a:	d3e7      	bcc.n	800311c <_uavcan_protocol_HardwareVersion_encode+0xaa>





}
 800314c:	bf00      	nop
 800314e:	bf00      	nop
 8003150:	3720      	adds	r7, #32
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <_uavcan_protocol_NodeStatus_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_protocol_NodeStatus_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao);
static inline bool _uavcan_protocol_NodeStatus_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao);
void _uavcan_protocol_NodeStatus_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao) {
 8003156:	b580      	push	{r7, lr}
 8003158:	b084      	sub	sp, #16
 800315a:	af00      	add	r7, sp, #0
 800315c:	60f8      	str	r0, [r7, #12]
 800315e:	60b9      	str	r1, [r7, #8]
 8003160:	607a      	str	r2, [r7, #4]
 8003162:	70fb      	strb	r3, [r7, #3]





    canardEncodeScalar(buffer, *bit_ofs, 32, &msg->uptime_sec);
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	6819      	ldr	r1, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2220      	movs	r2, #32
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f7fe f8a4 	bl	80012ba <canardEncodeScalar>

    *bit_ofs += 32;
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f103 0220 	add.w	r2, r3, #32
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 2, &msg->health);
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	6819      	ldr	r1, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	3304      	adds	r3, #4
 8003186:	2202      	movs	r2, #2
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f7fe f896 	bl	80012ba <canardEncodeScalar>

    *bit_ofs += 2;
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	1c9a      	adds	r2, r3, #2
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 3, &msg->mode);
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	6819      	ldr	r1, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	3305      	adds	r3, #5
 80031a0:	2203      	movs	r2, #3
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	f7fe f889 	bl	80012ba <canardEncodeScalar>

    *bit_ofs += 3;
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	1cda      	adds	r2, r3, #3
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 3, &msg->sub_mode);
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	6819      	ldr	r1, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	3306      	adds	r3, #6
 80031ba:	2203      	movs	r2, #3
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f7fe f87c 	bl	80012ba <canardEncodeScalar>

    *bit_ofs += 3;
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	1cda      	adds	r2, r3, #3
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 16, &msg->vendor_specific_status_code);
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	6819      	ldr	r1, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	3308      	adds	r3, #8
 80031d4:	2210      	movs	r2, #16
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f7fe f86f 	bl	80012ba <canardEncodeScalar>

    *bit_ofs += 16;
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f103 0210 	add.w	r2, r3, #16
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	601a      	str	r2, [r3, #0]





}
 80031e8:	bf00      	nop
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <_uavcan_protocol_SoftwareVersion_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_protocol_SoftwareVersion_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_SoftwareVersion* msg, bool tao);
static inline bool _uavcan_protocol_SoftwareVersion_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_SoftwareVersion* msg, bool tao);
void _uavcan_protocol_SoftwareVersion_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_SoftwareVersion* msg, bool tao) {
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
 80031fc:	70fb      	strb	r3, [r7, #3]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->major);
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	6819      	ldr	r1, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2208      	movs	r2, #8
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f7fe f857 	bl	80012ba <canardEncodeScalar>

    *bit_ofs += 8;
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f103 0208 	add.w	r2, r3, #8
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->minor);
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	6819      	ldr	r1, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3301      	adds	r3, #1
 8003220:	2208      	movs	r2, #8
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f7fe f849 	bl	80012ba <canardEncodeScalar>

    *bit_ofs += 8;
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f103 0208 	add.w	r2, r3, #8
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->optional_field_flags);
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	6819      	ldr	r1, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3302      	adds	r3, #2
 800323c:	2208      	movs	r2, #8
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f7fe f83b 	bl	80012ba <canardEncodeScalar>

    *bit_ofs += 8;
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f103 0208 	add.w	r2, r3, #8
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 32, &msg->vcs_commit);
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	6819      	ldr	r1, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	3304      	adds	r3, #4
 8003258:	2220      	movs	r2, #32
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f7fe f82d 	bl	80012ba <canardEncodeScalar>

    *bit_ofs += 32;
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f103 0220 	add.w	r2, r3, #32
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 64, &msg->image_crc);
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	6819      	ldr	r1, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3308      	adds	r3, #8
 8003274:	2240      	movs	r2, #64	@ 0x40
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f7fe f81f 	bl	80012ba <canardEncodeScalar>

    *bit_ofs += 64;
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	601a      	str	r2, [r3, #0]





}
 8003288:	bf00      	nop
 800328a:	3710      	adds	r7, #16
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <_uavcan_protocol_GetNodeInfoResponse_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_protocol_GetNodeInfoResponse_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_GetNodeInfoResponse* msg, bool tao);
static inline bool _uavcan_protocol_GetNodeInfoResponse_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_GetNodeInfoResponse* msg, bool tao);
void _uavcan_protocol_GetNodeInfoResponse_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_GetNodeInfoResponse* msg, bool tao) {
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
 800329c:	70fb      	strb	r3, [r7, #3]





    _uavcan_protocol_NodeStatus_encode(buffer, bit_ofs, &msg->status, false);
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	2300      	movs	r3, #0
 80032a2:	68b9      	ldr	r1, [r7, #8]
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f7ff ff56 	bl	8003156 <_uavcan_protocol_NodeStatus_encode>





    _uavcan_protocol_SoftwareVersion_encode(buffer, bit_ofs, &msg->software_version, false);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f103 0210 	add.w	r2, r3, #16
 80032b0:	2300      	movs	r3, #0
 80032b2:	68b9      	ldr	r1, [r7, #8]
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f7ff ff9b 	bl	80031f0 <_uavcan_protocol_SoftwareVersion_encode>





    _uavcan_protocol_HardwareVersion_encode(buffer, bit_ofs, &msg->hardware_version, false);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f103 0220 	add.w	r2, r3, #32
 80032c0:	2300      	movs	r3, #0
 80032c2:	68b9      	ldr	r1, [r7, #8]
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f7ff fed4 	bl	8003072 <_uavcan_protocol_HardwareVersion_encode>





    if (!tao) {
 80032ca:	78fb      	ldrb	r3, [r7, #3]
 80032cc:	f083 0301 	eor.w	r3, r3, #1
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00d      	beq.n	80032f2 <_uavcan_protocol_GetNodeInfoResponse_encode+0x62>


        canardEncodeScalar(buffer, *bit_ofs, 7, &msg->name.len);
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	6819      	ldr	r1, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 80032e0:	2207      	movs	r2, #7
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f7fd ffe9 	bl	80012ba <canardEncodeScalar>
        *bit_ofs += 7;
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	1dda      	adds	r2, r3, #7
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	601a      	str	r2, [r3, #0]

    }

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wtype-limits"
    const size_t name_len = msg->name.len > 80 ? 80 : msg->name.len;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 80032f8:	2b50      	cmp	r3, #80	@ 0x50
 80032fa:	bf28      	it	cs
 80032fc:	2350      	movcs	r3, #80	@ 0x50
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	613b      	str	r3, [r7, #16]
#pragma GCC diagnostic pop
    for (size_t i=0; i < name_len; i++) {
 8003302:	2300      	movs	r3, #0
 8003304:	617b      	str	r3, [r7, #20]
 8003306:	e014      	b.n	8003332 <_uavcan_protocol_GetNodeInfoResponse_encode+0xa2>




        canardEncodeScalar(buffer, *bit_ofs, 8, &msg->name.data[i]);
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	6819      	ldr	r1, [r3, #0]
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	4413      	add	r3, r2
 8003316:	3303      	adds	r3, #3
 8003318:	2208      	movs	r2, #8
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f7fd ffcd 	bl	80012ba <canardEncodeScalar>

        *bit_ofs += 8;
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f103 0208 	add.w	r2, r3, #8
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < name_len; i++) {
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	3301      	adds	r3, #1
 8003330:	617b      	str	r3, [r7, #20]
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	429a      	cmp	r2, r3
 8003338:	d3e6      	bcc.n	8003308 <_uavcan_protocol_GetNodeInfoResponse_encode+0x78>





}
 800333a:	bf00      	nop
 800333c:	bf00      	nop
 800333e:	3718      	adds	r7, #24
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <uavcan_protocol_GetNodeInfoResponse_encode>:

uint32_t uavcan_protocol_GetNodeInfoResponse_encode(struct uavcan_protocol_GetNodeInfoResponse* msg, uint8_t* buffer
#if CANARD_ENABLE_TAO_OPTION
    , bool tao
#endif
) {
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
    uint32_t bit_ofs = 0;
 800334e:	2300      	movs	r3, #0
 8003350:	60fb      	str	r3, [r7, #12]
    memset(buffer, 0, UAVCAN_PROTOCOL_GETNODEINFO_RESPONSE_MAX_SIZE);
 8003352:	f240 1279 	movw	r2, #377	@ 0x179
 8003356:	2100      	movs	r1, #0
 8003358:	6838      	ldr	r0, [r7, #0]
 800335a:	f002 fafb 	bl	8005954 <memset>
    _uavcan_protocol_GetNodeInfoResponse_encode(buffer, &bit_ofs, msg, 
 800335e:	f107 010c 	add.w	r1, r7, #12
 8003362:	2301      	movs	r3, #1
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	6838      	ldr	r0, [r7, #0]
 8003368:	f7ff ff92 	bl	8003290 <_uavcan_protocol_GetNodeInfoResponse_encode>
    tao
#else
    true
#endif
    );
    return ((bit_ofs+7)/8);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	3307      	adds	r3, #7
 8003370:	08db      	lsrs	r3, r3, #3
}
 8003372:	4618      	mov	r0, r3
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <_uavcan_protocol_NodeStatus_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_protocol_NodeStatus_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao);
static inline bool _uavcan_protocol_NodeStatus_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao);
void _uavcan_protocol_NodeStatus_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao) {
 800337a:	b580      	push	{r7, lr}
 800337c:	b084      	sub	sp, #16
 800337e:	af00      	add	r7, sp, #0
 8003380:	60f8      	str	r0, [r7, #12]
 8003382:	60b9      	str	r1, [r7, #8]
 8003384:	607a      	str	r2, [r7, #4]
 8003386:	70fb      	strb	r3, [r7, #3]





    canardEncodeScalar(buffer, *bit_ofs, 32, &msg->uptime_sec);
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	6819      	ldr	r1, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2220      	movs	r2, #32
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f7fd ff92 	bl	80012ba <canardEncodeScalar>

    *bit_ofs += 32;
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f103 0220 	add.w	r2, r3, #32
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 2, &msg->health);
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	6819      	ldr	r1, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	3304      	adds	r3, #4
 80033aa:	2202      	movs	r2, #2
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f7fd ff84 	bl	80012ba <canardEncodeScalar>

    *bit_ofs += 2;
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	1c9a      	adds	r2, r3, #2
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 3, &msg->mode);
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	6819      	ldr	r1, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	3305      	adds	r3, #5
 80033c4:	2203      	movs	r2, #3
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f7fd ff77 	bl	80012ba <canardEncodeScalar>

    *bit_ofs += 3;
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	1cda      	adds	r2, r3, #3
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 3, &msg->sub_mode);
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	6819      	ldr	r1, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	3306      	adds	r3, #6
 80033de:	2203      	movs	r2, #3
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	f7fd ff6a 	bl	80012ba <canardEncodeScalar>

    *bit_ofs += 3;
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	1cda      	adds	r2, r3, #3
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 16, &msg->vendor_specific_status_code);
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	6819      	ldr	r1, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	3308      	adds	r3, #8
 80033f8:	2210      	movs	r2, #16
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	f7fd ff5d 	bl	80012ba <canardEncodeScalar>

    *bit_ofs += 16;
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f103 0210 	add.w	r2, r3, #16
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	601a      	str	r2, [r3, #0]





}
 800340c:	bf00      	nop
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <_uavcan_protocol_NodeStatus_decode>:

/*
 decode uavcan_protocol_NodeStatus, return true on failure, false on success
*/
bool _uavcan_protocol_NodeStatus_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao) {
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af02      	add	r7, sp, #8
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
 8003420:	70fb      	strb	r3, [r7, #3]





    canardDecodeScalar(transfer, *bit_ofs, 32, false, &msg->uptime_sec);
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	6819      	ldr	r1, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	9300      	str	r3, [sp, #0]
 800342a:	2300      	movs	r3, #0
 800342c:	2220      	movs	r2, #32
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f7fd fdba 	bl	8000fa8 <canardDecodeScalar>

    *bit_ofs += 32;
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f103 0220 	add.w	r2, r3, #32
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 2, false, &msg->health);
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	6819      	ldr	r1, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	3304      	adds	r3, #4
 8003448:	9300      	str	r3, [sp, #0]
 800344a:	2300      	movs	r3, #0
 800344c:	2202      	movs	r2, #2
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f7fd fdaa 	bl	8000fa8 <canardDecodeScalar>

    *bit_ofs += 2;
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	1c9a      	adds	r2, r3, #2
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 3, false, &msg->mode);
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	6819      	ldr	r1, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	3305      	adds	r3, #5
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	2300      	movs	r3, #0
 800346a:	2203      	movs	r2, #3
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f7fd fd9b 	bl	8000fa8 <canardDecodeScalar>

    *bit_ofs += 3;
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	1cda      	adds	r2, r3, #3
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 3, false, &msg->sub_mode);
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	6819      	ldr	r1, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	3306      	adds	r3, #6
 8003484:	9300      	str	r3, [sp, #0]
 8003486:	2300      	movs	r3, #0
 8003488:	2203      	movs	r2, #3
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f7fd fd8c 	bl	8000fa8 <canardDecodeScalar>

    *bit_ofs += 3;
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	1cda      	adds	r2, r3, #3
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 16, false, &msg->vendor_specific_status_code);
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	6819      	ldr	r1, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	3308      	adds	r3, #8
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	2300      	movs	r3, #0
 80034a6:	2210      	movs	r2, #16
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f7fd fd7d 	bl	8000fa8 <canardDecodeScalar>

    *bit_ofs += 16;
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f103 0210 	add.w	r2, r3, #16
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	601a      	str	r2, [r3, #0]





    return false; /* success */
 80034ba:	2300      	movs	r3, #0

}
 80034bc:	4618      	mov	r0, r3
 80034be:	3710      	adds	r7, #16
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <uavcan_protocol_NodeStatus_encode>:

uint32_t uavcan_protocol_NodeStatus_encode(struct uavcan_protocol_NodeStatus* msg, uint8_t* buffer
#if CANARD_ENABLE_TAO_OPTION
    , bool tao
#endif
) {
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
    uint32_t bit_ofs = 0;
 80034ce:	2300      	movs	r3, #0
 80034d0:	60fb      	str	r3, [r7, #12]
    memset(buffer, 0, UAVCAN_PROTOCOL_NODESTATUS_MAX_SIZE);
 80034d2:	2207      	movs	r2, #7
 80034d4:	2100      	movs	r1, #0
 80034d6:	6838      	ldr	r0, [r7, #0]
 80034d8:	f002 fa3c 	bl	8005954 <memset>
    _uavcan_protocol_NodeStatus_encode(buffer, &bit_ofs, msg, 
 80034dc:	f107 010c 	add.w	r1, r7, #12
 80034e0:	2301      	movs	r3, #1
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	6838      	ldr	r0, [r7, #0]
 80034e6:	f7ff ff48 	bl	800337a <_uavcan_protocol_NodeStatus_encode>
    tao
#else
    true
#endif
    );
    return ((bit_ofs+7)/8);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	3307      	adds	r3, #7
 80034ee:	08db      	lsrs	r3, r3, #3
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <uavcan_protocol_NodeStatus_decode>:

/*
  return true if the decode is invalid
 */
bool uavcan_protocol_NodeStatus_decode(const CanardRxTransfer* transfer, struct uavcan_protocol_NodeStatus* msg) {
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
#if CANARD_ENABLE_TAO_OPTION
    if (transfer->tao && (transfer->payload_len > UAVCAN_PROTOCOL_NODESTATUS_MAX_SIZE)) {
        return true; /* invalid payload length */
    }
#endif
    uint32_t bit_ofs = 0;
 8003502:	2300      	movs	r3, #0
 8003504:	60bb      	str	r3, [r7, #8]
    if (_uavcan_protocol_NodeStatus_decode(transfer, &bit_ofs, msg,
 8003506:	f107 0108 	add.w	r1, r7, #8
 800350a:	2301      	movs	r3, #1
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7ff ff80 	bl	8003414 <_uavcan_protocol_NodeStatus_decode>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <uavcan_protocol_NodeStatus_decode+0x26>
    transfer->tao
#else
    true
#endif
    )) {
        return true; /* invalid payload */
 800351a:	2301      	movs	r3, #1
 800351c:	e00c      	b.n	8003538 <uavcan_protocol_NodeStatus_decode+0x40>
    }

    const uint32_t byte_len = (bit_ofs+7U)/8U;
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	3307      	adds	r3, #7
 8003522:	08db      	lsrs	r3, r3, #3
 8003524:	60fb      	str	r3, [r7, #12]
    // we actually have
    if (!transfer->tao) {
        return byte_len > transfer->payload_len;
    }
#endif
    return byte_len != transfer->payload_len;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	8a9b      	ldrh	r3, [r3, #20]
 800352a:	461a      	mov	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4293      	cmp	r3, r2
 8003530:	bf14      	ite	ne
 8003532:	2301      	movne	r3, #1
 8003534:	2300      	moveq	r3, #0
 8003536:	b2db      	uxtb	r3, r3
}
 8003538:	4618      	mov	r0, r3
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003546:	2300      	movs	r3, #0
 8003548:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800354a:	4b0c      	ldr	r3, [pc, #48]	@ (800357c <HAL_Init+0x3c>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a0b      	ldr	r2, [pc, #44]	@ (800357c <HAL_Init+0x3c>)
 8003550:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003554:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003556:	2003      	movs	r0, #3
 8003558:	f000 ffb2 	bl	80044c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800355c:	2000      	movs	r0, #0
 800355e:	f000 f80f 	bl	8003580 <HAL_InitTick>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d002      	beq.n	800356e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	71fb      	strb	r3, [r7, #7]
 800356c:	e001      	b.n	8003572 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800356e:	f7ff fbc5 	bl	8002cfc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003572:	79fb      	ldrb	r3, [r7, #7]
}
 8003574:	4618      	mov	r0, r3
 8003576:	3708      	adds	r7, #8
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	40022000 	.word	0x40022000

08003580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003588:	2300      	movs	r3, #0
 800358a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800358c:	4b17      	ldr	r3, [pc, #92]	@ (80035ec <HAL_InitTick+0x6c>)
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d023      	beq.n	80035dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003594:	4b16      	ldr	r3, [pc, #88]	@ (80035f0 <HAL_InitTick+0x70>)
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	4b14      	ldr	r3, [pc, #80]	@ (80035ec <HAL_InitTick+0x6c>)
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	4619      	mov	r1, r3
 800359e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80035a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80035a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035aa:	4618      	mov	r0, r3
 80035ac:	f000 ffbd 	bl	800452a <HAL_SYSTICK_Config>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10f      	bne.n	80035d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2b0f      	cmp	r3, #15
 80035ba:	d809      	bhi.n	80035d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035bc:	2200      	movs	r2, #0
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	f04f 30ff 	mov.w	r0, #4294967295
 80035c4:	f000 ff87 	bl	80044d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80035c8:	4a0a      	ldr	r2, [pc, #40]	@ (80035f4 <HAL_InitTick+0x74>)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6013      	str	r3, [r2, #0]
 80035ce:	e007      	b.n	80035e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	73fb      	strb	r3, [r7, #15]
 80035d4:	e004      	b.n	80035e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	73fb      	strb	r3, [r7, #15]
 80035da:	e001      	b.n	80035e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80035e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	20000008 	.word	0x20000008
 80035f0:	20000000 	.word	0x20000000
 80035f4:	20000004 	.word	0x20000004

080035f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80035fc:	4b06      	ldr	r3, [pc, #24]	@ (8003618 <HAL_IncTick+0x20>)
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	461a      	mov	r2, r3
 8003602:	4b06      	ldr	r3, [pc, #24]	@ (800361c <HAL_IncTick+0x24>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4413      	add	r3, r2
 8003608:	4a04      	ldr	r2, [pc, #16]	@ (800361c <HAL_IncTick+0x24>)
 800360a:	6013      	str	r3, [r2, #0]
}
 800360c:	bf00      	nop
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	20000008 	.word	0x20000008
 800361c:	200004ec 	.word	0x200004ec

08003620 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
  return uwTick;
 8003624:	4b03      	ldr	r3, [pc, #12]	@ (8003634 <HAL_GetTick+0x14>)
 8003626:	681b      	ldr	r3, [r3, #0]
}
 8003628:	4618      	mov	r0, r3
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	200004ec 	.word	0x200004ec

08003638 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 800363c:	4b03      	ldr	r3, [pc, #12]	@ (800364c <HAL_GetUIDw0+0x14>)
 800363e:	681b      	ldr	r3, [r3, #0]
}
 8003640:	4618      	mov	r0, r3
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	1fff7590 	.word	0x1fff7590

08003650 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8003654:	4b03      	ldr	r3, [pc, #12]	@ (8003664 <HAL_GetUIDw1+0x14>)
 8003656:	681b      	ldr	r3, [r3, #0]
}
 8003658:	4618      	mov	r0, r3
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	1fff7594 	.word	0x1fff7594

08003668 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8003668:	b480      	push	{r7}
 800366a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 800366c:	4b03      	ldr	r3, [pc, #12]	@ (800367c <HAL_GetUIDw2+0x14>)
 800366e:	681b      	ldr	r3, [r3, #0]
}
 8003670:	4618      	mov	r0, r3
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	1fff7598 	.word	0x1fff7598

08003680 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e0ed      	b.n	800386e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d102      	bne.n	80036a4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f7fc fe1c 	bl	80002dc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f042 0201 	orr.w	r2, r2, #1
 80036b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036b4:	f7ff ffb4 	bl	8003620 <HAL_GetTick>
 80036b8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80036ba:	e012      	b.n	80036e2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80036bc:	f7ff ffb0 	bl	8003620 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b0a      	cmp	r3, #10
 80036c8:	d90b      	bls.n	80036e2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ce:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2205      	movs	r2, #5
 80036da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e0c5      	b.n	800386e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d0e5      	beq.n	80036bc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f022 0202 	bic.w	r2, r2, #2
 80036fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003700:	f7ff ff8e 	bl	8003620 <HAL_GetTick>
 8003704:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003706:	e012      	b.n	800372e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003708:	f7ff ff8a 	bl	8003620 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b0a      	cmp	r3, #10
 8003714:	d90b      	bls.n	800372e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2205      	movs	r2, #5
 8003726:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e09f      	b.n	800386e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1e5      	bne.n	8003708 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	7e1b      	ldrb	r3, [r3, #24]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d108      	bne.n	8003756 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	e007      	b.n	8003766 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003764:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	7e5b      	ldrb	r3, [r3, #25]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d108      	bne.n	8003780 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	e007      	b.n	8003790 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800378e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	7e9b      	ldrb	r3, [r3, #26]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d108      	bne.n	80037aa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f042 0220 	orr.w	r2, r2, #32
 80037a6:	601a      	str	r2, [r3, #0]
 80037a8:	e007      	b.n	80037ba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f022 0220 	bic.w	r2, r2, #32
 80037b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	7edb      	ldrb	r3, [r3, #27]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d108      	bne.n	80037d4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 0210 	bic.w	r2, r2, #16
 80037d0:	601a      	str	r2, [r3, #0]
 80037d2:	e007      	b.n	80037e4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f042 0210 	orr.w	r2, r2, #16
 80037e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	7f1b      	ldrb	r3, [r3, #28]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d108      	bne.n	80037fe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f042 0208 	orr.w	r2, r2, #8
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	e007      	b.n	800380e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0208 	bic.w	r2, r2, #8
 800380c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	7f5b      	ldrb	r3, [r3, #29]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d108      	bne.n	8003828 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f042 0204 	orr.w	r2, r2, #4
 8003824:	601a      	str	r2, [r3, #0]
 8003826:	e007      	b.n	8003838 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f022 0204 	bic.w	r2, r2, #4
 8003836:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	431a      	orrs	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	431a      	orrs	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	ea42 0103 	orr.w	r1, r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	1e5a      	subs	r2, r3, #1
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	430a      	orrs	r2, r1
 800385c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003876:	b480      	push	{r7}
 8003878:	b087      	sub	sp, #28
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
 800387e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 3020 	ldrb.w	r3, [r3, #32]
 800388c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800388e:	7cfb      	ldrb	r3, [r7, #19]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d003      	beq.n	800389c <HAL_CAN_ConfigFilter+0x26>
 8003894:	7cfb      	ldrb	r3, [r7, #19]
 8003896:	2b02      	cmp	r3, #2
 8003898:	f040 80aa 	bne.w	80039f0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80038a2:	f043 0201 	orr.w	r2, r3, #1
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	f003 031f 	and.w	r3, r3, #31
 80038b4:	2201      	movs	r2, #1
 80038b6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ba:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	43db      	mvns	r3, r3
 80038c6:	401a      	ands	r2, r3
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	69db      	ldr	r3, [r3, #28]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d123      	bne.n	800391e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	43db      	mvns	r3, r3
 80038e0:	401a      	ands	r2, r3
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80038f4:	683a      	ldr	r2, [r7, #0]
 80038f6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80038f8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	3248      	adds	r2, #72	@ 0x48
 80038fe:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003912:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003914:	6979      	ldr	r1, [r7, #20]
 8003916:	3348      	adds	r3, #72	@ 0x48
 8003918:	00db      	lsls	r3, r3, #3
 800391a:	440b      	add	r3, r1
 800391c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	69db      	ldr	r3, [r3, #28]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d122      	bne.n	800396c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	431a      	orrs	r2, r3
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003946:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	3248      	adds	r2, #72	@ 0x48
 800394c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003960:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003962:	6979      	ldr	r1, [r7, #20]
 8003964:	3348      	adds	r3, #72	@ 0x48
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	440b      	add	r3, r1
 800396a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d109      	bne.n	8003988 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	43db      	mvns	r3, r3
 800397e:	401a      	ands	r2, r3
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8003986:	e007      	b.n	8003998 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	431a      	orrs	r2, r3
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d109      	bne.n	80039b4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	43db      	mvns	r3, r3
 80039aa:	401a      	ands	r2, r3
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80039b2:	e007      	b.n	80039c4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	431a      	orrs	r2, r3
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	6a1b      	ldr	r3, [r3, #32]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d107      	bne.n	80039dc <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	431a      	orrs	r2, r3
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80039e2:	f023 0201 	bic.w	r2, r3, #1
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80039ec:	2300      	movs	r3, #0
 80039ee:	e006      	b.n	80039fe <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
  }
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	371c      	adds	r7, #28
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b084      	sub	sp, #16
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d12e      	bne.n	8003a7c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2202      	movs	r2, #2
 8003a22:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f022 0201 	bic.w	r2, r2, #1
 8003a34:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003a36:	f7ff fdf3 	bl	8003620 <HAL_GetTick>
 8003a3a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003a3c:	e012      	b.n	8003a64 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003a3e:	f7ff fdef 	bl	8003620 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	2b0a      	cmp	r3, #10
 8003a4a:	d90b      	bls.n	8003a64 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a50:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2205      	movs	r2, #5
 8003a5c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e012      	b.n	8003a8a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1e5      	bne.n	8003a3e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	e006      	b.n	8003a8a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a80:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
  }
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003a92:	b480      	push	{r7}
 8003a94:	b089      	sub	sp, #36	@ 0x24
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	60f8      	str	r0, [r7, #12]
 8003a9a:	60b9      	str	r1, [r7, #8]
 8003a9c:	607a      	str	r2, [r7, #4]
 8003a9e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003aa6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003ab0:	7ffb      	ldrb	r3, [r7, #31]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d003      	beq.n	8003abe <HAL_CAN_AddTxMessage+0x2c>
 8003ab6:	7ffb      	ldrb	r3, [r7, #31]
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	f040 80ad 	bne.w	8003c18 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10a      	bne.n	8003ade <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d105      	bne.n	8003ade <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 8095 	beq.w	8003c08 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	0e1b      	lsrs	r3, r3, #24
 8003ae2:	f003 0303 	and.w	r3, r3, #3
 8003ae6:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003ae8:	2201      	movs	r2, #1
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	409a      	lsls	r2, r3
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10d      	bne.n	8003b16 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003b04:	68f9      	ldr	r1, [r7, #12]
 8003b06:	6809      	ldr	r1, [r1, #0]
 8003b08:	431a      	orrs	r2, r3
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	3318      	adds	r3, #24
 8003b0e:	011b      	lsls	r3, r3, #4
 8003b10:	440b      	add	r3, r1
 8003b12:	601a      	str	r2, [r3, #0]
 8003b14:	e00f      	b.n	8003b36 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003b20:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003b26:	68f9      	ldr	r1, [r7, #12]
 8003b28:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003b2a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	3318      	adds	r3, #24
 8003b30:	011b      	lsls	r3, r3, #4
 8003b32:	440b      	add	r3, r1
 8003b34:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6819      	ldr	r1, [r3, #0]
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	691a      	ldr	r2, [r3, #16]
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	3318      	adds	r3, #24
 8003b42:	011b      	lsls	r3, r3, #4
 8003b44:	440b      	add	r3, r1
 8003b46:	3304      	adds	r3, #4
 8003b48:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	7d1b      	ldrb	r3, [r3, #20]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d111      	bne.n	8003b76 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	3318      	adds	r3, #24
 8003b5a:	011b      	lsls	r3, r3, #4
 8003b5c:	4413      	add	r3, r2
 8003b5e:	3304      	adds	r3, #4
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	6811      	ldr	r1, [r2, #0]
 8003b66:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	3318      	adds	r3, #24
 8003b6e:	011b      	lsls	r3, r3, #4
 8003b70:	440b      	add	r3, r1
 8003b72:	3304      	adds	r3, #4
 8003b74:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	3307      	adds	r3, #7
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	061a      	lsls	r2, r3, #24
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	3306      	adds	r3, #6
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	041b      	lsls	r3, r3, #16
 8003b86:	431a      	orrs	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	3305      	adds	r3, #5
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	021b      	lsls	r3, r3, #8
 8003b90:	4313      	orrs	r3, r2
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	3204      	adds	r2, #4
 8003b96:	7812      	ldrb	r2, [r2, #0]
 8003b98:	4610      	mov	r0, r2
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	6811      	ldr	r1, [r2, #0]
 8003b9e:	ea43 0200 	orr.w	r2, r3, r0
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	011b      	lsls	r3, r3, #4
 8003ba6:	440b      	add	r3, r1
 8003ba8:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8003bac:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	3303      	adds	r3, #3
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	061a      	lsls	r2, r3, #24
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	3302      	adds	r3, #2
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	041b      	lsls	r3, r3, #16
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	021b      	lsls	r3, r3, #8
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	7812      	ldrb	r2, [r2, #0]
 8003bce:	4610      	mov	r0, r2
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	6811      	ldr	r1, [r2, #0]
 8003bd4:	ea43 0200 	orr.w	r2, r3, r0
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	011b      	lsls	r3, r3, #4
 8003bdc:	440b      	add	r3, r1
 8003bde:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8003be2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	3318      	adds	r3, #24
 8003bec:	011b      	lsls	r3, r3, #4
 8003bee:	4413      	add	r3, r2
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	6811      	ldr	r1, [r2, #0]
 8003bf6:	f043 0201 	orr.w	r2, r3, #1
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	3318      	adds	r3, #24
 8003bfe:	011b      	lsls	r3, r3, #4
 8003c00:	440b      	add	r3, r1
 8003c02:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003c04:	2300      	movs	r3, #0
 8003c06:	e00e      	b.n	8003c26 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e006      	b.n	8003c26 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c1c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
  }
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3724      	adds	r7, #36	@ 0x24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003c32:	b480      	push	{r7}
 8003c34:	b087      	sub	sp, #28
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	60f8      	str	r0, [r7, #12]
 8003c3a:	60b9      	str	r1, [r7, #8]
 8003c3c:	607a      	str	r2, [r7, #4]
 8003c3e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c46:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003c48:	7dfb      	ldrb	r3, [r7, #23]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d003      	beq.n	8003c56 <HAL_CAN_GetRxMessage+0x24>
 8003c4e:	7dfb      	ldrb	r3, [r7, #23]
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	f040 8103 	bne.w	8003e5c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d10e      	bne.n	8003c7a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	f003 0303 	and.w	r3, r3, #3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d116      	bne.n	8003c98 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c6e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e0f7      	b.n	8003e6a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	f003 0303 	and.w	r3, r3, #3
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d107      	bne.n	8003c98 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c8c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e0e8      	b.n	8003e6a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	331b      	adds	r3, #27
 8003ca0:	011b      	lsls	r3, r3, #4
 8003ca2:	4413      	add	r3, r2
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0204 	and.w	r2, r3, #4
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10c      	bne.n	8003cd0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	331b      	adds	r3, #27
 8003cbe:	011b      	lsls	r3, r3, #4
 8003cc0:	4413      	add	r3, r2
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	0d5b      	lsrs	r3, r3, #21
 8003cc6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	601a      	str	r2, [r3, #0]
 8003cce:	e00b      	b.n	8003ce8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	331b      	adds	r3, #27
 8003cd8:	011b      	lsls	r3, r3, #4
 8003cda:	4413      	add	r3, r2
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	08db      	lsrs	r3, r3, #3
 8003ce0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	331b      	adds	r3, #27
 8003cf0:	011b      	lsls	r3, r3, #4
 8003cf2:	4413      	add	r3, r2
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0202 	and.w	r2, r3, #2
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	331b      	adds	r3, #27
 8003d06:	011b      	lsls	r3, r3, #4
 8003d08:	4413      	add	r3, r2
 8003d0a:	3304      	adds	r3, #4
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0308 	and.w	r3, r3, #8
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d003      	beq.n	8003d1e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2208      	movs	r2, #8
 8003d1a:	611a      	str	r2, [r3, #16]
 8003d1c:	e00b      	b.n	8003d36 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	331b      	adds	r3, #27
 8003d26:	011b      	lsls	r3, r3, #4
 8003d28:	4413      	add	r3, r2
 8003d2a:	3304      	adds	r3, #4
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 020f 	and.w	r2, r3, #15
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	331b      	adds	r3, #27
 8003d3e:	011b      	lsls	r3, r3, #4
 8003d40:	4413      	add	r3, r2
 8003d42:	3304      	adds	r3, #4
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	0a1b      	lsrs	r3, r3, #8
 8003d48:	b2da      	uxtb	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	331b      	adds	r3, #27
 8003d56:	011b      	lsls	r3, r3, #4
 8003d58:	4413      	add	r3, r2
 8003d5a:	3304      	adds	r3, #4
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	0c1b      	lsrs	r3, r3, #16
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	4413      	add	r3, r2
 8003d70:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	b2da      	uxtb	r2, r3
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	011b      	lsls	r3, r3, #4
 8003d84:	4413      	add	r3, r2
 8003d86:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	0a1a      	lsrs	r2, r3, #8
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	3301      	adds	r3, #1
 8003d92:	b2d2      	uxtb	r2, r2
 8003d94:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	011b      	lsls	r3, r3, #4
 8003d9e:	4413      	add	r3, r2
 8003da0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	0c1a      	lsrs	r2, r3, #16
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	3302      	adds	r3, #2
 8003dac:	b2d2      	uxtb	r2, r2
 8003dae:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	011b      	lsls	r3, r3, #4
 8003db8:	4413      	add	r3, r2
 8003dba:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	0e1a      	lsrs	r2, r3, #24
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	3303      	adds	r3, #3
 8003dc6:	b2d2      	uxtb	r2, r2
 8003dc8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	011b      	lsls	r3, r3, #4
 8003dd2:	4413      	add	r3, r2
 8003dd4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	3304      	adds	r3, #4
 8003dde:	b2d2      	uxtb	r2, r2
 8003de0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	011b      	lsls	r3, r3, #4
 8003dea:	4413      	add	r3, r2
 8003dec:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	0a1a      	lsrs	r2, r3, #8
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	3305      	adds	r3, #5
 8003df8:	b2d2      	uxtb	r2, r2
 8003dfa:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	011b      	lsls	r3, r3, #4
 8003e04:	4413      	add	r3, r2
 8003e06:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	0c1a      	lsrs	r2, r3, #16
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	3306      	adds	r3, #6
 8003e12:	b2d2      	uxtb	r2, r2
 8003e14:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	011b      	lsls	r3, r3, #4
 8003e1e:	4413      	add	r3, r2
 8003e20:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	0e1a      	lsrs	r2, r3, #24
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	3307      	adds	r3, #7
 8003e2c:	b2d2      	uxtb	r2, r2
 8003e2e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d108      	bne.n	8003e48 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68da      	ldr	r2, [r3, #12]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f042 0220 	orr.w	r2, r2, #32
 8003e44:	60da      	str	r2, [r3, #12]
 8003e46:	e007      	b.n	8003e58 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	691a      	ldr	r2, [r3, #16]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f042 0220 	orr.w	r2, r2, #32
 8003e56:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	e006      	b.n	8003e6a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e60:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
  }
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	371c      	adds	r7, #28
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr

08003e76 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003e76:	b480      	push	{r7}
 8003e78:	b085      	sub	sp, #20
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
 8003e7e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e86:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003e88:	7bfb      	ldrb	r3, [r7, #15]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d002      	beq.n	8003e94 <HAL_CAN_ActivateNotification+0x1e>
 8003e8e:	7bfb      	ldrb	r3, [r7, #15]
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d109      	bne.n	8003ea8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	6959      	ldr	r1, [r3, #20]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	e006      	b.n	8003eb6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eac:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
  }
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3714      	adds	r7, #20
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr

08003ec2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b08a      	sub	sp, #40	@ 0x28
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003efe:	6a3b      	ldr	r3, [r7, #32]
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d07c      	beq.n	8004002 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d023      	beq.n	8003f5a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2201      	movs	r2, #1
 8003f18:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d003      	beq.n	8003f2c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 f983 	bl	8004230 <HAL_CAN_TxMailbox0CompleteCallback>
 8003f2a:	e016      	b.n	8003f5a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	f003 0304 	and.w	r3, r3, #4
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d004      	beq.n	8003f40 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f38:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003f3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f3e:	e00c      	b.n	8003f5a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	f003 0308 	and.w	r3, r3, #8
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d004      	beq.n	8003f54 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003f50:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f52:	e002      	b.n	8003f5a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 f989 	bl	800426c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d024      	beq.n	8003fae <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003f6c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d003      	beq.n	8003f80 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 f963 	bl	8004244 <HAL_CAN_TxMailbox1CompleteCallback>
 8003f7e:	e016      	b.n	8003fae <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d004      	beq.n	8003f94 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003f90:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f92:	e00c      	b.n	8003fae <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d004      	beq.n	8003fa8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003fa4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fa6:	e002      	b.n	8003fae <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 f969 	bl	8004280 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d024      	beq.n	8004002 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003fc0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d003      	beq.n	8003fd4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 f943 	bl	8004258 <HAL_CAN_TxMailbox2CompleteCallback>
 8003fd2:	e016      	b.n	8004002 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d004      	beq.n	8003fe8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fe4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fe6:	e00c      	b.n	8004002 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d004      	beq.n	8003ffc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ff8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ffa:	e002      	b.n	8004002 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 f949 	bl	8004294 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004002:	6a3b      	ldr	r3, [r7, #32]
 8004004:	f003 0308 	and.w	r3, r3, #8
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00c      	beq.n	8004026 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f003 0310 	and.w	r3, r3, #16
 8004012:	2b00      	cmp	r3, #0
 8004014:	d007      	beq.n	8004026 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004018:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800401c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2210      	movs	r2, #16
 8004024:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004026:	6a3b      	ldr	r3, [r7, #32]
 8004028:	f003 0304 	and.w	r3, r3, #4
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00b      	beq.n	8004048 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	f003 0308 	and.w	r3, r3, #8
 8004036:	2b00      	cmp	r3, #0
 8004038:	d006      	beq.n	8004048 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2208      	movs	r2, #8
 8004040:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f930 	bl	80042a8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004048:	6a3b      	ldr	r3, [r7, #32]
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d009      	beq.n	8004066 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	f003 0303 	and.w	r3, r3, #3
 800405c:	2b00      	cmp	r3, #0
 800405e:	d002      	beq.n	8004066 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f7fe fa69 	bl	8002538 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004066:	6a3b      	ldr	r3, [r7, #32]
 8004068:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00c      	beq.n	800408a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	f003 0310 	and.w	r3, r3, #16
 8004076:	2b00      	cmp	r3, #0
 8004078:	d007      	beq.n	800408a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800407a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004080:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2210      	movs	r2, #16
 8004088:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800408a:	6a3b      	ldr	r3, [r7, #32]
 800408c:	f003 0320 	and.w	r3, r3, #32
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00b      	beq.n	80040ac <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	f003 0308 	and.w	r3, r3, #8
 800409a:	2b00      	cmp	r3, #0
 800409c:	d006      	beq.n	80040ac <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2208      	movs	r2, #8
 80040a4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 f912 	bl	80042d0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80040ac:	6a3b      	ldr	r3, [r7, #32]
 80040ae:	f003 0310 	and.w	r3, r3, #16
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d009      	beq.n	80040ca <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	f003 0303 	and.w	r3, r3, #3
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d002      	beq.n	80040ca <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 f8f9 	bl	80042bc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80040ca:	6a3b      	ldr	r3, [r7, #32]
 80040cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00b      	beq.n	80040ec <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	f003 0310 	and.w	r3, r3, #16
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d006      	beq.n	80040ec <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2210      	movs	r2, #16
 80040e4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f8fc 	bl	80042e4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80040ec:	6a3b      	ldr	r3, [r7, #32]
 80040ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00b      	beq.n	800410e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	f003 0308 	and.w	r3, r3, #8
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d006      	beq.n	800410e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2208      	movs	r2, #8
 8004106:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 f8f5 	bl	80042f8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800410e:	6a3b      	ldr	r3, [r7, #32]
 8004110:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d07b      	beq.n	8004210 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	f003 0304 	and.w	r3, r3, #4
 800411e:	2b00      	cmp	r3, #0
 8004120:	d072      	beq.n	8004208 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004122:	6a3b      	ldr	r3, [r7, #32]
 8004124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004128:	2b00      	cmp	r3, #0
 800412a:	d008      	beq.n	800413e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004132:	2b00      	cmp	r3, #0
 8004134:	d003      	beq.n	800413e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004138:	f043 0301 	orr.w	r3, r3, #1
 800413c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800413e:	6a3b      	ldr	r3, [r7, #32]
 8004140:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004144:	2b00      	cmp	r3, #0
 8004146:	d008      	beq.n	800415a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800414e:	2b00      	cmp	r3, #0
 8004150:	d003      	beq.n	800415a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004154:	f043 0302 	orr.w	r3, r3, #2
 8004158:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800415a:	6a3b      	ldr	r3, [r7, #32]
 800415c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004160:	2b00      	cmp	r3, #0
 8004162:	d008      	beq.n	8004176 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800416e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004170:	f043 0304 	orr.w	r3, r3, #4
 8004174:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004176:	6a3b      	ldr	r3, [r7, #32]
 8004178:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800417c:	2b00      	cmp	r3, #0
 800417e:	d043      	beq.n	8004208 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004186:	2b00      	cmp	r3, #0
 8004188:	d03e      	beq.n	8004208 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004190:	2b60      	cmp	r3, #96	@ 0x60
 8004192:	d02b      	beq.n	80041ec <HAL_CAN_IRQHandler+0x32a>
 8004194:	2b60      	cmp	r3, #96	@ 0x60
 8004196:	d82e      	bhi.n	80041f6 <HAL_CAN_IRQHandler+0x334>
 8004198:	2b50      	cmp	r3, #80	@ 0x50
 800419a:	d022      	beq.n	80041e2 <HAL_CAN_IRQHandler+0x320>
 800419c:	2b50      	cmp	r3, #80	@ 0x50
 800419e:	d82a      	bhi.n	80041f6 <HAL_CAN_IRQHandler+0x334>
 80041a0:	2b40      	cmp	r3, #64	@ 0x40
 80041a2:	d019      	beq.n	80041d8 <HAL_CAN_IRQHandler+0x316>
 80041a4:	2b40      	cmp	r3, #64	@ 0x40
 80041a6:	d826      	bhi.n	80041f6 <HAL_CAN_IRQHandler+0x334>
 80041a8:	2b30      	cmp	r3, #48	@ 0x30
 80041aa:	d010      	beq.n	80041ce <HAL_CAN_IRQHandler+0x30c>
 80041ac:	2b30      	cmp	r3, #48	@ 0x30
 80041ae:	d822      	bhi.n	80041f6 <HAL_CAN_IRQHandler+0x334>
 80041b0:	2b10      	cmp	r3, #16
 80041b2:	d002      	beq.n	80041ba <HAL_CAN_IRQHandler+0x2f8>
 80041b4:	2b20      	cmp	r3, #32
 80041b6:	d005      	beq.n	80041c4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80041b8:	e01d      	b.n	80041f6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80041ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041bc:	f043 0308 	orr.w	r3, r3, #8
 80041c0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80041c2:	e019      	b.n	80041f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80041c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c6:	f043 0310 	orr.w	r3, r3, #16
 80041ca:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80041cc:	e014      	b.n	80041f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80041ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d0:	f043 0320 	orr.w	r3, r3, #32
 80041d4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80041d6:	e00f      	b.n	80041f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80041d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041de:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80041e0:	e00a      	b.n	80041f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80041e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041e8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80041ea:	e005      	b.n	80041f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80041ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041f2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80041f4:	e000      	b.n	80041f8 <HAL_CAN_IRQHandler+0x336>
            break;
 80041f6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	699a      	ldr	r2, [r3, #24]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004206:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2204      	movs	r2, #4
 800420e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004212:	2b00      	cmp	r3, #0
 8004214:	d008      	beq.n	8004228 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800421a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421c:	431a      	orrs	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f872 	bl	800430c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004228:	bf00      	nop
 800422a:	3728      	adds	r7, #40	@ 0x28
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004238:	bf00      	nop
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800429c:	bf00      	nop
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80042c4:	bf00      	nop
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80042d8:	bf00      	nop
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f003 0307 	and.w	r3, r3, #7
 800432e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004330:	4b0c      	ldr	r3, [pc, #48]	@ (8004364 <__NVIC_SetPriorityGrouping+0x44>)
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800433c:	4013      	ands	r3, r2
 800433e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004348:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800434c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004350:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004352:	4a04      	ldr	r2, [pc, #16]	@ (8004364 <__NVIC_SetPriorityGrouping+0x44>)
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	60d3      	str	r3, [r2, #12]
}
 8004358:	bf00      	nop
 800435a:	3714      	adds	r7, #20
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr
 8004364:	e000ed00 	.word	0xe000ed00

08004368 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004368:	b480      	push	{r7}
 800436a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800436c:	4b04      	ldr	r3, [pc, #16]	@ (8004380 <__NVIC_GetPriorityGrouping+0x18>)
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	0a1b      	lsrs	r3, r3, #8
 8004372:	f003 0307 	and.w	r3, r3, #7
}
 8004376:	4618      	mov	r0, r3
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr
 8004380:	e000ed00 	.word	0xe000ed00

08004384 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	4603      	mov	r3, r0
 800438c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800438e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004392:	2b00      	cmp	r3, #0
 8004394:	db0b      	blt.n	80043ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004396:	79fb      	ldrb	r3, [r7, #7]
 8004398:	f003 021f 	and.w	r2, r3, #31
 800439c:	4907      	ldr	r1, [pc, #28]	@ (80043bc <__NVIC_EnableIRQ+0x38>)
 800439e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a2:	095b      	lsrs	r3, r3, #5
 80043a4:	2001      	movs	r0, #1
 80043a6:	fa00 f202 	lsl.w	r2, r0, r2
 80043aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80043ae:	bf00      	nop
 80043b0:	370c      	adds	r7, #12
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	e000e100 	.word	0xe000e100

080043c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	4603      	mov	r3, r0
 80043c8:	6039      	str	r1, [r7, #0]
 80043ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	db0a      	blt.n	80043ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	b2da      	uxtb	r2, r3
 80043d8:	490c      	ldr	r1, [pc, #48]	@ (800440c <__NVIC_SetPriority+0x4c>)
 80043da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043de:	0112      	lsls	r2, r2, #4
 80043e0:	b2d2      	uxtb	r2, r2
 80043e2:	440b      	add	r3, r1
 80043e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043e8:	e00a      	b.n	8004400 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	b2da      	uxtb	r2, r3
 80043ee:	4908      	ldr	r1, [pc, #32]	@ (8004410 <__NVIC_SetPriority+0x50>)
 80043f0:	79fb      	ldrb	r3, [r7, #7]
 80043f2:	f003 030f 	and.w	r3, r3, #15
 80043f6:	3b04      	subs	r3, #4
 80043f8:	0112      	lsls	r2, r2, #4
 80043fa:	b2d2      	uxtb	r2, r2
 80043fc:	440b      	add	r3, r1
 80043fe:	761a      	strb	r2, [r3, #24]
}
 8004400:	bf00      	nop
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr
 800440c:	e000e100 	.word	0xe000e100
 8004410:	e000ed00 	.word	0xe000ed00

08004414 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004414:	b480      	push	{r7}
 8004416:	b089      	sub	sp, #36	@ 0x24
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f003 0307 	and.w	r3, r3, #7
 8004426:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	f1c3 0307 	rsb	r3, r3, #7
 800442e:	2b04      	cmp	r3, #4
 8004430:	bf28      	it	cs
 8004432:	2304      	movcs	r3, #4
 8004434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	3304      	adds	r3, #4
 800443a:	2b06      	cmp	r3, #6
 800443c:	d902      	bls.n	8004444 <NVIC_EncodePriority+0x30>
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	3b03      	subs	r3, #3
 8004442:	e000      	b.n	8004446 <NVIC_EncodePriority+0x32>
 8004444:	2300      	movs	r3, #0
 8004446:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004448:	f04f 32ff 	mov.w	r2, #4294967295
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	fa02 f303 	lsl.w	r3, r2, r3
 8004452:	43da      	mvns	r2, r3
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	401a      	ands	r2, r3
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800445c:	f04f 31ff 	mov.w	r1, #4294967295
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	fa01 f303 	lsl.w	r3, r1, r3
 8004466:	43d9      	mvns	r1, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800446c:	4313      	orrs	r3, r2
         );
}
 800446e:	4618      	mov	r0, r3
 8004470:	3724      	adds	r7, #36	@ 0x24
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
	...

0800447c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	3b01      	subs	r3, #1
 8004488:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800448c:	d301      	bcc.n	8004492 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800448e:	2301      	movs	r3, #1
 8004490:	e00f      	b.n	80044b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004492:	4a0a      	ldr	r2, [pc, #40]	@ (80044bc <SysTick_Config+0x40>)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	3b01      	subs	r3, #1
 8004498:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800449a:	210f      	movs	r1, #15
 800449c:	f04f 30ff 	mov.w	r0, #4294967295
 80044a0:	f7ff ff8e 	bl	80043c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044a4:	4b05      	ldr	r3, [pc, #20]	@ (80044bc <SysTick_Config+0x40>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044aa:	4b04      	ldr	r3, [pc, #16]	@ (80044bc <SysTick_Config+0x40>)
 80044ac:	2207      	movs	r2, #7
 80044ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3708      	adds	r7, #8
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	e000e010 	.word	0xe000e010

080044c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f7ff ff29 	bl	8004320 <__NVIC_SetPriorityGrouping>
}
 80044ce:	bf00      	nop
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b086      	sub	sp, #24
 80044da:	af00      	add	r7, sp, #0
 80044dc:	4603      	mov	r3, r0
 80044de:	60b9      	str	r1, [r7, #8]
 80044e0:	607a      	str	r2, [r7, #4]
 80044e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80044e4:	2300      	movs	r3, #0
 80044e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80044e8:	f7ff ff3e 	bl	8004368 <__NVIC_GetPriorityGrouping>
 80044ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	68b9      	ldr	r1, [r7, #8]
 80044f2:	6978      	ldr	r0, [r7, #20]
 80044f4:	f7ff ff8e 	bl	8004414 <NVIC_EncodePriority>
 80044f8:	4602      	mov	r2, r0
 80044fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044fe:	4611      	mov	r1, r2
 8004500:	4618      	mov	r0, r3
 8004502:	f7ff ff5d 	bl	80043c0 <__NVIC_SetPriority>
}
 8004506:	bf00      	nop
 8004508:	3718      	adds	r7, #24
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800450e:	b580      	push	{r7, lr}
 8004510:	b082      	sub	sp, #8
 8004512:	af00      	add	r7, sp, #0
 8004514:	4603      	mov	r3, r0
 8004516:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800451c:	4618      	mov	r0, r3
 800451e:	f7ff ff31 	bl	8004384 <__NVIC_EnableIRQ>
}
 8004522:	bf00      	nop
 8004524:	3708      	adds	r7, #8
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b082      	sub	sp, #8
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f7ff ffa2 	bl	800447c <SysTick_Config>
 8004538:	4603      	mov	r3, r0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
	...

08004544 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004544:	b480      	push	{r7}
 8004546:	b087      	sub	sp, #28
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800454e:	2300      	movs	r3, #0
 8004550:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004552:	e154      	b.n	80047fe <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	2101      	movs	r1, #1
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	fa01 f303 	lsl.w	r3, r1, r3
 8004560:	4013      	ands	r3, r2
 8004562:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2b00      	cmp	r3, #0
 8004568:	f000 8146 	beq.w	80047f8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f003 0303 	and.w	r3, r3, #3
 8004574:	2b01      	cmp	r3, #1
 8004576:	d005      	beq.n	8004584 <HAL_GPIO_Init+0x40>
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f003 0303 	and.w	r3, r3, #3
 8004580:	2b02      	cmp	r3, #2
 8004582:	d130      	bne.n	80045e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	005b      	lsls	r3, r3, #1
 800458e:	2203      	movs	r2, #3
 8004590:	fa02 f303 	lsl.w	r3, r2, r3
 8004594:	43db      	mvns	r3, r3
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	4013      	ands	r3, r2
 800459a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	68da      	ldr	r2, [r3, #12]
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	005b      	lsls	r3, r3, #1
 80045a4:	fa02 f303 	lsl.w	r3, r2, r3
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80045ba:	2201      	movs	r2, #1
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	fa02 f303 	lsl.w	r3, r2, r3
 80045c2:	43db      	mvns	r3, r3
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	4013      	ands	r3, r2
 80045c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	091b      	lsrs	r3, r3, #4
 80045d0:	f003 0201 	and.w	r2, r3, #1
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	fa02 f303 	lsl.w	r3, r2, r3
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	4313      	orrs	r3, r2
 80045de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f003 0303 	and.w	r3, r3, #3
 80045ee:	2b03      	cmp	r3, #3
 80045f0:	d017      	beq.n	8004622 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	005b      	lsls	r3, r3, #1
 80045fc:	2203      	movs	r2, #3
 80045fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004602:	43db      	mvns	r3, r3
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	4013      	ands	r3, r2
 8004608:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	689a      	ldr	r2, [r3, #8]
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	005b      	lsls	r3, r3, #1
 8004612:	fa02 f303 	lsl.w	r3, r2, r3
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	4313      	orrs	r3, r2
 800461a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f003 0303 	and.w	r3, r3, #3
 800462a:	2b02      	cmp	r3, #2
 800462c:	d123      	bne.n	8004676 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	08da      	lsrs	r2, r3, #3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	3208      	adds	r2, #8
 8004636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800463a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	f003 0307 	and.w	r3, r3, #7
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	220f      	movs	r2, #15
 8004646:	fa02 f303 	lsl.w	r3, r2, r3
 800464a:	43db      	mvns	r3, r3
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	4013      	ands	r3, r2
 8004650:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	691a      	ldr	r2, [r3, #16]
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	f003 0307 	and.w	r3, r3, #7
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	fa02 f303 	lsl.w	r3, r2, r3
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	4313      	orrs	r3, r2
 8004666:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	08da      	lsrs	r2, r3, #3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	3208      	adds	r2, #8
 8004670:	6939      	ldr	r1, [r7, #16]
 8004672:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	005b      	lsls	r3, r3, #1
 8004680:	2203      	movs	r2, #3
 8004682:	fa02 f303 	lsl.w	r3, r2, r3
 8004686:	43db      	mvns	r3, r3
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	4013      	ands	r3, r2
 800468c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f003 0203 	and.w	r2, r3, #3
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	fa02 f303 	lsl.w	r3, r2, r3
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f000 80a0 	beq.w	80047f8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046b8:	4b58      	ldr	r3, [pc, #352]	@ (800481c <HAL_GPIO_Init+0x2d8>)
 80046ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046bc:	4a57      	ldr	r2, [pc, #348]	@ (800481c <HAL_GPIO_Init+0x2d8>)
 80046be:	f043 0301 	orr.w	r3, r3, #1
 80046c2:	6613      	str	r3, [r2, #96]	@ 0x60
 80046c4:	4b55      	ldr	r3, [pc, #340]	@ (800481c <HAL_GPIO_Init+0x2d8>)
 80046c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046c8:	f003 0301 	and.w	r3, r3, #1
 80046cc:	60bb      	str	r3, [r7, #8]
 80046ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80046d0:	4a53      	ldr	r2, [pc, #332]	@ (8004820 <HAL_GPIO_Init+0x2dc>)
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	089b      	lsrs	r3, r3, #2
 80046d6:	3302      	adds	r3, #2
 80046d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	f003 0303 	and.w	r3, r3, #3
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	220f      	movs	r2, #15
 80046e8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ec:	43db      	mvns	r3, r3
 80046ee:	693a      	ldr	r2, [r7, #16]
 80046f0:	4013      	ands	r3, r2
 80046f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80046fa:	d019      	beq.n	8004730 <HAL_GPIO_Init+0x1ec>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a49      	ldr	r2, [pc, #292]	@ (8004824 <HAL_GPIO_Init+0x2e0>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d013      	beq.n	800472c <HAL_GPIO_Init+0x1e8>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a48      	ldr	r2, [pc, #288]	@ (8004828 <HAL_GPIO_Init+0x2e4>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d00d      	beq.n	8004728 <HAL_GPIO_Init+0x1e4>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a47      	ldr	r2, [pc, #284]	@ (800482c <HAL_GPIO_Init+0x2e8>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d007      	beq.n	8004724 <HAL_GPIO_Init+0x1e0>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a46      	ldr	r2, [pc, #280]	@ (8004830 <HAL_GPIO_Init+0x2ec>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d101      	bne.n	8004720 <HAL_GPIO_Init+0x1dc>
 800471c:	2304      	movs	r3, #4
 800471e:	e008      	b.n	8004732 <HAL_GPIO_Init+0x1ee>
 8004720:	2307      	movs	r3, #7
 8004722:	e006      	b.n	8004732 <HAL_GPIO_Init+0x1ee>
 8004724:	2303      	movs	r3, #3
 8004726:	e004      	b.n	8004732 <HAL_GPIO_Init+0x1ee>
 8004728:	2302      	movs	r3, #2
 800472a:	e002      	b.n	8004732 <HAL_GPIO_Init+0x1ee>
 800472c:	2301      	movs	r3, #1
 800472e:	e000      	b.n	8004732 <HAL_GPIO_Init+0x1ee>
 8004730:	2300      	movs	r3, #0
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	f002 0203 	and.w	r2, r2, #3
 8004738:	0092      	lsls	r2, r2, #2
 800473a:	4093      	lsls	r3, r2
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	4313      	orrs	r3, r2
 8004740:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004742:	4937      	ldr	r1, [pc, #220]	@ (8004820 <HAL_GPIO_Init+0x2dc>)
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	089b      	lsrs	r3, r3, #2
 8004748:	3302      	adds	r3, #2
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004750:	4b38      	ldr	r3, [pc, #224]	@ (8004834 <HAL_GPIO_Init+0x2f0>)
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	43db      	mvns	r3, r3
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	4013      	ands	r3, r2
 800475e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d003      	beq.n	8004774 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800476c:	693a      	ldr	r2, [r7, #16]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	4313      	orrs	r3, r2
 8004772:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004774:	4a2f      	ldr	r2, [pc, #188]	@ (8004834 <HAL_GPIO_Init+0x2f0>)
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800477a:	4b2e      	ldr	r3, [pc, #184]	@ (8004834 <HAL_GPIO_Init+0x2f0>)
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	43db      	mvns	r3, r3
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	4013      	ands	r3, r2
 8004788:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d003      	beq.n	800479e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4313      	orrs	r3, r2
 800479c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800479e:	4a25      	ldr	r2, [pc, #148]	@ (8004834 <HAL_GPIO_Init+0x2f0>)
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80047a4:	4b23      	ldr	r3, [pc, #140]	@ (8004834 <HAL_GPIO_Init+0x2f0>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	43db      	mvns	r3, r3
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	4013      	ands	r3, r2
 80047b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d003      	beq.n	80047c8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80047c8:	4a1a      	ldr	r2, [pc, #104]	@ (8004834 <HAL_GPIO_Init+0x2f0>)
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80047ce:	4b19      	ldr	r3, [pc, #100]	@ (8004834 <HAL_GPIO_Init+0x2f0>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	43db      	mvns	r3, r3
 80047d8:	693a      	ldr	r2, [r7, #16]
 80047da:	4013      	ands	r3, r2
 80047dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d003      	beq.n	80047f2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80047f2:	4a10      	ldr	r2, [pc, #64]	@ (8004834 <HAL_GPIO_Init+0x2f0>)
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	3301      	adds	r3, #1
 80047fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	fa22 f303 	lsr.w	r3, r2, r3
 8004808:	2b00      	cmp	r3, #0
 800480a:	f47f aea3 	bne.w	8004554 <HAL_GPIO_Init+0x10>
  }
}
 800480e:	bf00      	nop
 8004810:	bf00      	nop
 8004812:	371c      	adds	r7, #28
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr
 800481c:	40021000 	.word	0x40021000
 8004820:	40010000 	.word	0x40010000
 8004824:	48000400 	.word	0x48000400
 8004828:	48000800 	.word	0x48000800
 800482c:	48000c00 	.word	0x48000c00
 8004830:	48001000 	.word	0x48001000
 8004834:	40010400 	.word	0x40010400

08004838 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	460b      	mov	r3, r1
 8004842:	807b      	strh	r3, [r7, #2]
 8004844:	4613      	mov	r3, r2
 8004846:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004848:	787b      	ldrb	r3, [r7, #1]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d003      	beq.n	8004856 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800484e:	887a      	ldrh	r2, [r7, #2]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004854:	e002      	b.n	800485c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004856:	887a      	ldrh	r2, [r7, #2]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004868:	b480      	push	{r7}
 800486a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800486c:	4b04      	ldr	r3, [pc, #16]	@ (8004880 <HAL_PWREx_GetVoltageRange+0x18>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004874:	4618      	mov	r0, r3
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	40007000 	.word	0x40007000

08004884 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004892:	d130      	bne.n	80048f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004894:	4b23      	ldr	r3, [pc, #140]	@ (8004924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800489c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048a0:	d038      	beq.n	8004914 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80048a2:	4b20      	ldr	r3, [pc, #128]	@ (8004924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80048aa:	4a1e      	ldr	r2, [pc, #120]	@ (8004924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80048b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80048b2:	4b1d      	ldr	r3, [pc, #116]	@ (8004928 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2232      	movs	r2, #50	@ 0x32
 80048b8:	fb02 f303 	mul.w	r3, r2, r3
 80048bc:	4a1b      	ldr	r2, [pc, #108]	@ (800492c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80048be:	fba2 2303 	umull	r2, r3, r2, r3
 80048c2:	0c9b      	lsrs	r3, r3, #18
 80048c4:	3301      	adds	r3, #1
 80048c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048c8:	e002      	b.n	80048d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	3b01      	subs	r3, #1
 80048ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048d0:	4b14      	ldr	r3, [pc, #80]	@ (8004924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048dc:	d102      	bne.n	80048e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1f2      	bne.n	80048ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048e4:	4b0f      	ldr	r3, [pc, #60]	@ (8004924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048e6:	695b      	ldr	r3, [r3, #20]
 80048e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048f0:	d110      	bne.n	8004914 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e00f      	b.n	8004916 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80048f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80048fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004902:	d007      	beq.n	8004914 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004904:	4b07      	ldr	r3, [pc, #28]	@ (8004924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800490c:	4a05      	ldr	r2, [pc, #20]	@ (8004924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800490e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004912:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3714      	adds	r7, #20
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	40007000 	.word	0x40007000
 8004928:	20000000 	.word	0x20000000
 800492c:	431bde83 	.word	0x431bde83

08004930 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b088      	sub	sp, #32
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d102      	bne.n	8004944 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	f000 bc02 	b.w	8005148 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004944:	4b96      	ldr	r3, [pc, #600]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f003 030c 	and.w	r3, r3, #12
 800494c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800494e:	4b94      	ldr	r3, [pc, #592]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	f003 0303 	and.w	r3, r3, #3
 8004956:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0310 	and.w	r3, r3, #16
 8004960:	2b00      	cmp	r3, #0
 8004962:	f000 80e4 	beq.w	8004b2e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d007      	beq.n	800497c <HAL_RCC_OscConfig+0x4c>
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	2b0c      	cmp	r3, #12
 8004970:	f040 808b 	bne.w	8004a8a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	2b01      	cmp	r3, #1
 8004978:	f040 8087 	bne.w	8004a8a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800497c:	4b88      	ldr	r3, [pc, #544]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0302 	and.w	r3, r3, #2
 8004984:	2b00      	cmp	r3, #0
 8004986:	d005      	beq.n	8004994 <HAL_RCC_OscConfig+0x64>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d101      	bne.n	8004994 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e3d9      	b.n	8005148 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a1a      	ldr	r2, [r3, #32]
 8004998:	4b81      	ldr	r3, [pc, #516]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0308 	and.w	r3, r3, #8
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d004      	beq.n	80049ae <HAL_RCC_OscConfig+0x7e>
 80049a4:	4b7e      	ldr	r3, [pc, #504]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049ac:	e005      	b.n	80049ba <HAL_RCC_OscConfig+0x8a>
 80049ae:	4b7c      	ldr	r3, [pc, #496]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 80049b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049b4:	091b      	lsrs	r3, r3, #4
 80049b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d223      	bcs.n	8004a06 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a1b      	ldr	r3, [r3, #32]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f000 fd54 	bl	8005470 <RCC_SetFlashLatencyFromMSIRange>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d001      	beq.n	80049d2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e3ba      	b.n	8005148 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049d2:	4b73      	ldr	r3, [pc, #460]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a72      	ldr	r2, [pc, #456]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 80049d8:	f043 0308 	orr.w	r3, r3, #8
 80049dc:	6013      	str	r3, [r2, #0]
 80049de:	4b70      	ldr	r3, [pc, #448]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	496d      	ldr	r1, [pc, #436]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049f0:	4b6b      	ldr	r3, [pc, #428]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	69db      	ldr	r3, [r3, #28]
 80049fc:	021b      	lsls	r3, r3, #8
 80049fe:	4968      	ldr	r1, [pc, #416]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	604b      	str	r3, [r1, #4]
 8004a04:	e025      	b.n	8004a52 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a06:	4b66      	ldr	r3, [pc, #408]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a65      	ldr	r2, [pc, #404]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004a0c:	f043 0308 	orr.w	r3, r3, #8
 8004a10:	6013      	str	r3, [r2, #0]
 8004a12:	4b63      	ldr	r3, [pc, #396]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	4960      	ldr	r1, [pc, #384]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a24:	4b5e      	ldr	r3, [pc, #376]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	69db      	ldr	r3, [r3, #28]
 8004a30:	021b      	lsls	r3, r3, #8
 8004a32:	495b      	ldr	r1, [pc, #364]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d109      	bne.n	8004a52 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 fd14 	bl	8005470 <RCC_SetFlashLatencyFromMSIRange>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d001      	beq.n	8004a52 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e37a      	b.n	8005148 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a52:	f000 fc81 	bl	8005358 <HAL_RCC_GetSysClockFreq>
 8004a56:	4602      	mov	r2, r0
 8004a58:	4b51      	ldr	r3, [pc, #324]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	091b      	lsrs	r3, r3, #4
 8004a5e:	f003 030f 	and.w	r3, r3, #15
 8004a62:	4950      	ldr	r1, [pc, #320]	@ (8004ba4 <HAL_RCC_OscConfig+0x274>)
 8004a64:	5ccb      	ldrb	r3, [r1, r3]
 8004a66:	f003 031f 	and.w	r3, r3, #31
 8004a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a6e:	4a4e      	ldr	r2, [pc, #312]	@ (8004ba8 <HAL_RCC_OscConfig+0x278>)
 8004a70:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004a72:	4b4e      	ldr	r3, [pc, #312]	@ (8004bac <HAL_RCC_OscConfig+0x27c>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7fe fd82 	bl	8003580 <HAL_InitTick>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004a80:	7bfb      	ldrb	r3, [r7, #15]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d052      	beq.n	8004b2c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004a86:	7bfb      	ldrb	r3, [r7, #15]
 8004a88:	e35e      	b.n	8005148 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d032      	beq.n	8004af8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004a92:	4b43      	ldr	r3, [pc, #268]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a42      	ldr	r2, [pc, #264]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004a98:	f043 0301 	orr.w	r3, r3, #1
 8004a9c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a9e:	f7fe fdbf 	bl	8003620 <HAL_GetTick>
 8004aa2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004aa4:	e008      	b.n	8004ab8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004aa6:	f7fe fdbb 	bl	8003620 <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d901      	bls.n	8004ab8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e347      	b.n	8005148 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ab8:	4b39      	ldr	r3, [pc, #228]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0302 	and.w	r3, r3, #2
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d0f0      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ac4:	4b36      	ldr	r3, [pc, #216]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a35      	ldr	r2, [pc, #212]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004aca:	f043 0308 	orr.w	r3, r3, #8
 8004ace:	6013      	str	r3, [r2, #0]
 8004ad0:	4b33      	ldr	r3, [pc, #204]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a1b      	ldr	r3, [r3, #32]
 8004adc:	4930      	ldr	r1, [pc, #192]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ae2:	4b2f      	ldr	r3, [pc, #188]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	69db      	ldr	r3, [r3, #28]
 8004aee:	021b      	lsls	r3, r3, #8
 8004af0:	492b      	ldr	r1, [pc, #172]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	604b      	str	r3, [r1, #4]
 8004af6:	e01a      	b.n	8004b2e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004af8:	4b29      	ldr	r3, [pc, #164]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a28      	ldr	r2, [pc, #160]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004afe:	f023 0301 	bic.w	r3, r3, #1
 8004b02:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b04:	f7fe fd8c 	bl	8003620 <HAL_GetTick>
 8004b08:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b0a:	e008      	b.n	8004b1e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b0c:	f7fe fd88 	bl	8003620 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d901      	bls.n	8004b1e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e314      	b.n	8005148 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b1e:	4b20      	ldr	r3, [pc, #128]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1f0      	bne.n	8004b0c <HAL_RCC_OscConfig+0x1dc>
 8004b2a:	e000      	b.n	8004b2e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b2c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d073      	beq.n	8004c22 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	2b08      	cmp	r3, #8
 8004b3e:	d005      	beq.n	8004b4c <HAL_RCC_OscConfig+0x21c>
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	2b0c      	cmp	r3, #12
 8004b44:	d10e      	bne.n	8004b64 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	2b03      	cmp	r3, #3
 8004b4a:	d10b      	bne.n	8004b64 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b4c:	4b14      	ldr	r3, [pc, #80]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d063      	beq.n	8004c20 <HAL_RCC_OscConfig+0x2f0>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d15f      	bne.n	8004c20 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e2f1      	b.n	8005148 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b6c:	d106      	bne.n	8004b7c <HAL_RCC_OscConfig+0x24c>
 8004b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a0b      	ldr	r2, [pc, #44]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004b74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b78:	6013      	str	r3, [r2, #0]
 8004b7a:	e025      	b.n	8004bc8 <HAL_RCC_OscConfig+0x298>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b84:	d114      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x280>
 8004b86:	4b06      	ldr	r3, [pc, #24]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a05      	ldr	r2, [pc, #20]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004b8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b90:	6013      	str	r3, [r2, #0]
 8004b92:	4b03      	ldr	r3, [pc, #12]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a02      	ldr	r2, [pc, #8]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004b98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b9c:	6013      	str	r3, [r2, #0]
 8004b9e:	e013      	b.n	8004bc8 <HAL_RCC_OscConfig+0x298>
 8004ba0:	40021000 	.word	0x40021000
 8004ba4:	08006688 	.word	0x08006688
 8004ba8:	20000000 	.word	0x20000000
 8004bac:	20000004 	.word	0x20000004
 8004bb0:	4ba0      	ldr	r3, [pc, #640]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a9f      	ldr	r2, [pc, #636]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004bb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bba:	6013      	str	r3, [r2, #0]
 8004bbc:	4b9d      	ldr	r3, [pc, #628]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a9c      	ldr	r2, [pc, #624]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004bc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004bc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d013      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd0:	f7fe fd26 	bl	8003620 <HAL_GetTick>
 8004bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bd6:	e008      	b.n	8004bea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bd8:	f7fe fd22 	bl	8003620 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b64      	cmp	r3, #100	@ 0x64
 8004be4:	d901      	bls.n	8004bea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e2ae      	b.n	8005148 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bea:	4b92      	ldr	r3, [pc, #584]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d0f0      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x2a8>
 8004bf6:	e014      	b.n	8004c22 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf8:	f7fe fd12 	bl	8003620 <HAL_GetTick>
 8004bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bfe:	e008      	b.n	8004c12 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c00:	f7fe fd0e 	bl	8003620 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b64      	cmp	r3, #100	@ 0x64
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e29a      	b.n	8005148 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c12:	4b88      	ldr	r3, [pc, #544]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1f0      	bne.n	8004c00 <HAL_RCC_OscConfig+0x2d0>
 8004c1e:	e000      	b.n	8004c22 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d060      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	2b04      	cmp	r3, #4
 8004c32:	d005      	beq.n	8004c40 <HAL_RCC_OscConfig+0x310>
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	2b0c      	cmp	r3, #12
 8004c38:	d119      	bne.n	8004c6e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d116      	bne.n	8004c6e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c40:	4b7c      	ldr	r3, [pc, #496]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d005      	beq.n	8004c58 <HAL_RCC_OscConfig+0x328>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d101      	bne.n	8004c58 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e277      	b.n	8005148 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c58:	4b76      	ldr	r3, [pc, #472]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	061b      	lsls	r3, r3, #24
 8004c66:	4973      	ldr	r1, [pc, #460]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c6c:	e040      	b.n	8004cf0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d023      	beq.n	8004cbe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c76:	4b6f      	ldr	r3, [pc, #444]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a6e      	ldr	r2, [pc, #440]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004c7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c82:	f7fe fccd 	bl	8003620 <HAL_GetTick>
 8004c86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c88:	e008      	b.n	8004c9c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c8a:	f7fe fcc9 	bl	8003620 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d901      	bls.n	8004c9c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e255      	b.n	8005148 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c9c:	4b65      	ldr	r3, [pc, #404]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d0f0      	beq.n	8004c8a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ca8:	4b62      	ldr	r3, [pc, #392]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	061b      	lsls	r3, r3, #24
 8004cb6:	495f      	ldr	r1, [pc, #380]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	604b      	str	r3, [r1, #4]
 8004cbc:	e018      	b.n	8004cf0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cbe:	4b5d      	ldr	r3, [pc, #372]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a5c      	ldr	r2, [pc, #368]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004cc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004cc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cca:	f7fe fca9 	bl	8003620 <HAL_GetTick>
 8004cce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004cd0:	e008      	b.n	8004ce4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cd2:	f7fe fca5 	bl	8003620 <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d901      	bls.n	8004ce4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e231      	b.n	8005148 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ce4:	4b53      	ldr	r3, [pc, #332]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1f0      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0308 	and.w	r3, r3, #8
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d03c      	beq.n	8004d76 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	695b      	ldr	r3, [r3, #20]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d01c      	beq.n	8004d3e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d04:	4b4b      	ldr	r3, [pc, #300]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d0a:	4a4a      	ldr	r2, [pc, #296]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004d0c:	f043 0301 	orr.w	r3, r3, #1
 8004d10:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d14:	f7fe fc84 	bl	8003620 <HAL_GetTick>
 8004d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d1a:	e008      	b.n	8004d2e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d1c:	f7fe fc80 	bl	8003620 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d901      	bls.n	8004d2e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e20c      	b.n	8005148 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d2e:	4b41      	ldr	r3, [pc, #260]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004d30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d34:	f003 0302 	and.w	r3, r3, #2
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d0ef      	beq.n	8004d1c <HAL_RCC_OscConfig+0x3ec>
 8004d3c:	e01b      	b.n	8004d76 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d3e:	4b3d      	ldr	r3, [pc, #244]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004d40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d44:	4a3b      	ldr	r2, [pc, #236]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004d46:	f023 0301 	bic.w	r3, r3, #1
 8004d4a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d4e:	f7fe fc67 	bl	8003620 <HAL_GetTick>
 8004d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d54:	e008      	b.n	8004d68 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d56:	f7fe fc63 	bl	8003620 <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d901      	bls.n	8004d68 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e1ef      	b.n	8005148 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d68:	4b32      	ldr	r3, [pc, #200]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d6e:	f003 0302 	and.w	r3, r3, #2
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1ef      	bne.n	8004d56 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0304 	and.w	r3, r3, #4
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	f000 80a6 	beq.w	8004ed0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d84:	2300      	movs	r3, #0
 8004d86:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004d88:	4b2a      	ldr	r3, [pc, #168]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10d      	bne.n	8004db0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d94:	4b27      	ldr	r3, [pc, #156]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004d96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d98:	4a26      	ldr	r2, [pc, #152]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004d9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004da0:	4b24      	ldr	r3, [pc, #144]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004da4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004da8:	60bb      	str	r3, [r7, #8]
 8004daa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dac:	2301      	movs	r3, #1
 8004dae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004db0:	4b21      	ldr	r3, [pc, #132]	@ (8004e38 <HAL_RCC_OscConfig+0x508>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d118      	bne.n	8004dee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004dbc:	4b1e      	ldr	r3, [pc, #120]	@ (8004e38 <HAL_RCC_OscConfig+0x508>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a1d      	ldr	r2, [pc, #116]	@ (8004e38 <HAL_RCC_OscConfig+0x508>)
 8004dc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dc6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dc8:	f7fe fc2a 	bl	8003620 <HAL_GetTick>
 8004dcc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dce:	e008      	b.n	8004de2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dd0:	f7fe fc26 	bl	8003620 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e1b2      	b.n	8005148 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004de2:	4b15      	ldr	r3, [pc, #84]	@ (8004e38 <HAL_RCC_OscConfig+0x508>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d0f0      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d108      	bne.n	8004e08 <HAL_RCC_OscConfig+0x4d8>
 8004df6:	4b0f      	ldr	r3, [pc, #60]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dfc:	4a0d      	ldr	r2, [pc, #52]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004dfe:	f043 0301 	orr.w	r3, r3, #1
 8004e02:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e06:	e029      	b.n	8004e5c <HAL_RCC_OscConfig+0x52c>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	2b05      	cmp	r3, #5
 8004e0e:	d115      	bne.n	8004e3c <HAL_RCC_OscConfig+0x50c>
 8004e10:	4b08      	ldr	r3, [pc, #32]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e16:	4a07      	ldr	r2, [pc, #28]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004e18:	f043 0304 	orr.w	r3, r3, #4
 8004e1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e20:	4b04      	ldr	r3, [pc, #16]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e26:	4a03      	ldr	r2, [pc, #12]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004e28:	f043 0301 	orr.w	r3, r3, #1
 8004e2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e30:	e014      	b.n	8004e5c <HAL_RCC_OscConfig+0x52c>
 8004e32:	bf00      	nop
 8004e34:	40021000 	.word	0x40021000
 8004e38:	40007000 	.word	0x40007000
 8004e3c:	4b9a      	ldr	r3, [pc, #616]	@ (80050a8 <HAL_RCC_OscConfig+0x778>)
 8004e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e42:	4a99      	ldr	r2, [pc, #612]	@ (80050a8 <HAL_RCC_OscConfig+0x778>)
 8004e44:	f023 0301 	bic.w	r3, r3, #1
 8004e48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e4c:	4b96      	ldr	r3, [pc, #600]	@ (80050a8 <HAL_RCC_OscConfig+0x778>)
 8004e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e52:	4a95      	ldr	r2, [pc, #596]	@ (80050a8 <HAL_RCC_OscConfig+0x778>)
 8004e54:	f023 0304 	bic.w	r3, r3, #4
 8004e58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d016      	beq.n	8004e92 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e64:	f7fe fbdc 	bl	8003620 <HAL_GetTick>
 8004e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e6a:	e00a      	b.n	8004e82 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e6c:	f7fe fbd8 	bl	8003620 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e162      	b.n	8005148 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e82:	4b89      	ldr	r3, [pc, #548]	@ (80050a8 <HAL_RCC_OscConfig+0x778>)
 8004e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e88:	f003 0302 	and.w	r3, r3, #2
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d0ed      	beq.n	8004e6c <HAL_RCC_OscConfig+0x53c>
 8004e90:	e015      	b.n	8004ebe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e92:	f7fe fbc5 	bl	8003620 <HAL_GetTick>
 8004e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e98:	e00a      	b.n	8004eb0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e9a:	f7fe fbc1 	bl	8003620 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d901      	bls.n	8004eb0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e14b      	b.n	8005148 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004eb0:	4b7d      	ldr	r3, [pc, #500]	@ (80050a8 <HAL_RCC_OscConfig+0x778>)
 8004eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1ed      	bne.n	8004e9a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ebe:	7ffb      	ldrb	r3, [r7, #31]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d105      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ec4:	4b78      	ldr	r3, [pc, #480]	@ (80050a8 <HAL_RCC_OscConfig+0x778>)
 8004ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ec8:	4a77      	ldr	r2, [pc, #476]	@ (80050a8 <HAL_RCC_OscConfig+0x778>)
 8004eca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ece:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0320 	and.w	r3, r3, #32
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d03c      	beq.n	8004f56 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d01c      	beq.n	8004f1e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ee4:	4b70      	ldr	r3, [pc, #448]	@ (80050a8 <HAL_RCC_OscConfig+0x778>)
 8004ee6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004eea:	4a6f      	ldr	r2, [pc, #444]	@ (80050a8 <HAL_RCC_OscConfig+0x778>)
 8004eec:	f043 0301 	orr.w	r3, r3, #1
 8004ef0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ef4:	f7fe fb94 	bl	8003620 <HAL_GetTick>
 8004ef8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004efa:	e008      	b.n	8004f0e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004efc:	f7fe fb90 	bl	8003620 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e11c      	b.n	8005148 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f0e:	4b66      	ldr	r3, [pc, #408]	@ (80050a8 <HAL_RCC_OscConfig+0x778>)
 8004f10:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f14:	f003 0302 	and.w	r3, r3, #2
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d0ef      	beq.n	8004efc <HAL_RCC_OscConfig+0x5cc>
 8004f1c:	e01b      	b.n	8004f56 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f1e:	4b62      	ldr	r3, [pc, #392]	@ (80050a8 <HAL_RCC_OscConfig+0x778>)
 8004f20:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f24:	4a60      	ldr	r2, [pc, #384]	@ (80050a8 <HAL_RCC_OscConfig+0x778>)
 8004f26:	f023 0301 	bic.w	r3, r3, #1
 8004f2a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f2e:	f7fe fb77 	bl	8003620 <HAL_GetTick>
 8004f32:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f34:	e008      	b.n	8004f48 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f36:	f7fe fb73 	bl	8003620 <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	d901      	bls.n	8004f48 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e0ff      	b.n	8005148 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f48:	4b57      	ldr	r3, [pc, #348]	@ (80050a8 <HAL_RCC_OscConfig+0x778>)
 8004f4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1ef      	bne.n	8004f36 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	f000 80f3 	beq.w	8005146 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	f040 80c9 	bne.w	80050fc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004f6a:	4b4f      	ldr	r3, [pc, #316]	@ (80050a8 <HAL_RCC_OscConfig+0x778>)
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	f003 0203 	and.w	r2, r3, #3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d12c      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d123      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f9a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d11b      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004faa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d113      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fba:	085b      	lsrs	r3, r3, #1
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d109      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fce:	085b      	lsrs	r3, r3, #1
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d06b      	beq.n	80050b0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	2b0c      	cmp	r3, #12
 8004fdc:	d062      	beq.n	80050a4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004fde:	4b32      	ldr	r3, [pc, #200]	@ (80050a8 <HAL_RCC_OscConfig+0x778>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d001      	beq.n	8004fee <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e0ac      	b.n	8005148 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004fee:	4b2e      	ldr	r3, [pc, #184]	@ (80050a8 <HAL_RCC_OscConfig+0x778>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a2d      	ldr	r2, [pc, #180]	@ (80050a8 <HAL_RCC_OscConfig+0x778>)
 8004ff4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ff8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ffa:	f7fe fb11 	bl	8003620 <HAL_GetTick>
 8004ffe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005000:	e008      	b.n	8005014 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005002:	f7fe fb0d 	bl	8003620 <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	2b02      	cmp	r3, #2
 800500e:	d901      	bls.n	8005014 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e099      	b.n	8005148 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005014:	4b24      	ldr	r3, [pc, #144]	@ (80050a8 <HAL_RCC_OscConfig+0x778>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1f0      	bne.n	8005002 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005020:	4b21      	ldr	r3, [pc, #132]	@ (80050a8 <HAL_RCC_OscConfig+0x778>)
 8005022:	68da      	ldr	r2, [r3, #12]
 8005024:	4b21      	ldr	r3, [pc, #132]	@ (80050ac <HAL_RCC_OscConfig+0x77c>)
 8005026:	4013      	ands	r3, r2
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005030:	3a01      	subs	r2, #1
 8005032:	0112      	lsls	r2, r2, #4
 8005034:	4311      	orrs	r1, r2
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800503a:	0212      	lsls	r2, r2, #8
 800503c:	4311      	orrs	r1, r2
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005042:	0852      	lsrs	r2, r2, #1
 8005044:	3a01      	subs	r2, #1
 8005046:	0552      	lsls	r2, r2, #21
 8005048:	4311      	orrs	r1, r2
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800504e:	0852      	lsrs	r2, r2, #1
 8005050:	3a01      	subs	r2, #1
 8005052:	0652      	lsls	r2, r2, #25
 8005054:	4311      	orrs	r1, r2
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800505a:	06d2      	lsls	r2, r2, #27
 800505c:	430a      	orrs	r2, r1
 800505e:	4912      	ldr	r1, [pc, #72]	@ (80050a8 <HAL_RCC_OscConfig+0x778>)
 8005060:	4313      	orrs	r3, r2
 8005062:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005064:	4b10      	ldr	r3, [pc, #64]	@ (80050a8 <HAL_RCC_OscConfig+0x778>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a0f      	ldr	r2, [pc, #60]	@ (80050a8 <HAL_RCC_OscConfig+0x778>)
 800506a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800506e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005070:	4b0d      	ldr	r3, [pc, #52]	@ (80050a8 <HAL_RCC_OscConfig+0x778>)
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	4a0c      	ldr	r2, [pc, #48]	@ (80050a8 <HAL_RCC_OscConfig+0x778>)
 8005076:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800507a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800507c:	f7fe fad0 	bl	8003620 <HAL_GetTick>
 8005080:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005082:	e008      	b.n	8005096 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005084:	f7fe facc 	bl	8003620 <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	2b02      	cmp	r3, #2
 8005090:	d901      	bls.n	8005096 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e058      	b.n	8005148 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005096:	4b04      	ldr	r3, [pc, #16]	@ (80050a8 <HAL_RCC_OscConfig+0x778>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d0f0      	beq.n	8005084 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80050a2:	e050      	b.n	8005146 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e04f      	b.n	8005148 <HAL_RCC_OscConfig+0x818>
 80050a8:	40021000 	.word	0x40021000
 80050ac:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050b0:	4b27      	ldr	r3, [pc, #156]	@ (8005150 <HAL_RCC_OscConfig+0x820>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d144      	bne.n	8005146 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80050bc:	4b24      	ldr	r3, [pc, #144]	@ (8005150 <HAL_RCC_OscConfig+0x820>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a23      	ldr	r2, [pc, #140]	@ (8005150 <HAL_RCC_OscConfig+0x820>)
 80050c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80050c8:	4b21      	ldr	r3, [pc, #132]	@ (8005150 <HAL_RCC_OscConfig+0x820>)
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	4a20      	ldr	r2, [pc, #128]	@ (8005150 <HAL_RCC_OscConfig+0x820>)
 80050ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80050d4:	f7fe faa4 	bl	8003620 <HAL_GetTick>
 80050d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050da:	e008      	b.n	80050ee <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050dc:	f7fe faa0 	bl	8003620 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d901      	bls.n	80050ee <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e02c      	b.n	8005148 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050ee:	4b18      	ldr	r3, [pc, #96]	@ (8005150 <HAL_RCC_OscConfig+0x820>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d0f0      	beq.n	80050dc <HAL_RCC_OscConfig+0x7ac>
 80050fa:	e024      	b.n	8005146 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	2b0c      	cmp	r3, #12
 8005100:	d01f      	beq.n	8005142 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005102:	4b13      	ldr	r3, [pc, #76]	@ (8005150 <HAL_RCC_OscConfig+0x820>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a12      	ldr	r2, [pc, #72]	@ (8005150 <HAL_RCC_OscConfig+0x820>)
 8005108:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800510c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800510e:	f7fe fa87 	bl	8003620 <HAL_GetTick>
 8005112:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005114:	e008      	b.n	8005128 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005116:	f7fe fa83 	bl	8003620 <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	2b02      	cmp	r3, #2
 8005122:	d901      	bls.n	8005128 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e00f      	b.n	8005148 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005128:	4b09      	ldr	r3, [pc, #36]	@ (8005150 <HAL_RCC_OscConfig+0x820>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1f0      	bne.n	8005116 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005134:	4b06      	ldr	r3, [pc, #24]	@ (8005150 <HAL_RCC_OscConfig+0x820>)
 8005136:	68da      	ldr	r2, [r3, #12]
 8005138:	4905      	ldr	r1, [pc, #20]	@ (8005150 <HAL_RCC_OscConfig+0x820>)
 800513a:	4b06      	ldr	r3, [pc, #24]	@ (8005154 <HAL_RCC_OscConfig+0x824>)
 800513c:	4013      	ands	r3, r2
 800513e:	60cb      	str	r3, [r1, #12]
 8005140:	e001      	b.n	8005146 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e000      	b.n	8005148 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	3720      	adds	r7, #32
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	40021000 	.word	0x40021000
 8005154:	feeefffc 	.word	0xfeeefffc

08005158 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d101      	bne.n	800516c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e0e7      	b.n	800533c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800516c:	4b75      	ldr	r3, [pc, #468]	@ (8005344 <HAL_RCC_ClockConfig+0x1ec>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0307 	and.w	r3, r3, #7
 8005174:	683a      	ldr	r2, [r7, #0]
 8005176:	429a      	cmp	r2, r3
 8005178:	d910      	bls.n	800519c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800517a:	4b72      	ldr	r3, [pc, #456]	@ (8005344 <HAL_RCC_ClockConfig+0x1ec>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f023 0207 	bic.w	r2, r3, #7
 8005182:	4970      	ldr	r1, [pc, #448]	@ (8005344 <HAL_RCC_ClockConfig+0x1ec>)
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	4313      	orrs	r3, r2
 8005188:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800518a:	4b6e      	ldr	r3, [pc, #440]	@ (8005344 <HAL_RCC_ClockConfig+0x1ec>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0307 	and.w	r3, r3, #7
 8005192:	683a      	ldr	r2, [r7, #0]
 8005194:	429a      	cmp	r2, r3
 8005196:	d001      	beq.n	800519c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e0cf      	b.n	800533c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0302 	and.w	r3, r3, #2
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d010      	beq.n	80051ca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	689a      	ldr	r2, [r3, #8]
 80051ac:	4b66      	ldr	r3, [pc, #408]	@ (8005348 <HAL_RCC_ClockConfig+0x1f0>)
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d908      	bls.n	80051ca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051b8:	4b63      	ldr	r3, [pc, #396]	@ (8005348 <HAL_RCC_ClockConfig+0x1f0>)
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	4960      	ldr	r1, [pc, #384]	@ (8005348 <HAL_RCC_ClockConfig+0x1f0>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0301 	and.w	r3, r3, #1
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d04c      	beq.n	8005270 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	2b03      	cmp	r3, #3
 80051dc:	d107      	bne.n	80051ee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051de:	4b5a      	ldr	r3, [pc, #360]	@ (8005348 <HAL_RCC_ClockConfig+0x1f0>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d121      	bne.n	800522e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e0a6      	b.n	800533c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d107      	bne.n	8005206 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051f6:	4b54      	ldr	r3, [pc, #336]	@ (8005348 <HAL_RCC_ClockConfig+0x1f0>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d115      	bne.n	800522e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e09a      	b.n	800533c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d107      	bne.n	800521e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800520e:	4b4e      	ldr	r3, [pc, #312]	@ (8005348 <HAL_RCC_ClockConfig+0x1f0>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b00      	cmp	r3, #0
 8005218:	d109      	bne.n	800522e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e08e      	b.n	800533c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800521e:	4b4a      	ldr	r3, [pc, #296]	@ (8005348 <HAL_RCC_ClockConfig+0x1f0>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005226:	2b00      	cmp	r3, #0
 8005228:	d101      	bne.n	800522e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e086      	b.n	800533c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800522e:	4b46      	ldr	r3, [pc, #280]	@ (8005348 <HAL_RCC_ClockConfig+0x1f0>)
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f023 0203 	bic.w	r2, r3, #3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	4943      	ldr	r1, [pc, #268]	@ (8005348 <HAL_RCC_ClockConfig+0x1f0>)
 800523c:	4313      	orrs	r3, r2
 800523e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005240:	f7fe f9ee 	bl	8003620 <HAL_GetTick>
 8005244:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005246:	e00a      	b.n	800525e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005248:	f7fe f9ea 	bl	8003620 <HAL_GetTick>
 800524c:	4602      	mov	r2, r0
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005256:	4293      	cmp	r3, r2
 8005258:	d901      	bls.n	800525e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e06e      	b.n	800533c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800525e:	4b3a      	ldr	r3, [pc, #232]	@ (8005348 <HAL_RCC_ClockConfig+0x1f0>)
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f003 020c 	and.w	r2, r3, #12
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	429a      	cmp	r2, r3
 800526e:	d1eb      	bne.n	8005248 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0302 	and.w	r3, r3, #2
 8005278:	2b00      	cmp	r3, #0
 800527a:	d010      	beq.n	800529e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	689a      	ldr	r2, [r3, #8]
 8005280:	4b31      	ldr	r3, [pc, #196]	@ (8005348 <HAL_RCC_ClockConfig+0x1f0>)
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005288:	429a      	cmp	r2, r3
 800528a:	d208      	bcs.n	800529e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800528c:	4b2e      	ldr	r3, [pc, #184]	@ (8005348 <HAL_RCC_ClockConfig+0x1f0>)
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	492b      	ldr	r1, [pc, #172]	@ (8005348 <HAL_RCC_ClockConfig+0x1f0>)
 800529a:	4313      	orrs	r3, r2
 800529c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800529e:	4b29      	ldr	r3, [pc, #164]	@ (8005344 <HAL_RCC_ClockConfig+0x1ec>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0307 	and.w	r3, r3, #7
 80052a6:	683a      	ldr	r2, [r7, #0]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d210      	bcs.n	80052ce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ac:	4b25      	ldr	r3, [pc, #148]	@ (8005344 <HAL_RCC_ClockConfig+0x1ec>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f023 0207 	bic.w	r2, r3, #7
 80052b4:	4923      	ldr	r1, [pc, #140]	@ (8005344 <HAL_RCC_ClockConfig+0x1ec>)
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052bc:	4b21      	ldr	r3, [pc, #132]	@ (8005344 <HAL_RCC_ClockConfig+0x1ec>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0307 	and.w	r3, r3, #7
 80052c4:	683a      	ldr	r2, [r7, #0]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d001      	beq.n	80052ce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e036      	b.n	800533c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0304 	and.w	r3, r3, #4
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d008      	beq.n	80052ec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052da:	4b1b      	ldr	r3, [pc, #108]	@ (8005348 <HAL_RCC_ClockConfig+0x1f0>)
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	4918      	ldr	r1, [pc, #96]	@ (8005348 <HAL_RCC_ClockConfig+0x1f0>)
 80052e8:	4313      	orrs	r3, r2
 80052ea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0308 	and.w	r3, r3, #8
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d009      	beq.n	800530c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052f8:	4b13      	ldr	r3, [pc, #76]	@ (8005348 <HAL_RCC_ClockConfig+0x1f0>)
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	00db      	lsls	r3, r3, #3
 8005306:	4910      	ldr	r1, [pc, #64]	@ (8005348 <HAL_RCC_ClockConfig+0x1f0>)
 8005308:	4313      	orrs	r3, r2
 800530a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800530c:	f000 f824 	bl	8005358 <HAL_RCC_GetSysClockFreq>
 8005310:	4602      	mov	r2, r0
 8005312:	4b0d      	ldr	r3, [pc, #52]	@ (8005348 <HAL_RCC_ClockConfig+0x1f0>)
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	091b      	lsrs	r3, r3, #4
 8005318:	f003 030f 	and.w	r3, r3, #15
 800531c:	490b      	ldr	r1, [pc, #44]	@ (800534c <HAL_RCC_ClockConfig+0x1f4>)
 800531e:	5ccb      	ldrb	r3, [r1, r3]
 8005320:	f003 031f 	and.w	r3, r3, #31
 8005324:	fa22 f303 	lsr.w	r3, r2, r3
 8005328:	4a09      	ldr	r2, [pc, #36]	@ (8005350 <HAL_RCC_ClockConfig+0x1f8>)
 800532a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800532c:	4b09      	ldr	r3, [pc, #36]	@ (8005354 <HAL_RCC_ClockConfig+0x1fc>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4618      	mov	r0, r3
 8005332:	f7fe f925 	bl	8003580 <HAL_InitTick>
 8005336:	4603      	mov	r3, r0
 8005338:	72fb      	strb	r3, [r7, #11]

  return status;
 800533a:	7afb      	ldrb	r3, [r7, #11]
}
 800533c:	4618      	mov	r0, r3
 800533e:	3710      	adds	r7, #16
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	40022000 	.word	0x40022000
 8005348:	40021000 	.word	0x40021000
 800534c:	08006688 	.word	0x08006688
 8005350:	20000000 	.word	0x20000000
 8005354:	20000004 	.word	0x20000004

08005358 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005358:	b480      	push	{r7}
 800535a:	b089      	sub	sp, #36	@ 0x24
 800535c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800535e:	2300      	movs	r3, #0
 8005360:	61fb      	str	r3, [r7, #28]
 8005362:	2300      	movs	r3, #0
 8005364:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005366:	4b3e      	ldr	r3, [pc, #248]	@ (8005460 <HAL_RCC_GetSysClockFreq+0x108>)
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f003 030c 	and.w	r3, r3, #12
 800536e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005370:	4b3b      	ldr	r3, [pc, #236]	@ (8005460 <HAL_RCC_GetSysClockFreq+0x108>)
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	f003 0303 	and.w	r3, r3, #3
 8005378:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d005      	beq.n	800538c <HAL_RCC_GetSysClockFreq+0x34>
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	2b0c      	cmp	r3, #12
 8005384:	d121      	bne.n	80053ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2b01      	cmp	r3, #1
 800538a:	d11e      	bne.n	80053ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800538c:	4b34      	ldr	r3, [pc, #208]	@ (8005460 <HAL_RCC_GetSysClockFreq+0x108>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0308 	and.w	r3, r3, #8
 8005394:	2b00      	cmp	r3, #0
 8005396:	d107      	bne.n	80053a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005398:	4b31      	ldr	r3, [pc, #196]	@ (8005460 <HAL_RCC_GetSysClockFreq+0x108>)
 800539a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800539e:	0a1b      	lsrs	r3, r3, #8
 80053a0:	f003 030f 	and.w	r3, r3, #15
 80053a4:	61fb      	str	r3, [r7, #28]
 80053a6:	e005      	b.n	80053b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80053a8:	4b2d      	ldr	r3, [pc, #180]	@ (8005460 <HAL_RCC_GetSysClockFreq+0x108>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	091b      	lsrs	r3, r3, #4
 80053ae:	f003 030f 	and.w	r3, r3, #15
 80053b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80053b4:	4a2b      	ldr	r2, [pc, #172]	@ (8005464 <HAL_RCC_GetSysClockFreq+0x10c>)
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d10d      	bne.n	80053e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80053c8:	e00a      	b.n	80053e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	2b04      	cmp	r3, #4
 80053ce:	d102      	bne.n	80053d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80053d0:	4b25      	ldr	r3, [pc, #148]	@ (8005468 <HAL_RCC_GetSysClockFreq+0x110>)
 80053d2:	61bb      	str	r3, [r7, #24]
 80053d4:	e004      	b.n	80053e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	2b08      	cmp	r3, #8
 80053da:	d101      	bne.n	80053e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80053dc:	4b23      	ldr	r3, [pc, #140]	@ (800546c <HAL_RCC_GetSysClockFreq+0x114>)
 80053de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	2b0c      	cmp	r3, #12
 80053e4:	d134      	bne.n	8005450 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80053e6:	4b1e      	ldr	r3, [pc, #120]	@ (8005460 <HAL_RCC_GetSysClockFreq+0x108>)
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	f003 0303 	and.w	r3, r3, #3
 80053ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d003      	beq.n	80053fe <HAL_RCC_GetSysClockFreq+0xa6>
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	2b03      	cmp	r3, #3
 80053fa:	d003      	beq.n	8005404 <HAL_RCC_GetSysClockFreq+0xac>
 80053fc:	e005      	b.n	800540a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80053fe:	4b1a      	ldr	r3, [pc, #104]	@ (8005468 <HAL_RCC_GetSysClockFreq+0x110>)
 8005400:	617b      	str	r3, [r7, #20]
      break;
 8005402:	e005      	b.n	8005410 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005404:	4b19      	ldr	r3, [pc, #100]	@ (800546c <HAL_RCC_GetSysClockFreq+0x114>)
 8005406:	617b      	str	r3, [r7, #20]
      break;
 8005408:	e002      	b.n	8005410 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	617b      	str	r3, [r7, #20]
      break;
 800540e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005410:	4b13      	ldr	r3, [pc, #76]	@ (8005460 <HAL_RCC_GetSysClockFreq+0x108>)
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	091b      	lsrs	r3, r3, #4
 8005416:	f003 0307 	and.w	r3, r3, #7
 800541a:	3301      	adds	r3, #1
 800541c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800541e:	4b10      	ldr	r3, [pc, #64]	@ (8005460 <HAL_RCC_GetSysClockFreq+0x108>)
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	0a1b      	lsrs	r3, r3, #8
 8005424:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	fb03 f202 	mul.w	r2, r3, r2
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	fbb2 f3f3 	udiv	r3, r2, r3
 8005434:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005436:	4b0a      	ldr	r3, [pc, #40]	@ (8005460 <HAL_RCC_GetSysClockFreq+0x108>)
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	0e5b      	lsrs	r3, r3, #25
 800543c:	f003 0303 	and.w	r3, r3, #3
 8005440:	3301      	adds	r3, #1
 8005442:	005b      	lsls	r3, r3, #1
 8005444:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	fbb2 f3f3 	udiv	r3, r2, r3
 800544e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005450:	69bb      	ldr	r3, [r7, #24]
}
 8005452:	4618      	mov	r0, r3
 8005454:	3724      	adds	r7, #36	@ 0x24
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	40021000 	.word	0x40021000
 8005464:	08006698 	.word	0x08006698
 8005468:	00f42400 	.word	0x00f42400
 800546c:	007a1200 	.word	0x007a1200

08005470 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b086      	sub	sp, #24
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005478:	2300      	movs	r3, #0
 800547a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800547c:	4b2a      	ldr	r3, [pc, #168]	@ (8005528 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800547e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005480:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d003      	beq.n	8005490 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005488:	f7ff f9ee 	bl	8004868 <HAL_PWREx_GetVoltageRange>
 800548c:	6178      	str	r0, [r7, #20]
 800548e:	e014      	b.n	80054ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005490:	4b25      	ldr	r3, [pc, #148]	@ (8005528 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005492:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005494:	4a24      	ldr	r2, [pc, #144]	@ (8005528 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005496:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800549a:	6593      	str	r3, [r2, #88]	@ 0x58
 800549c:	4b22      	ldr	r3, [pc, #136]	@ (8005528 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800549e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054a4:	60fb      	str	r3, [r7, #12]
 80054a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80054a8:	f7ff f9de 	bl	8004868 <HAL_PWREx_GetVoltageRange>
 80054ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80054ae:	4b1e      	ldr	r3, [pc, #120]	@ (8005528 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054b2:	4a1d      	ldr	r2, [pc, #116]	@ (8005528 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054b8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054c0:	d10b      	bne.n	80054da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2b80      	cmp	r3, #128	@ 0x80
 80054c6:	d919      	bls.n	80054fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2ba0      	cmp	r3, #160	@ 0xa0
 80054cc:	d902      	bls.n	80054d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80054ce:	2302      	movs	r3, #2
 80054d0:	613b      	str	r3, [r7, #16]
 80054d2:	e013      	b.n	80054fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80054d4:	2301      	movs	r3, #1
 80054d6:	613b      	str	r3, [r7, #16]
 80054d8:	e010      	b.n	80054fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2b80      	cmp	r3, #128	@ 0x80
 80054de:	d902      	bls.n	80054e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80054e0:	2303      	movs	r3, #3
 80054e2:	613b      	str	r3, [r7, #16]
 80054e4:	e00a      	b.n	80054fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2b80      	cmp	r3, #128	@ 0x80
 80054ea:	d102      	bne.n	80054f2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80054ec:	2302      	movs	r3, #2
 80054ee:	613b      	str	r3, [r7, #16]
 80054f0:	e004      	b.n	80054fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2b70      	cmp	r3, #112	@ 0x70
 80054f6:	d101      	bne.n	80054fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80054f8:	2301      	movs	r3, #1
 80054fa:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80054fc:	4b0b      	ldr	r3, [pc, #44]	@ (800552c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f023 0207 	bic.w	r2, r3, #7
 8005504:	4909      	ldr	r1, [pc, #36]	@ (800552c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	4313      	orrs	r3, r2
 800550a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800550c:	4b07      	ldr	r3, [pc, #28]	@ (800552c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0307 	and.w	r3, r3, #7
 8005514:	693a      	ldr	r2, [r7, #16]
 8005516:	429a      	cmp	r2, r3
 8005518:	d001      	beq.n	800551e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e000      	b.n	8005520 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3718      	adds	r7, #24
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	40021000 	.word	0x40021000
 800552c:	40022000 	.word	0x40022000

08005530 <std>:
 8005530:	2300      	movs	r3, #0
 8005532:	b510      	push	{r4, lr}
 8005534:	4604      	mov	r4, r0
 8005536:	e9c0 3300 	strd	r3, r3, [r0]
 800553a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800553e:	6083      	str	r3, [r0, #8]
 8005540:	8181      	strh	r1, [r0, #12]
 8005542:	6643      	str	r3, [r0, #100]	@ 0x64
 8005544:	81c2      	strh	r2, [r0, #14]
 8005546:	6183      	str	r3, [r0, #24]
 8005548:	4619      	mov	r1, r3
 800554a:	2208      	movs	r2, #8
 800554c:	305c      	adds	r0, #92	@ 0x5c
 800554e:	f000 fa01 	bl	8005954 <memset>
 8005552:	4b0d      	ldr	r3, [pc, #52]	@ (8005588 <std+0x58>)
 8005554:	6263      	str	r3, [r4, #36]	@ 0x24
 8005556:	4b0d      	ldr	r3, [pc, #52]	@ (800558c <std+0x5c>)
 8005558:	62a3      	str	r3, [r4, #40]	@ 0x28
 800555a:	4b0d      	ldr	r3, [pc, #52]	@ (8005590 <std+0x60>)
 800555c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800555e:	4b0d      	ldr	r3, [pc, #52]	@ (8005594 <std+0x64>)
 8005560:	6323      	str	r3, [r4, #48]	@ 0x30
 8005562:	4b0d      	ldr	r3, [pc, #52]	@ (8005598 <std+0x68>)
 8005564:	6224      	str	r4, [r4, #32]
 8005566:	429c      	cmp	r4, r3
 8005568:	d006      	beq.n	8005578 <std+0x48>
 800556a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800556e:	4294      	cmp	r4, r2
 8005570:	d002      	beq.n	8005578 <std+0x48>
 8005572:	33d0      	adds	r3, #208	@ 0xd0
 8005574:	429c      	cmp	r4, r3
 8005576:	d105      	bne.n	8005584 <std+0x54>
 8005578:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800557c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005580:	f000 ba80 	b.w	8005a84 <__retarget_lock_init_recursive>
 8005584:	bd10      	pop	{r4, pc}
 8005586:	bf00      	nop
 8005588:	080057a5 	.word	0x080057a5
 800558c:	080057c7 	.word	0x080057c7
 8005590:	080057ff 	.word	0x080057ff
 8005594:	08005823 	.word	0x08005823
 8005598:	200004f0 	.word	0x200004f0

0800559c <stdio_exit_handler>:
 800559c:	4a02      	ldr	r2, [pc, #8]	@ (80055a8 <stdio_exit_handler+0xc>)
 800559e:	4903      	ldr	r1, [pc, #12]	@ (80055ac <stdio_exit_handler+0x10>)
 80055a0:	4803      	ldr	r0, [pc, #12]	@ (80055b0 <stdio_exit_handler+0x14>)
 80055a2:	f000 b869 	b.w	8005678 <_fwalk_sglue>
 80055a6:	bf00      	nop
 80055a8:	2000000c 	.word	0x2000000c
 80055ac:	08006341 	.word	0x08006341
 80055b0:	2000001c 	.word	0x2000001c

080055b4 <cleanup_stdio>:
 80055b4:	6841      	ldr	r1, [r0, #4]
 80055b6:	4b0c      	ldr	r3, [pc, #48]	@ (80055e8 <cleanup_stdio+0x34>)
 80055b8:	4299      	cmp	r1, r3
 80055ba:	b510      	push	{r4, lr}
 80055bc:	4604      	mov	r4, r0
 80055be:	d001      	beq.n	80055c4 <cleanup_stdio+0x10>
 80055c0:	f000 febe 	bl	8006340 <_fflush_r>
 80055c4:	68a1      	ldr	r1, [r4, #8]
 80055c6:	4b09      	ldr	r3, [pc, #36]	@ (80055ec <cleanup_stdio+0x38>)
 80055c8:	4299      	cmp	r1, r3
 80055ca:	d002      	beq.n	80055d2 <cleanup_stdio+0x1e>
 80055cc:	4620      	mov	r0, r4
 80055ce:	f000 feb7 	bl	8006340 <_fflush_r>
 80055d2:	68e1      	ldr	r1, [r4, #12]
 80055d4:	4b06      	ldr	r3, [pc, #24]	@ (80055f0 <cleanup_stdio+0x3c>)
 80055d6:	4299      	cmp	r1, r3
 80055d8:	d004      	beq.n	80055e4 <cleanup_stdio+0x30>
 80055da:	4620      	mov	r0, r4
 80055dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055e0:	f000 beae 	b.w	8006340 <_fflush_r>
 80055e4:	bd10      	pop	{r4, pc}
 80055e6:	bf00      	nop
 80055e8:	200004f0 	.word	0x200004f0
 80055ec:	20000558 	.word	0x20000558
 80055f0:	200005c0 	.word	0x200005c0

080055f4 <global_stdio_init.part.0>:
 80055f4:	b510      	push	{r4, lr}
 80055f6:	4b0b      	ldr	r3, [pc, #44]	@ (8005624 <global_stdio_init.part.0+0x30>)
 80055f8:	4c0b      	ldr	r4, [pc, #44]	@ (8005628 <global_stdio_init.part.0+0x34>)
 80055fa:	4a0c      	ldr	r2, [pc, #48]	@ (800562c <global_stdio_init.part.0+0x38>)
 80055fc:	601a      	str	r2, [r3, #0]
 80055fe:	4620      	mov	r0, r4
 8005600:	2200      	movs	r2, #0
 8005602:	2104      	movs	r1, #4
 8005604:	f7ff ff94 	bl	8005530 <std>
 8005608:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800560c:	2201      	movs	r2, #1
 800560e:	2109      	movs	r1, #9
 8005610:	f7ff ff8e 	bl	8005530 <std>
 8005614:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005618:	2202      	movs	r2, #2
 800561a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800561e:	2112      	movs	r1, #18
 8005620:	f7ff bf86 	b.w	8005530 <std>
 8005624:	20000628 	.word	0x20000628
 8005628:	200004f0 	.word	0x200004f0
 800562c:	0800559d 	.word	0x0800559d

08005630 <__sfp_lock_acquire>:
 8005630:	4801      	ldr	r0, [pc, #4]	@ (8005638 <__sfp_lock_acquire+0x8>)
 8005632:	f000 ba28 	b.w	8005a86 <__retarget_lock_acquire_recursive>
 8005636:	bf00      	nop
 8005638:	20000631 	.word	0x20000631

0800563c <__sfp_lock_release>:
 800563c:	4801      	ldr	r0, [pc, #4]	@ (8005644 <__sfp_lock_release+0x8>)
 800563e:	f000 ba23 	b.w	8005a88 <__retarget_lock_release_recursive>
 8005642:	bf00      	nop
 8005644:	20000631 	.word	0x20000631

08005648 <__sinit>:
 8005648:	b510      	push	{r4, lr}
 800564a:	4604      	mov	r4, r0
 800564c:	f7ff fff0 	bl	8005630 <__sfp_lock_acquire>
 8005650:	6a23      	ldr	r3, [r4, #32]
 8005652:	b11b      	cbz	r3, 800565c <__sinit+0x14>
 8005654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005658:	f7ff bff0 	b.w	800563c <__sfp_lock_release>
 800565c:	4b04      	ldr	r3, [pc, #16]	@ (8005670 <__sinit+0x28>)
 800565e:	6223      	str	r3, [r4, #32]
 8005660:	4b04      	ldr	r3, [pc, #16]	@ (8005674 <__sinit+0x2c>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d1f5      	bne.n	8005654 <__sinit+0xc>
 8005668:	f7ff ffc4 	bl	80055f4 <global_stdio_init.part.0>
 800566c:	e7f2      	b.n	8005654 <__sinit+0xc>
 800566e:	bf00      	nop
 8005670:	080055b5 	.word	0x080055b5
 8005674:	20000628 	.word	0x20000628

08005678 <_fwalk_sglue>:
 8005678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800567c:	4607      	mov	r7, r0
 800567e:	4688      	mov	r8, r1
 8005680:	4614      	mov	r4, r2
 8005682:	2600      	movs	r6, #0
 8005684:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005688:	f1b9 0901 	subs.w	r9, r9, #1
 800568c:	d505      	bpl.n	800569a <_fwalk_sglue+0x22>
 800568e:	6824      	ldr	r4, [r4, #0]
 8005690:	2c00      	cmp	r4, #0
 8005692:	d1f7      	bne.n	8005684 <_fwalk_sglue+0xc>
 8005694:	4630      	mov	r0, r6
 8005696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800569a:	89ab      	ldrh	r3, [r5, #12]
 800569c:	2b01      	cmp	r3, #1
 800569e:	d907      	bls.n	80056b0 <_fwalk_sglue+0x38>
 80056a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80056a4:	3301      	adds	r3, #1
 80056a6:	d003      	beq.n	80056b0 <_fwalk_sglue+0x38>
 80056a8:	4629      	mov	r1, r5
 80056aa:	4638      	mov	r0, r7
 80056ac:	47c0      	blx	r8
 80056ae:	4306      	orrs	r6, r0
 80056b0:	3568      	adds	r5, #104	@ 0x68
 80056b2:	e7e9      	b.n	8005688 <_fwalk_sglue+0x10>

080056b4 <iprintf>:
 80056b4:	b40f      	push	{r0, r1, r2, r3}
 80056b6:	b507      	push	{r0, r1, r2, lr}
 80056b8:	4906      	ldr	r1, [pc, #24]	@ (80056d4 <iprintf+0x20>)
 80056ba:	ab04      	add	r3, sp, #16
 80056bc:	6808      	ldr	r0, [r1, #0]
 80056be:	f853 2b04 	ldr.w	r2, [r3], #4
 80056c2:	6881      	ldr	r1, [r0, #8]
 80056c4:	9301      	str	r3, [sp, #4]
 80056c6:	f000 fb11 	bl	8005cec <_vfiprintf_r>
 80056ca:	b003      	add	sp, #12
 80056cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80056d0:	b004      	add	sp, #16
 80056d2:	4770      	bx	lr
 80056d4:	20000018 	.word	0x20000018

080056d8 <putchar>:
 80056d8:	4b02      	ldr	r3, [pc, #8]	@ (80056e4 <putchar+0xc>)
 80056da:	4601      	mov	r1, r0
 80056dc:	6818      	ldr	r0, [r3, #0]
 80056de:	6882      	ldr	r2, [r0, #8]
 80056e0:	f000 beb8 	b.w	8006454 <_putc_r>
 80056e4:	20000018 	.word	0x20000018

080056e8 <_puts_r>:
 80056e8:	6a03      	ldr	r3, [r0, #32]
 80056ea:	b570      	push	{r4, r5, r6, lr}
 80056ec:	6884      	ldr	r4, [r0, #8]
 80056ee:	4605      	mov	r5, r0
 80056f0:	460e      	mov	r6, r1
 80056f2:	b90b      	cbnz	r3, 80056f8 <_puts_r+0x10>
 80056f4:	f7ff ffa8 	bl	8005648 <__sinit>
 80056f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80056fa:	07db      	lsls	r3, r3, #31
 80056fc:	d405      	bmi.n	800570a <_puts_r+0x22>
 80056fe:	89a3      	ldrh	r3, [r4, #12]
 8005700:	0598      	lsls	r0, r3, #22
 8005702:	d402      	bmi.n	800570a <_puts_r+0x22>
 8005704:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005706:	f000 f9be 	bl	8005a86 <__retarget_lock_acquire_recursive>
 800570a:	89a3      	ldrh	r3, [r4, #12]
 800570c:	0719      	lsls	r1, r3, #28
 800570e:	d502      	bpl.n	8005716 <_puts_r+0x2e>
 8005710:	6923      	ldr	r3, [r4, #16]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d135      	bne.n	8005782 <_puts_r+0x9a>
 8005716:	4621      	mov	r1, r4
 8005718:	4628      	mov	r0, r5
 800571a:	f000 f8c5 	bl	80058a8 <__swsetup_r>
 800571e:	b380      	cbz	r0, 8005782 <_puts_r+0x9a>
 8005720:	f04f 35ff 	mov.w	r5, #4294967295
 8005724:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005726:	07da      	lsls	r2, r3, #31
 8005728:	d405      	bmi.n	8005736 <_puts_r+0x4e>
 800572a:	89a3      	ldrh	r3, [r4, #12]
 800572c:	059b      	lsls	r3, r3, #22
 800572e:	d402      	bmi.n	8005736 <_puts_r+0x4e>
 8005730:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005732:	f000 f9a9 	bl	8005a88 <__retarget_lock_release_recursive>
 8005736:	4628      	mov	r0, r5
 8005738:	bd70      	pop	{r4, r5, r6, pc}
 800573a:	2b00      	cmp	r3, #0
 800573c:	da04      	bge.n	8005748 <_puts_r+0x60>
 800573e:	69a2      	ldr	r2, [r4, #24]
 8005740:	429a      	cmp	r2, r3
 8005742:	dc17      	bgt.n	8005774 <_puts_r+0x8c>
 8005744:	290a      	cmp	r1, #10
 8005746:	d015      	beq.n	8005774 <_puts_r+0x8c>
 8005748:	6823      	ldr	r3, [r4, #0]
 800574a:	1c5a      	adds	r2, r3, #1
 800574c:	6022      	str	r2, [r4, #0]
 800574e:	7019      	strb	r1, [r3, #0]
 8005750:	68a3      	ldr	r3, [r4, #8]
 8005752:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005756:	3b01      	subs	r3, #1
 8005758:	60a3      	str	r3, [r4, #8]
 800575a:	2900      	cmp	r1, #0
 800575c:	d1ed      	bne.n	800573a <_puts_r+0x52>
 800575e:	2b00      	cmp	r3, #0
 8005760:	da11      	bge.n	8005786 <_puts_r+0x9e>
 8005762:	4622      	mov	r2, r4
 8005764:	210a      	movs	r1, #10
 8005766:	4628      	mov	r0, r5
 8005768:	f000 f85f 	bl	800582a <__swbuf_r>
 800576c:	3001      	adds	r0, #1
 800576e:	d0d7      	beq.n	8005720 <_puts_r+0x38>
 8005770:	250a      	movs	r5, #10
 8005772:	e7d7      	b.n	8005724 <_puts_r+0x3c>
 8005774:	4622      	mov	r2, r4
 8005776:	4628      	mov	r0, r5
 8005778:	f000 f857 	bl	800582a <__swbuf_r>
 800577c:	3001      	adds	r0, #1
 800577e:	d1e7      	bne.n	8005750 <_puts_r+0x68>
 8005780:	e7ce      	b.n	8005720 <_puts_r+0x38>
 8005782:	3e01      	subs	r6, #1
 8005784:	e7e4      	b.n	8005750 <_puts_r+0x68>
 8005786:	6823      	ldr	r3, [r4, #0]
 8005788:	1c5a      	adds	r2, r3, #1
 800578a:	6022      	str	r2, [r4, #0]
 800578c:	220a      	movs	r2, #10
 800578e:	701a      	strb	r2, [r3, #0]
 8005790:	e7ee      	b.n	8005770 <_puts_r+0x88>
	...

08005794 <puts>:
 8005794:	4b02      	ldr	r3, [pc, #8]	@ (80057a0 <puts+0xc>)
 8005796:	4601      	mov	r1, r0
 8005798:	6818      	ldr	r0, [r3, #0]
 800579a:	f7ff bfa5 	b.w	80056e8 <_puts_r>
 800579e:	bf00      	nop
 80057a0:	20000018 	.word	0x20000018

080057a4 <__sread>:
 80057a4:	b510      	push	{r4, lr}
 80057a6:	460c      	mov	r4, r1
 80057a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057ac:	f000 f91c 	bl	80059e8 <_read_r>
 80057b0:	2800      	cmp	r0, #0
 80057b2:	bfab      	itete	ge
 80057b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80057b6:	89a3      	ldrhlt	r3, [r4, #12]
 80057b8:	181b      	addge	r3, r3, r0
 80057ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80057be:	bfac      	ite	ge
 80057c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80057c2:	81a3      	strhlt	r3, [r4, #12]
 80057c4:	bd10      	pop	{r4, pc}

080057c6 <__swrite>:
 80057c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057ca:	461f      	mov	r7, r3
 80057cc:	898b      	ldrh	r3, [r1, #12]
 80057ce:	05db      	lsls	r3, r3, #23
 80057d0:	4605      	mov	r5, r0
 80057d2:	460c      	mov	r4, r1
 80057d4:	4616      	mov	r6, r2
 80057d6:	d505      	bpl.n	80057e4 <__swrite+0x1e>
 80057d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057dc:	2302      	movs	r3, #2
 80057de:	2200      	movs	r2, #0
 80057e0:	f000 f8f0 	bl	80059c4 <_lseek_r>
 80057e4:	89a3      	ldrh	r3, [r4, #12]
 80057e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80057ee:	81a3      	strh	r3, [r4, #12]
 80057f0:	4632      	mov	r2, r6
 80057f2:	463b      	mov	r3, r7
 80057f4:	4628      	mov	r0, r5
 80057f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057fa:	f000 b907 	b.w	8005a0c <_write_r>

080057fe <__sseek>:
 80057fe:	b510      	push	{r4, lr}
 8005800:	460c      	mov	r4, r1
 8005802:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005806:	f000 f8dd 	bl	80059c4 <_lseek_r>
 800580a:	1c43      	adds	r3, r0, #1
 800580c:	89a3      	ldrh	r3, [r4, #12]
 800580e:	bf15      	itete	ne
 8005810:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005812:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005816:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800581a:	81a3      	strheq	r3, [r4, #12]
 800581c:	bf18      	it	ne
 800581e:	81a3      	strhne	r3, [r4, #12]
 8005820:	bd10      	pop	{r4, pc}

08005822 <__sclose>:
 8005822:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005826:	f000 b8bd 	b.w	80059a4 <_close_r>

0800582a <__swbuf_r>:
 800582a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800582c:	460e      	mov	r6, r1
 800582e:	4614      	mov	r4, r2
 8005830:	4605      	mov	r5, r0
 8005832:	b118      	cbz	r0, 800583c <__swbuf_r+0x12>
 8005834:	6a03      	ldr	r3, [r0, #32]
 8005836:	b90b      	cbnz	r3, 800583c <__swbuf_r+0x12>
 8005838:	f7ff ff06 	bl	8005648 <__sinit>
 800583c:	69a3      	ldr	r3, [r4, #24]
 800583e:	60a3      	str	r3, [r4, #8]
 8005840:	89a3      	ldrh	r3, [r4, #12]
 8005842:	071a      	lsls	r2, r3, #28
 8005844:	d501      	bpl.n	800584a <__swbuf_r+0x20>
 8005846:	6923      	ldr	r3, [r4, #16]
 8005848:	b943      	cbnz	r3, 800585c <__swbuf_r+0x32>
 800584a:	4621      	mov	r1, r4
 800584c:	4628      	mov	r0, r5
 800584e:	f000 f82b 	bl	80058a8 <__swsetup_r>
 8005852:	b118      	cbz	r0, 800585c <__swbuf_r+0x32>
 8005854:	f04f 37ff 	mov.w	r7, #4294967295
 8005858:	4638      	mov	r0, r7
 800585a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800585c:	6823      	ldr	r3, [r4, #0]
 800585e:	6922      	ldr	r2, [r4, #16]
 8005860:	1a98      	subs	r0, r3, r2
 8005862:	6963      	ldr	r3, [r4, #20]
 8005864:	b2f6      	uxtb	r6, r6
 8005866:	4283      	cmp	r3, r0
 8005868:	4637      	mov	r7, r6
 800586a:	dc05      	bgt.n	8005878 <__swbuf_r+0x4e>
 800586c:	4621      	mov	r1, r4
 800586e:	4628      	mov	r0, r5
 8005870:	f000 fd66 	bl	8006340 <_fflush_r>
 8005874:	2800      	cmp	r0, #0
 8005876:	d1ed      	bne.n	8005854 <__swbuf_r+0x2a>
 8005878:	68a3      	ldr	r3, [r4, #8]
 800587a:	3b01      	subs	r3, #1
 800587c:	60a3      	str	r3, [r4, #8]
 800587e:	6823      	ldr	r3, [r4, #0]
 8005880:	1c5a      	adds	r2, r3, #1
 8005882:	6022      	str	r2, [r4, #0]
 8005884:	701e      	strb	r6, [r3, #0]
 8005886:	6962      	ldr	r2, [r4, #20]
 8005888:	1c43      	adds	r3, r0, #1
 800588a:	429a      	cmp	r2, r3
 800588c:	d004      	beq.n	8005898 <__swbuf_r+0x6e>
 800588e:	89a3      	ldrh	r3, [r4, #12]
 8005890:	07db      	lsls	r3, r3, #31
 8005892:	d5e1      	bpl.n	8005858 <__swbuf_r+0x2e>
 8005894:	2e0a      	cmp	r6, #10
 8005896:	d1df      	bne.n	8005858 <__swbuf_r+0x2e>
 8005898:	4621      	mov	r1, r4
 800589a:	4628      	mov	r0, r5
 800589c:	f000 fd50 	bl	8006340 <_fflush_r>
 80058a0:	2800      	cmp	r0, #0
 80058a2:	d0d9      	beq.n	8005858 <__swbuf_r+0x2e>
 80058a4:	e7d6      	b.n	8005854 <__swbuf_r+0x2a>
	...

080058a8 <__swsetup_r>:
 80058a8:	b538      	push	{r3, r4, r5, lr}
 80058aa:	4b29      	ldr	r3, [pc, #164]	@ (8005950 <__swsetup_r+0xa8>)
 80058ac:	4605      	mov	r5, r0
 80058ae:	6818      	ldr	r0, [r3, #0]
 80058b0:	460c      	mov	r4, r1
 80058b2:	b118      	cbz	r0, 80058bc <__swsetup_r+0x14>
 80058b4:	6a03      	ldr	r3, [r0, #32]
 80058b6:	b90b      	cbnz	r3, 80058bc <__swsetup_r+0x14>
 80058b8:	f7ff fec6 	bl	8005648 <__sinit>
 80058bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058c0:	0719      	lsls	r1, r3, #28
 80058c2:	d422      	bmi.n	800590a <__swsetup_r+0x62>
 80058c4:	06da      	lsls	r2, r3, #27
 80058c6:	d407      	bmi.n	80058d8 <__swsetup_r+0x30>
 80058c8:	2209      	movs	r2, #9
 80058ca:	602a      	str	r2, [r5, #0]
 80058cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058d0:	81a3      	strh	r3, [r4, #12]
 80058d2:	f04f 30ff 	mov.w	r0, #4294967295
 80058d6:	e033      	b.n	8005940 <__swsetup_r+0x98>
 80058d8:	0758      	lsls	r0, r3, #29
 80058da:	d512      	bpl.n	8005902 <__swsetup_r+0x5a>
 80058dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80058de:	b141      	cbz	r1, 80058f2 <__swsetup_r+0x4a>
 80058e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80058e4:	4299      	cmp	r1, r3
 80058e6:	d002      	beq.n	80058ee <__swsetup_r+0x46>
 80058e8:	4628      	mov	r0, r5
 80058ea:	f000 f8dd 	bl	8005aa8 <_free_r>
 80058ee:	2300      	movs	r3, #0
 80058f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80058f2:	89a3      	ldrh	r3, [r4, #12]
 80058f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80058f8:	81a3      	strh	r3, [r4, #12]
 80058fa:	2300      	movs	r3, #0
 80058fc:	6063      	str	r3, [r4, #4]
 80058fe:	6923      	ldr	r3, [r4, #16]
 8005900:	6023      	str	r3, [r4, #0]
 8005902:	89a3      	ldrh	r3, [r4, #12]
 8005904:	f043 0308 	orr.w	r3, r3, #8
 8005908:	81a3      	strh	r3, [r4, #12]
 800590a:	6923      	ldr	r3, [r4, #16]
 800590c:	b94b      	cbnz	r3, 8005922 <__swsetup_r+0x7a>
 800590e:	89a3      	ldrh	r3, [r4, #12]
 8005910:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005914:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005918:	d003      	beq.n	8005922 <__swsetup_r+0x7a>
 800591a:	4621      	mov	r1, r4
 800591c:	4628      	mov	r0, r5
 800591e:	f000 fd5d 	bl	80063dc <__smakebuf_r>
 8005922:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005926:	f013 0201 	ands.w	r2, r3, #1
 800592a:	d00a      	beq.n	8005942 <__swsetup_r+0x9a>
 800592c:	2200      	movs	r2, #0
 800592e:	60a2      	str	r2, [r4, #8]
 8005930:	6962      	ldr	r2, [r4, #20]
 8005932:	4252      	negs	r2, r2
 8005934:	61a2      	str	r2, [r4, #24]
 8005936:	6922      	ldr	r2, [r4, #16]
 8005938:	b942      	cbnz	r2, 800594c <__swsetup_r+0xa4>
 800593a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800593e:	d1c5      	bne.n	80058cc <__swsetup_r+0x24>
 8005940:	bd38      	pop	{r3, r4, r5, pc}
 8005942:	0799      	lsls	r1, r3, #30
 8005944:	bf58      	it	pl
 8005946:	6962      	ldrpl	r2, [r4, #20]
 8005948:	60a2      	str	r2, [r4, #8]
 800594a:	e7f4      	b.n	8005936 <__swsetup_r+0x8e>
 800594c:	2000      	movs	r0, #0
 800594e:	e7f7      	b.n	8005940 <__swsetup_r+0x98>
 8005950:	20000018 	.word	0x20000018

08005954 <memset>:
 8005954:	4402      	add	r2, r0
 8005956:	4603      	mov	r3, r0
 8005958:	4293      	cmp	r3, r2
 800595a:	d100      	bne.n	800595e <memset+0xa>
 800595c:	4770      	bx	lr
 800595e:	f803 1b01 	strb.w	r1, [r3], #1
 8005962:	e7f9      	b.n	8005958 <memset+0x4>

08005964 <strncpy>:
 8005964:	b510      	push	{r4, lr}
 8005966:	3901      	subs	r1, #1
 8005968:	4603      	mov	r3, r0
 800596a:	b132      	cbz	r2, 800597a <strncpy+0x16>
 800596c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005970:	f803 4b01 	strb.w	r4, [r3], #1
 8005974:	3a01      	subs	r2, #1
 8005976:	2c00      	cmp	r4, #0
 8005978:	d1f7      	bne.n	800596a <strncpy+0x6>
 800597a:	441a      	add	r2, r3
 800597c:	2100      	movs	r1, #0
 800597e:	4293      	cmp	r3, r2
 8005980:	d100      	bne.n	8005984 <strncpy+0x20>
 8005982:	bd10      	pop	{r4, pc}
 8005984:	f803 1b01 	strb.w	r1, [r3], #1
 8005988:	e7f9      	b.n	800597e <strncpy+0x1a>

0800598a <strnlen>:
 800598a:	b510      	push	{r4, lr}
 800598c:	4602      	mov	r2, r0
 800598e:	4401      	add	r1, r0
 8005990:	428a      	cmp	r2, r1
 8005992:	4613      	mov	r3, r2
 8005994:	d003      	beq.n	800599e <strnlen+0x14>
 8005996:	781c      	ldrb	r4, [r3, #0]
 8005998:	3201      	adds	r2, #1
 800599a:	2c00      	cmp	r4, #0
 800599c:	d1f8      	bne.n	8005990 <strnlen+0x6>
 800599e:	1a18      	subs	r0, r3, r0
 80059a0:	bd10      	pop	{r4, pc}
	...

080059a4 <_close_r>:
 80059a4:	b538      	push	{r3, r4, r5, lr}
 80059a6:	4d06      	ldr	r5, [pc, #24]	@ (80059c0 <_close_r+0x1c>)
 80059a8:	2300      	movs	r3, #0
 80059aa:	4604      	mov	r4, r0
 80059ac:	4608      	mov	r0, r1
 80059ae:	602b      	str	r3, [r5, #0]
 80059b0:	f7fd fa3b 	bl	8002e2a <_close>
 80059b4:	1c43      	adds	r3, r0, #1
 80059b6:	d102      	bne.n	80059be <_close_r+0x1a>
 80059b8:	682b      	ldr	r3, [r5, #0]
 80059ba:	b103      	cbz	r3, 80059be <_close_r+0x1a>
 80059bc:	6023      	str	r3, [r4, #0]
 80059be:	bd38      	pop	{r3, r4, r5, pc}
 80059c0:	2000062c 	.word	0x2000062c

080059c4 <_lseek_r>:
 80059c4:	b538      	push	{r3, r4, r5, lr}
 80059c6:	4d07      	ldr	r5, [pc, #28]	@ (80059e4 <_lseek_r+0x20>)
 80059c8:	4604      	mov	r4, r0
 80059ca:	4608      	mov	r0, r1
 80059cc:	4611      	mov	r1, r2
 80059ce:	2200      	movs	r2, #0
 80059d0:	602a      	str	r2, [r5, #0]
 80059d2:	461a      	mov	r2, r3
 80059d4:	f7fd fa50 	bl	8002e78 <_lseek>
 80059d8:	1c43      	adds	r3, r0, #1
 80059da:	d102      	bne.n	80059e2 <_lseek_r+0x1e>
 80059dc:	682b      	ldr	r3, [r5, #0]
 80059de:	b103      	cbz	r3, 80059e2 <_lseek_r+0x1e>
 80059e0:	6023      	str	r3, [r4, #0]
 80059e2:	bd38      	pop	{r3, r4, r5, pc}
 80059e4:	2000062c 	.word	0x2000062c

080059e8 <_read_r>:
 80059e8:	b538      	push	{r3, r4, r5, lr}
 80059ea:	4d07      	ldr	r5, [pc, #28]	@ (8005a08 <_read_r+0x20>)
 80059ec:	4604      	mov	r4, r0
 80059ee:	4608      	mov	r0, r1
 80059f0:	4611      	mov	r1, r2
 80059f2:	2200      	movs	r2, #0
 80059f4:	602a      	str	r2, [r5, #0]
 80059f6:	461a      	mov	r2, r3
 80059f8:	f7fd f9de 	bl	8002db8 <_read>
 80059fc:	1c43      	adds	r3, r0, #1
 80059fe:	d102      	bne.n	8005a06 <_read_r+0x1e>
 8005a00:	682b      	ldr	r3, [r5, #0]
 8005a02:	b103      	cbz	r3, 8005a06 <_read_r+0x1e>
 8005a04:	6023      	str	r3, [r4, #0]
 8005a06:	bd38      	pop	{r3, r4, r5, pc}
 8005a08:	2000062c 	.word	0x2000062c

08005a0c <_write_r>:
 8005a0c:	b538      	push	{r3, r4, r5, lr}
 8005a0e:	4d07      	ldr	r5, [pc, #28]	@ (8005a2c <_write_r+0x20>)
 8005a10:	4604      	mov	r4, r0
 8005a12:	4608      	mov	r0, r1
 8005a14:	4611      	mov	r1, r2
 8005a16:	2200      	movs	r2, #0
 8005a18:	602a      	str	r2, [r5, #0]
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	f7fd f9e9 	bl	8002df2 <_write>
 8005a20:	1c43      	adds	r3, r0, #1
 8005a22:	d102      	bne.n	8005a2a <_write_r+0x1e>
 8005a24:	682b      	ldr	r3, [r5, #0]
 8005a26:	b103      	cbz	r3, 8005a2a <_write_r+0x1e>
 8005a28:	6023      	str	r3, [r4, #0]
 8005a2a:	bd38      	pop	{r3, r4, r5, pc}
 8005a2c:	2000062c 	.word	0x2000062c

08005a30 <__errno>:
 8005a30:	4b01      	ldr	r3, [pc, #4]	@ (8005a38 <__errno+0x8>)
 8005a32:	6818      	ldr	r0, [r3, #0]
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	20000018 	.word	0x20000018

08005a3c <__libc_init_array>:
 8005a3c:	b570      	push	{r4, r5, r6, lr}
 8005a3e:	4d0d      	ldr	r5, [pc, #52]	@ (8005a74 <__libc_init_array+0x38>)
 8005a40:	4c0d      	ldr	r4, [pc, #52]	@ (8005a78 <__libc_init_array+0x3c>)
 8005a42:	1b64      	subs	r4, r4, r5
 8005a44:	10a4      	asrs	r4, r4, #2
 8005a46:	2600      	movs	r6, #0
 8005a48:	42a6      	cmp	r6, r4
 8005a4a:	d109      	bne.n	8005a60 <__libc_init_array+0x24>
 8005a4c:	4d0b      	ldr	r5, [pc, #44]	@ (8005a7c <__libc_init_array+0x40>)
 8005a4e:	4c0c      	ldr	r4, [pc, #48]	@ (8005a80 <__libc_init_array+0x44>)
 8005a50:	f000 fd66 	bl	8006520 <_init>
 8005a54:	1b64      	subs	r4, r4, r5
 8005a56:	10a4      	asrs	r4, r4, #2
 8005a58:	2600      	movs	r6, #0
 8005a5a:	42a6      	cmp	r6, r4
 8005a5c:	d105      	bne.n	8005a6a <__libc_init_array+0x2e>
 8005a5e:	bd70      	pop	{r4, r5, r6, pc}
 8005a60:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a64:	4798      	blx	r3
 8005a66:	3601      	adds	r6, #1
 8005a68:	e7ee      	b.n	8005a48 <__libc_init_array+0xc>
 8005a6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a6e:	4798      	blx	r3
 8005a70:	3601      	adds	r6, #1
 8005a72:	e7f2      	b.n	8005a5a <__libc_init_array+0x1e>
 8005a74:	08006704 	.word	0x08006704
 8005a78:	08006704 	.word	0x08006704
 8005a7c:	08006704 	.word	0x08006704
 8005a80:	08006708 	.word	0x08006708

08005a84 <__retarget_lock_init_recursive>:
 8005a84:	4770      	bx	lr

08005a86 <__retarget_lock_acquire_recursive>:
 8005a86:	4770      	bx	lr

08005a88 <__retarget_lock_release_recursive>:
 8005a88:	4770      	bx	lr

08005a8a <memcpy>:
 8005a8a:	440a      	add	r2, r1
 8005a8c:	4291      	cmp	r1, r2
 8005a8e:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a92:	d100      	bne.n	8005a96 <memcpy+0xc>
 8005a94:	4770      	bx	lr
 8005a96:	b510      	push	{r4, lr}
 8005a98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005aa0:	4291      	cmp	r1, r2
 8005aa2:	d1f9      	bne.n	8005a98 <memcpy+0xe>
 8005aa4:	bd10      	pop	{r4, pc}
	...

08005aa8 <_free_r>:
 8005aa8:	b538      	push	{r3, r4, r5, lr}
 8005aaa:	4605      	mov	r5, r0
 8005aac:	2900      	cmp	r1, #0
 8005aae:	d041      	beq.n	8005b34 <_free_r+0x8c>
 8005ab0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ab4:	1f0c      	subs	r4, r1, #4
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	bfb8      	it	lt
 8005aba:	18e4      	addlt	r4, r4, r3
 8005abc:	f000 f8e0 	bl	8005c80 <__malloc_lock>
 8005ac0:	4a1d      	ldr	r2, [pc, #116]	@ (8005b38 <_free_r+0x90>)
 8005ac2:	6813      	ldr	r3, [r2, #0]
 8005ac4:	b933      	cbnz	r3, 8005ad4 <_free_r+0x2c>
 8005ac6:	6063      	str	r3, [r4, #4]
 8005ac8:	6014      	str	r4, [r2, #0]
 8005aca:	4628      	mov	r0, r5
 8005acc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ad0:	f000 b8dc 	b.w	8005c8c <__malloc_unlock>
 8005ad4:	42a3      	cmp	r3, r4
 8005ad6:	d908      	bls.n	8005aea <_free_r+0x42>
 8005ad8:	6820      	ldr	r0, [r4, #0]
 8005ada:	1821      	adds	r1, r4, r0
 8005adc:	428b      	cmp	r3, r1
 8005ade:	bf01      	itttt	eq
 8005ae0:	6819      	ldreq	r1, [r3, #0]
 8005ae2:	685b      	ldreq	r3, [r3, #4]
 8005ae4:	1809      	addeq	r1, r1, r0
 8005ae6:	6021      	streq	r1, [r4, #0]
 8005ae8:	e7ed      	b.n	8005ac6 <_free_r+0x1e>
 8005aea:	461a      	mov	r2, r3
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	b10b      	cbz	r3, 8005af4 <_free_r+0x4c>
 8005af0:	42a3      	cmp	r3, r4
 8005af2:	d9fa      	bls.n	8005aea <_free_r+0x42>
 8005af4:	6811      	ldr	r1, [r2, #0]
 8005af6:	1850      	adds	r0, r2, r1
 8005af8:	42a0      	cmp	r0, r4
 8005afa:	d10b      	bne.n	8005b14 <_free_r+0x6c>
 8005afc:	6820      	ldr	r0, [r4, #0]
 8005afe:	4401      	add	r1, r0
 8005b00:	1850      	adds	r0, r2, r1
 8005b02:	4283      	cmp	r3, r0
 8005b04:	6011      	str	r1, [r2, #0]
 8005b06:	d1e0      	bne.n	8005aca <_free_r+0x22>
 8005b08:	6818      	ldr	r0, [r3, #0]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	6053      	str	r3, [r2, #4]
 8005b0e:	4408      	add	r0, r1
 8005b10:	6010      	str	r0, [r2, #0]
 8005b12:	e7da      	b.n	8005aca <_free_r+0x22>
 8005b14:	d902      	bls.n	8005b1c <_free_r+0x74>
 8005b16:	230c      	movs	r3, #12
 8005b18:	602b      	str	r3, [r5, #0]
 8005b1a:	e7d6      	b.n	8005aca <_free_r+0x22>
 8005b1c:	6820      	ldr	r0, [r4, #0]
 8005b1e:	1821      	adds	r1, r4, r0
 8005b20:	428b      	cmp	r3, r1
 8005b22:	bf04      	itt	eq
 8005b24:	6819      	ldreq	r1, [r3, #0]
 8005b26:	685b      	ldreq	r3, [r3, #4]
 8005b28:	6063      	str	r3, [r4, #4]
 8005b2a:	bf04      	itt	eq
 8005b2c:	1809      	addeq	r1, r1, r0
 8005b2e:	6021      	streq	r1, [r4, #0]
 8005b30:	6054      	str	r4, [r2, #4]
 8005b32:	e7ca      	b.n	8005aca <_free_r+0x22>
 8005b34:	bd38      	pop	{r3, r4, r5, pc}
 8005b36:	bf00      	nop
 8005b38:	20000638 	.word	0x20000638

08005b3c <sbrk_aligned>:
 8005b3c:	b570      	push	{r4, r5, r6, lr}
 8005b3e:	4e0f      	ldr	r6, [pc, #60]	@ (8005b7c <sbrk_aligned+0x40>)
 8005b40:	460c      	mov	r4, r1
 8005b42:	6831      	ldr	r1, [r6, #0]
 8005b44:	4605      	mov	r5, r0
 8005b46:	b911      	cbnz	r1, 8005b4e <sbrk_aligned+0x12>
 8005b48:	f000 fcda 	bl	8006500 <_sbrk_r>
 8005b4c:	6030      	str	r0, [r6, #0]
 8005b4e:	4621      	mov	r1, r4
 8005b50:	4628      	mov	r0, r5
 8005b52:	f000 fcd5 	bl	8006500 <_sbrk_r>
 8005b56:	1c43      	adds	r3, r0, #1
 8005b58:	d103      	bne.n	8005b62 <sbrk_aligned+0x26>
 8005b5a:	f04f 34ff 	mov.w	r4, #4294967295
 8005b5e:	4620      	mov	r0, r4
 8005b60:	bd70      	pop	{r4, r5, r6, pc}
 8005b62:	1cc4      	adds	r4, r0, #3
 8005b64:	f024 0403 	bic.w	r4, r4, #3
 8005b68:	42a0      	cmp	r0, r4
 8005b6a:	d0f8      	beq.n	8005b5e <sbrk_aligned+0x22>
 8005b6c:	1a21      	subs	r1, r4, r0
 8005b6e:	4628      	mov	r0, r5
 8005b70:	f000 fcc6 	bl	8006500 <_sbrk_r>
 8005b74:	3001      	adds	r0, #1
 8005b76:	d1f2      	bne.n	8005b5e <sbrk_aligned+0x22>
 8005b78:	e7ef      	b.n	8005b5a <sbrk_aligned+0x1e>
 8005b7a:	bf00      	nop
 8005b7c:	20000634 	.word	0x20000634

08005b80 <_malloc_r>:
 8005b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b84:	1ccd      	adds	r5, r1, #3
 8005b86:	f025 0503 	bic.w	r5, r5, #3
 8005b8a:	3508      	adds	r5, #8
 8005b8c:	2d0c      	cmp	r5, #12
 8005b8e:	bf38      	it	cc
 8005b90:	250c      	movcc	r5, #12
 8005b92:	2d00      	cmp	r5, #0
 8005b94:	4606      	mov	r6, r0
 8005b96:	db01      	blt.n	8005b9c <_malloc_r+0x1c>
 8005b98:	42a9      	cmp	r1, r5
 8005b9a:	d904      	bls.n	8005ba6 <_malloc_r+0x26>
 8005b9c:	230c      	movs	r3, #12
 8005b9e:	6033      	str	r3, [r6, #0]
 8005ba0:	2000      	movs	r0, #0
 8005ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ba6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005c7c <_malloc_r+0xfc>
 8005baa:	f000 f869 	bl	8005c80 <__malloc_lock>
 8005bae:	f8d8 3000 	ldr.w	r3, [r8]
 8005bb2:	461c      	mov	r4, r3
 8005bb4:	bb44      	cbnz	r4, 8005c08 <_malloc_r+0x88>
 8005bb6:	4629      	mov	r1, r5
 8005bb8:	4630      	mov	r0, r6
 8005bba:	f7ff ffbf 	bl	8005b3c <sbrk_aligned>
 8005bbe:	1c43      	adds	r3, r0, #1
 8005bc0:	4604      	mov	r4, r0
 8005bc2:	d158      	bne.n	8005c76 <_malloc_r+0xf6>
 8005bc4:	f8d8 4000 	ldr.w	r4, [r8]
 8005bc8:	4627      	mov	r7, r4
 8005bca:	2f00      	cmp	r7, #0
 8005bcc:	d143      	bne.n	8005c56 <_malloc_r+0xd6>
 8005bce:	2c00      	cmp	r4, #0
 8005bd0:	d04b      	beq.n	8005c6a <_malloc_r+0xea>
 8005bd2:	6823      	ldr	r3, [r4, #0]
 8005bd4:	4639      	mov	r1, r7
 8005bd6:	4630      	mov	r0, r6
 8005bd8:	eb04 0903 	add.w	r9, r4, r3
 8005bdc:	f000 fc90 	bl	8006500 <_sbrk_r>
 8005be0:	4581      	cmp	r9, r0
 8005be2:	d142      	bne.n	8005c6a <_malloc_r+0xea>
 8005be4:	6821      	ldr	r1, [r4, #0]
 8005be6:	1a6d      	subs	r5, r5, r1
 8005be8:	4629      	mov	r1, r5
 8005bea:	4630      	mov	r0, r6
 8005bec:	f7ff ffa6 	bl	8005b3c <sbrk_aligned>
 8005bf0:	3001      	adds	r0, #1
 8005bf2:	d03a      	beq.n	8005c6a <_malloc_r+0xea>
 8005bf4:	6823      	ldr	r3, [r4, #0]
 8005bf6:	442b      	add	r3, r5
 8005bf8:	6023      	str	r3, [r4, #0]
 8005bfa:	f8d8 3000 	ldr.w	r3, [r8]
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	bb62      	cbnz	r2, 8005c5c <_malloc_r+0xdc>
 8005c02:	f8c8 7000 	str.w	r7, [r8]
 8005c06:	e00f      	b.n	8005c28 <_malloc_r+0xa8>
 8005c08:	6822      	ldr	r2, [r4, #0]
 8005c0a:	1b52      	subs	r2, r2, r5
 8005c0c:	d420      	bmi.n	8005c50 <_malloc_r+0xd0>
 8005c0e:	2a0b      	cmp	r2, #11
 8005c10:	d917      	bls.n	8005c42 <_malloc_r+0xc2>
 8005c12:	1961      	adds	r1, r4, r5
 8005c14:	42a3      	cmp	r3, r4
 8005c16:	6025      	str	r5, [r4, #0]
 8005c18:	bf18      	it	ne
 8005c1a:	6059      	strne	r1, [r3, #4]
 8005c1c:	6863      	ldr	r3, [r4, #4]
 8005c1e:	bf08      	it	eq
 8005c20:	f8c8 1000 	streq.w	r1, [r8]
 8005c24:	5162      	str	r2, [r4, r5]
 8005c26:	604b      	str	r3, [r1, #4]
 8005c28:	4630      	mov	r0, r6
 8005c2a:	f000 f82f 	bl	8005c8c <__malloc_unlock>
 8005c2e:	f104 000b 	add.w	r0, r4, #11
 8005c32:	1d23      	adds	r3, r4, #4
 8005c34:	f020 0007 	bic.w	r0, r0, #7
 8005c38:	1ac2      	subs	r2, r0, r3
 8005c3a:	bf1c      	itt	ne
 8005c3c:	1a1b      	subne	r3, r3, r0
 8005c3e:	50a3      	strne	r3, [r4, r2]
 8005c40:	e7af      	b.n	8005ba2 <_malloc_r+0x22>
 8005c42:	6862      	ldr	r2, [r4, #4]
 8005c44:	42a3      	cmp	r3, r4
 8005c46:	bf0c      	ite	eq
 8005c48:	f8c8 2000 	streq.w	r2, [r8]
 8005c4c:	605a      	strne	r2, [r3, #4]
 8005c4e:	e7eb      	b.n	8005c28 <_malloc_r+0xa8>
 8005c50:	4623      	mov	r3, r4
 8005c52:	6864      	ldr	r4, [r4, #4]
 8005c54:	e7ae      	b.n	8005bb4 <_malloc_r+0x34>
 8005c56:	463c      	mov	r4, r7
 8005c58:	687f      	ldr	r7, [r7, #4]
 8005c5a:	e7b6      	b.n	8005bca <_malloc_r+0x4a>
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	42a3      	cmp	r3, r4
 8005c62:	d1fb      	bne.n	8005c5c <_malloc_r+0xdc>
 8005c64:	2300      	movs	r3, #0
 8005c66:	6053      	str	r3, [r2, #4]
 8005c68:	e7de      	b.n	8005c28 <_malloc_r+0xa8>
 8005c6a:	230c      	movs	r3, #12
 8005c6c:	6033      	str	r3, [r6, #0]
 8005c6e:	4630      	mov	r0, r6
 8005c70:	f000 f80c 	bl	8005c8c <__malloc_unlock>
 8005c74:	e794      	b.n	8005ba0 <_malloc_r+0x20>
 8005c76:	6005      	str	r5, [r0, #0]
 8005c78:	e7d6      	b.n	8005c28 <_malloc_r+0xa8>
 8005c7a:	bf00      	nop
 8005c7c:	20000638 	.word	0x20000638

08005c80 <__malloc_lock>:
 8005c80:	4801      	ldr	r0, [pc, #4]	@ (8005c88 <__malloc_lock+0x8>)
 8005c82:	f7ff bf00 	b.w	8005a86 <__retarget_lock_acquire_recursive>
 8005c86:	bf00      	nop
 8005c88:	20000630 	.word	0x20000630

08005c8c <__malloc_unlock>:
 8005c8c:	4801      	ldr	r0, [pc, #4]	@ (8005c94 <__malloc_unlock+0x8>)
 8005c8e:	f7ff befb 	b.w	8005a88 <__retarget_lock_release_recursive>
 8005c92:	bf00      	nop
 8005c94:	20000630 	.word	0x20000630

08005c98 <__sfputc_r>:
 8005c98:	6893      	ldr	r3, [r2, #8]
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	b410      	push	{r4}
 8005ca0:	6093      	str	r3, [r2, #8]
 8005ca2:	da08      	bge.n	8005cb6 <__sfputc_r+0x1e>
 8005ca4:	6994      	ldr	r4, [r2, #24]
 8005ca6:	42a3      	cmp	r3, r4
 8005ca8:	db01      	blt.n	8005cae <__sfputc_r+0x16>
 8005caa:	290a      	cmp	r1, #10
 8005cac:	d103      	bne.n	8005cb6 <__sfputc_r+0x1e>
 8005cae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005cb2:	f7ff bdba 	b.w	800582a <__swbuf_r>
 8005cb6:	6813      	ldr	r3, [r2, #0]
 8005cb8:	1c58      	adds	r0, r3, #1
 8005cba:	6010      	str	r0, [r2, #0]
 8005cbc:	7019      	strb	r1, [r3, #0]
 8005cbe:	4608      	mov	r0, r1
 8005cc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005cc4:	4770      	bx	lr

08005cc6 <__sfputs_r>:
 8005cc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cc8:	4606      	mov	r6, r0
 8005cca:	460f      	mov	r7, r1
 8005ccc:	4614      	mov	r4, r2
 8005cce:	18d5      	adds	r5, r2, r3
 8005cd0:	42ac      	cmp	r4, r5
 8005cd2:	d101      	bne.n	8005cd8 <__sfputs_r+0x12>
 8005cd4:	2000      	movs	r0, #0
 8005cd6:	e007      	b.n	8005ce8 <__sfputs_r+0x22>
 8005cd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cdc:	463a      	mov	r2, r7
 8005cde:	4630      	mov	r0, r6
 8005ce0:	f7ff ffda 	bl	8005c98 <__sfputc_r>
 8005ce4:	1c43      	adds	r3, r0, #1
 8005ce6:	d1f3      	bne.n	8005cd0 <__sfputs_r+0xa>
 8005ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005cec <_vfiprintf_r>:
 8005cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cf0:	460d      	mov	r5, r1
 8005cf2:	b09d      	sub	sp, #116	@ 0x74
 8005cf4:	4614      	mov	r4, r2
 8005cf6:	4698      	mov	r8, r3
 8005cf8:	4606      	mov	r6, r0
 8005cfa:	b118      	cbz	r0, 8005d04 <_vfiprintf_r+0x18>
 8005cfc:	6a03      	ldr	r3, [r0, #32]
 8005cfe:	b90b      	cbnz	r3, 8005d04 <_vfiprintf_r+0x18>
 8005d00:	f7ff fca2 	bl	8005648 <__sinit>
 8005d04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d06:	07d9      	lsls	r1, r3, #31
 8005d08:	d405      	bmi.n	8005d16 <_vfiprintf_r+0x2a>
 8005d0a:	89ab      	ldrh	r3, [r5, #12]
 8005d0c:	059a      	lsls	r2, r3, #22
 8005d0e:	d402      	bmi.n	8005d16 <_vfiprintf_r+0x2a>
 8005d10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005d12:	f7ff feb8 	bl	8005a86 <__retarget_lock_acquire_recursive>
 8005d16:	89ab      	ldrh	r3, [r5, #12]
 8005d18:	071b      	lsls	r3, r3, #28
 8005d1a:	d501      	bpl.n	8005d20 <_vfiprintf_r+0x34>
 8005d1c:	692b      	ldr	r3, [r5, #16]
 8005d1e:	b99b      	cbnz	r3, 8005d48 <_vfiprintf_r+0x5c>
 8005d20:	4629      	mov	r1, r5
 8005d22:	4630      	mov	r0, r6
 8005d24:	f7ff fdc0 	bl	80058a8 <__swsetup_r>
 8005d28:	b170      	cbz	r0, 8005d48 <_vfiprintf_r+0x5c>
 8005d2a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d2c:	07dc      	lsls	r4, r3, #31
 8005d2e:	d504      	bpl.n	8005d3a <_vfiprintf_r+0x4e>
 8005d30:	f04f 30ff 	mov.w	r0, #4294967295
 8005d34:	b01d      	add	sp, #116	@ 0x74
 8005d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d3a:	89ab      	ldrh	r3, [r5, #12]
 8005d3c:	0598      	lsls	r0, r3, #22
 8005d3e:	d4f7      	bmi.n	8005d30 <_vfiprintf_r+0x44>
 8005d40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005d42:	f7ff fea1 	bl	8005a88 <__retarget_lock_release_recursive>
 8005d46:	e7f3      	b.n	8005d30 <_vfiprintf_r+0x44>
 8005d48:	2300      	movs	r3, #0
 8005d4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d4c:	2320      	movs	r3, #32
 8005d4e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005d52:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d56:	2330      	movs	r3, #48	@ 0x30
 8005d58:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005f08 <_vfiprintf_r+0x21c>
 8005d5c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005d60:	f04f 0901 	mov.w	r9, #1
 8005d64:	4623      	mov	r3, r4
 8005d66:	469a      	mov	sl, r3
 8005d68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d6c:	b10a      	cbz	r2, 8005d72 <_vfiprintf_r+0x86>
 8005d6e:	2a25      	cmp	r2, #37	@ 0x25
 8005d70:	d1f9      	bne.n	8005d66 <_vfiprintf_r+0x7a>
 8005d72:	ebba 0b04 	subs.w	fp, sl, r4
 8005d76:	d00b      	beq.n	8005d90 <_vfiprintf_r+0xa4>
 8005d78:	465b      	mov	r3, fp
 8005d7a:	4622      	mov	r2, r4
 8005d7c:	4629      	mov	r1, r5
 8005d7e:	4630      	mov	r0, r6
 8005d80:	f7ff ffa1 	bl	8005cc6 <__sfputs_r>
 8005d84:	3001      	adds	r0, #1
 8005d86:	f000 80a7 	beq.w	8005ed8 <_vfiprintf_r+0x1ec>
 8005d8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d8c:	445a      	add	r2, fp
 8005d8e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d90:	f89a 3000 	ldrb.w	r3, [sl]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	f000 809f 	beq.w	8005ed8 <_vfiprintf_r+0x1ec>
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8005da0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005da4:	f10a 0a01 	add.w	sl, sl, #1
 8005da8:	9304      	str	r3, [sp, #16]
 8005daa:	9307      	str	r3, [sp, #28]
 8005dac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005db0:	931a      	str	r3, [sp, #104]	@ 0x68
 8005db2:	4654      	mov	r4, sl
 8005db4:	2205      	movs	r2, #5
 8005db6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dba:	4853      	ldr	r0, [pc, #332]	@ (8005f08 <_vfiprintf_r+0x21c>)
 8005dbc:	f7fa fa08 	bl	80001d0 <memchr>
 8005dc0:	9a04      	ldr	r2, [sp, #16]
 8005dc2:	b9d8      	cbnz	r0, 8005dfc <_vfiprintf_r+0x110>
 8005dc4:	06d1      	lsls	r1, r2, #27
 8005dc6:	bf44      	itt	mi
 8005dc8:	2320      	movmi	r3, #32
 8005dca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005dce:	0713      	lsls	r3, r2, #28
 8005dd0:	bf44      	itt	mi
 8005dd2:	232b      	movmi	r3, #43	@ 0x2b
 8005dd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005dd8:	f89a 3000 	ldrb.w	r3, [sl]
 8005ddc:	2b2a      	cmp	r3, #42	@ 0x2a
 8005dde:	d015      	beq.n	8005e0c <_vfiprintf_r+0x120>
 8005de0:	9a07      	ldr	r2, [sp, #28]
 8005de2:	4654      	mov	r4, sl
 8005de4:	2000      	movs	r0, #0
 8005de6:	f04f 0c0a 	mov.w	ip, #10
 8005dea:	4621      	mov	r1, r4
 8005dec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005df0:	3b30      	subs	r3, #48	@ 0x30
 8005df2:	2b09      	cmp	r3, #9
 8005df4:	d94b      	bls.n	8005e8e <_vfiprintf_r+0x1a2>
 8005df6:	b1b0      	cbz	r0, 8005e26 <_vfiprintf_r+0x13a>
 8005df8:	9207      	str	r2, [sp, #28]
 8005dfa:	e014      	b.n	8005e26 <_vfiprintf_r+0x13a>
 8005dfc:	eba0 0308 	sub.w	r3, r0, r8
 8005e00:	fa09 f303 	lsl.w	r3, r9, r3
 8005e04:	4313      	orrs	r3, r2
 8005e06:	9304      	str	r3, [sp, #16]
 8005e08:	46a2      	mov	sl, r4
 8005e0a:	e7d2      	b.n	8005db2 <_vfiprintf_r+0xc6>
 8005e0c:	9b03      	ldr	r3, [sp, #12]
 8005e0e:	1d19      	adds	r1, r3, #4
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	9103      	str	r1, [sp, #12]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	bfbb      	ittet	lt
 8005e18:	425b      	neglt	r3, r3
 8005e1a:	f042 0202 	orrlt.w	r2, r2, #2
 8005e1e:	9307      	strge	r3, [sp, #28]
 8005e20:	9307      	strlt	r3, [sp, #28]
 8005e22:	bfb8      	it	lt
 8005e24:	9204      	strlt	r2, [sp, #16]
 8005e26:	7823      	ldrb	r3, [r4, #0]
 8005e28:	2b2e      	cmp	r3, #46	@ 0x2e
 8005e2a:	d10a      	bne.n	8005e42 <_vfiprintf_r+0x156>
 8005e2c:	7863      	ldrb	r3, [r4, #1]
 8005e2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e30:	d132      	bne.n	8005e98 <_vfiprintf_r+0x1ac>
 8005e32:	9b03      	ldr	r3, [sp, #12]
 8005e34:	1d1a      	adds	r2, r3, #4
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	9203      	str	r2, [sp, #12]
 8005e3a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005e3e:	3402      	adds	r4, #2
 8005e40:	9305      	str	r3, [sp, #20]
 8005e42:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005f18 <_vfiprintf_r+0x22c>
 8005e46:	7821      	ldrb	r1, [r4, #0]
 8005e48:	2203      	movs	r2, #3
 8005e4a:	4650      	mov	r0, sl
 8005e4c:	f7fa f9c0 	bl	80001d0 <memchr>
 8005e50:	b138      	cbz	r0, 8005e62 <_vfiprintf_r+0x176>
 8005e52:	9b04      	ldr	r3, [sp, #16]
 8005e54:	eba0 000a 	sub.w	r0, r0, sl
 8005e58:	2240      	movs	r2, #64	@ 0x40
 8005e5a:	4082      	lsls	r2, r0
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	3401      	adds	r4, #1
 8005e60:	9304      	str	r3, [sp, #16]
 8005e62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e66:	4829      	ldr	r0, [pc, #164]	@ (8005f0c <_vfiprintf_r+0x220>)
 8005e68:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005e6c:	2206      	movs	r2, #6
 8005e6e:	f7fa f9af 	bl	80001d0 <memchr>
 8005e72:	2800      	cmp	r0, #0
 8005e74:	d03f      	beq.n	8005ef6 <_vfiprintf_r+0x20a>
 8005e76:	4b26      	ldr	r3, [pc, #152]	@ (8005f10 <_vfiprintf_r+0x224>)
 8005e78:	bb1b      	cbnz	r3, 8005ec2 <_vfiprintf_r+0x1d6>
 8005e7a:	9b03      	ldr	r3, [sp, #12]
 8005e7c:	3307      	adds	r3, #7
 8005e7e:	f023 0307 	bic.w	r3, r3, #7
 8005e82:	3308      	adds	r3, #8
 8005e84:	9303      	str	r3, [sp, #12]
 8005e86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e88:	443b      	add	r3, r7
 8005e8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e8c:	e76a      	b.n	8005d64 <_vfiprintf_r+0x78>
 8005e8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e92:	460c      	mov	r4, r1
 8005e94:	2001      	movs	r0, #1
 8005e96:	e7a8      	b.n	8005dea <_vfiprintf_r+0xfe>
 8005e98:	2300      	movs	r3, #0
 8005e9a:	3401      	adds	r4, #1
 8005e9c:	9305      	str	r3, [sp, #20]
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	f04f 0c0a 	mov.w	ip, #10
 8005ea4:	4620      	mov	r0, r4
 8005ea6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005eaa:	3a30      	subs	r2, #48	@ 0x30
 8005eac:	2a09      	cmp	r2, #9
 8005eae:	d903      	bls.n	8005eb8 <_vfiprintf_r+0x1cc>
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d0c6      	beq.n	8005e42 <_vfiprintf_r+0x156>
 8005eb4:	9105      	str	r1, [sp, #20]
 8005eb6:	e7c4      	b.n	8005e42 <_vfiprintf_r+0x156>
 8005eb8:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ebc:	4604      	mov	r4, r0
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e7f0      	b.n	8005ea4 <_vfiprintf_r+0x1b8>
 8005ec2:	ab03      	add	r3, sp, #12
 8005ec4:	9300      	str	r3, [sp, #0]
 8005ec6:	462a      	mov	r2, r5
 8005ec8:	4b12      	ldr	r3, [pc, #72]	@ (8005f14 <_vfiprintf_r+0x228>)
 8005eca:	a904      	add	r1, sp, #16
 8005ecc:	4630      	mov	r0, r6
 8005ece:	f3af 8000 	nop.w
 8005ed2:	4607      	mov	r7, r0
 8005ed4:	1c78      	adds	r0, r7, #1
 8005ed6:	d1d6      	bne.n	8005e86 <_vfiprintf_r+0x19a>
 8005ed8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005eda:	07d9      	lsls	r1, r3, #31
 8005edc:	d405      	bmi.n	8005eea <_vfiprintf_r+0x1fe>
 8005ede:	89ab      	ldrh	r3, [r5, #12]
 8005ee0:	059a      	lsls	r2, r3, #22
 8005ee2:	d402      	bmi.n	8005eea <_vfiprintf_r+0x1fe>
 8005ee4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005ee6:	f7ff fdcf 	bl	8005a88 <__retarget_lock_release_recursive>
 8005eea:	89ab      	ldrh	r3, [r5, #12]
 8005eec:	065b      	lsls	r3, r3, #25
 8005eee:	f53f af1f 	bmi.w	8005d30 <_vfiprintf_r+0x44>
 8005ef2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ef4:	e71e      	b.n	8005d34 <_vfiprintf_r+0x48>
 8005ef6:	ab03      	add	r3, sp, #12
 8005ef8:	9300      	str	r3, [sp, #0]
 8005efa:	462a      	mov	r2, r5
 8005efc:	4b05      	ldr	r3, [pc, #20]	@ (8005f14 <_vfiprintf_r+0x228>)
 8005efe:	a904      	add	r1, sp, #16
 8005f00:	4630      	mov	r0, r6
 8005f02:	f000 f879 	bl	8005ff8 <_printf_i>
 8005f06:	e7e4      	b.n	8005ed2 <_vfiprintf_r+0x1e6>
 8005f08:	080066c8 	.word	0x080066c8
 8005f0c:	080066d2 	.word	0x080066d2
 8005f10:	00000000 	.word	0x00000000
 8005f14:	08005cc7 	.word	0x08005cc7
 8005f18:	080066ce 	.word	0x080066ce

08005f1c <_printf_common>:
 8005f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f20:	4616      	mov	r6, r2
 8005f22:	4698      	mov	r8, r3
 8005f24:	688a      	ldr	r2, [r1, #8]
 8005f26:	690b      	ldr	r3, [r1, #16]
 8005f28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	bfb8      	it	lt
 8005f30:	4613      	movlt	r3, r2
 8005f32:	6033      	str	r3, [r6, #0]
 8005f34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005f38:	4607      	mov	r7, r0
 8005f3a:	460c      	mov	r4, r1
 8005f3c:	b10a      	cbz	r2, 8005f42 <_printf_common+0x26>
 8005f3e:	3301      	adds	r3, #1
 8005f40:	6033      	str	r3, [r6, #0]
 8005f42:	6823      	ldr	r3, [r4, #0]
 8005f44:	0699      	lsls	r1, r3, #26
 8005f46:	bf42      	ittt	mi
 8005f48:	6833      	ldrmi	r3, [r6, #0]
 8005f4a:	3302      	addmi	r3, #2
 8005f4c:	6033      	strmi	r3, [r6, #0]
 8005f4e:	6825      	ldr	r5, [r4, #0]
 8005f50:	f015 0506 	ands.w	r5, r5, #6
 8005f54:	d106      	bne.n	8005f64 <_printf_common+0x48>
 8005f56:	f104 0a19 	add.w	sl, r4, #25
 8005f5a:	68e3      	ldr	r3, [r4, #12]
 8005f5c:	6832      	ldr	r2, [r6, #0]
 8005f5e:	1a9b      	subs	r3, r3, r2
 8005f60:	42ab      	cmp	r3, r5
 8005f62:	dc26      	bgt.n	8005fb2 <_printf_common+0x96>
 8005f64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005f68:	6822      	ldr	r2, [r4, #0]
 8005f6a:	3b00      	subs	r3, #0
 8005f6c:	bf18      	it	ne
 8005f6e:	2301      	movne	r3, #1
 8005f70:	0692      	lsls	r2, r2, #26
 8005f72:	d42b      	bmi.n	8005fcc <_printf_common+0xb0>
 8005f74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005f78:	4641      	mov	r1, r8
 8005f7a:	4638      	mov	r0, r7
 8005f7c:	47c8      	blx	r9
 8005f7e:	3001      	adds	r0, #1
 8005f80:	d01e      	beq.n	8005fc0 <_printf_common+0xa4>
 8005f82:	6823      	ldr	r3, [r4, #0]
 8005f84:	6922      	ldr	r2, [r4, #16]
 8005f86:	f003 0306 	and.w	r3, r3, #6
 8005f8a:	2b04      	cmp	r3, #4
 8005f8c:	bf02      	ittt	eq
 8005f8e:	68e5      	ldreq	r5, [r4, #12]
 8005f90:	6833      	ldreq	r3, [r6, #0]
 8005f92:	1aed      	subeq	r5, r5, r3
 8005f94:	68a3      	ldr	r3, [r4, #8]
 8005f96:	bf0c      	ite	eq
 8005f98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f9c:	2500      	movne	r5, #0
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	bfc4      	itt	gt
 8005fa2:	1a9b      	subgt	r3, r3, r2
 8005fa4:	18ed      	addgt	r5, r5, r3
 8005fa6:	2600      	movs	r6, #0
 8005fa8:	341a      	adds	r4, #26
 8005faa:	42b5      	cmp	r5, r6
 8005fac:	d11a      	bne.n	8005fe4 <_printf_common+0xc8>
 8005fae:	2000      	movs	r0, #0
 8005fb0:	e008      	b.n	8005fc4 <_printf_common+0xa8>
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	4652      	mov	r2, sl
 8005fb6:	4641      	mov	r1, r8
 8005fb8:	4638      	mov	r0, r7
 8005fba:	47c8      	blx	r9
 8005fbc:	3001      	adds	r0, #1
 8005fbe:	d103      	bne.n	8005fc8 <_printf_common+0xac>
 8005fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fc8:	3501      	adds	r5, #1
 8005fca:	e7c6      	b.n	8005f5a <_printf_common+0x3e>
 8005fcc:	18e1      	adds	r1, r4, r3
 8005fce:	1c5a      	adds	r2, r3, #1
 8005fd0:	2030      	movs	r0, #48	@ 0x30
 8005fd2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005fd6:	4422      	add	r2, r4
 8005fd8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005fdc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005fe0:	3302      	adds	r3, #2
 8005fe2:	e7c7      	b.n	8005f74 <_printf_common+0x58>
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	4622      	mov	r2, r4
 8005fe8:	4641      	mov	r1, r8
 8005fea:	4638      	mov	r0, r7
 8005fec:	47c8      	blx	r9
 8005fee:	3001      	adds	r0, #1
 8005ff0:	d0e6      	beq.n	8005fc0 <_printf_common+0xa4>
 8005ff2:	3601      	adds	r6, #1
 8005ff4:	e7d9      	b.n	8005faa <_printf_common+0x8e>
	...

08005ff8 <_printf_i>:
 8005ff8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ffc:	7e0f      	ldrb	r7, [r1, #24]
 8005ffe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006000:	2f78      	cmp	r7, #120	@ 0x78
 8006002:	4691      	mov	r9, r2
 8006004:	4680      	mov	r8, r0
 8006006:	460c      	mov	r4, r1
 8006008:	469a      	mov	sl, r3
 800600a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800600e:	d807      	bhi.n	8006020 <_printf_i+0x28>
 8006010:	2f62      	cmp	r7, #98	@ 0x62
 8006012:	d80a      	bhi.n	800602a <_printf_i+0x32>
 8006014:	2f00      	cmp	r7, #0
 8006016:	f000 80d2 	beq.w	80061be <_printf_i+0x1c6>
 800601a:	2f58      	cmp	r7, #88	@ 0x58
 800601c:	f000 80b9 	beq.w	8006192 <_printf_i+0x19a>
 8006020:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006024:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006028:	e03a      	b.n	80060a0 <_printf_i+0xa8>
 800602a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800602e:	2b15      	cmp	r3, #21
 8006030:	d8f6      	bhi.n	8006020 <_printf_i+0x28>
 8006032:	a101      	add	r1, pc, #4	@ (adr r1, 8006038 <_printf_i+0x40>)
 8006034:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006038:	08006091 	.word	0x08006091
 800603c:	080060a5 	.word	0x080060a5
 8006040:	08006021 	.word	0x08006021
 8006044:	08006021 	.word	0x08006021
 8006048:	08006021 	.word	0x08006021
 800604c:	08006021 	.word	0x08006021
 8006050:	080060a5 	.word	0x080060a5
 8006054:	08006021 	.word	0x08006021
 8006058:	08006021 	.word	0x08006021
 800605c:	08006021 	.word	0x08006021
 8006060:	08006021 	.word	0x08006021
 8006064:	080061a5 	.word	0x080061a5
 8006068:	080060cf 	.word	0x080060cf
 800606c:	0800615f 	.word	0x0800615f
 8006070:	08006021 	.word	0x08006021
 8006074:	08006021 	.word	0x08006021
 8006078:	080061c7 	.word	0x080061c7
 800607c:	08006021 	.word	0x08006021
 8006080:	080060cf 	.word	0x080060cf
 8006084:	08006021 	.word	0x08006021
 8006088:	08006021 	.word	0x08006021
 800608c:	08006167 	.word	0x08006167
 8006090:	6833      	ldr	r3, [r6, #0]
 8006092:	1d1a      	adds	r2, r3, #4
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	6032      	str	r2, [r6, #0]
 8006098:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800609c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80060a0:	2301      	movs	r3, #1
 80060a2:	e09d      	b.n	80061e0 <_printf_i+0x1e8>
 80060a4:	6833      	ldr	r3, [r6, #0]
 80060a6:	6820      	ldr	r0, [r4, #0]
 80060a8:	1d19      	adds	r1, r3, #4
 80060aa:	6031      	str	r1, [r6, #0]
 80060ac:	0606      	lsls	r6, r0, #24
 80060ae:	d501      	bpl.n	80060b4 <_printf_i+0xbc>
 80060b0:	681d      	ldr	r5, [r3, #0]
 80060b2:	e003      	b.n	80060bc <_printf_i+0xc4>
 80060b4:	0645      	lsls	r5, r0, #25
 80060b6:	d5fb      	bpl.n	80060b0 <_printf_i+0xb8>
 80060b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80060bc:	2d00      	cmp	r5, #0
 80060be:	da03      	bge.n	80060c8 <_printf_i+0xd0>
 80060c0:	232d      	movs	r3, #45	@ 0x2d
 80060c2:	426d      	negs	r5, r5
 80060c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060c8:	4859      	ldr	r0, [pc, #356]	@ (8006230 <_printf_i+0x238>)
 80060ca:	230a      	movs	r3, #10
 80060cc:	e011      	b.n	80060f2 <_printf_i+0xfa>
 80060ce:	6821      	ldr	r1, [r4, #0]
 80060d0:	6833      	ldr	r3, [r6, #0]
 80060d2:	0608      	lsls	r0, r1, #24
 80060d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80060d8:	d402      	bmi.n	80060e0 <_printf_i+0xe8>
 80060da:	0649      	lsls	r1, r1, #25
 80060dc:	bf48      	it	mi
 80060de:	b2ad      	uxthmi	r5, r5
 80060e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80060e2:	4853      	ldr	r0, [pc, #332]	@ (8006230 <_printf_i+0x238>)
 80060e4:	6033      	str	r3, [r6, #0]
 80060e6:	bf14      	ite	ne
 80060e8:	230a      	movne	r3, #10
 80060ea:	2308      	moveq	r3, #8
 80060ec:	2100      	movs	r1, #0
 80060ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80060f2:	6866      	ldr	r6, [r4, #4]
 80060f4:	60a6      	str	r6, [r4, #8]
 80060f6:	2e00      	cmp	r6, #0
 80060f8:	bfa2      	ittt	ge
 80060fa:	6821      	ldrge	r1, [r4, #0]
 80060fc:	f021 0104 	bicge.w	r1, r1, #4
 8006100:	6021      	strge	r1, [r4, #0]
 8006102:	b90d      	cbnz	r5, 8006108 <_printf_i+0x110>
 8006104:	2e00      	cmp	r6, #0
 8006106:	d04b      	beq.n	80061a0 <_printf_i+0x1a8>
 8006108:	4616      	mov	r6, r2
 800610a:	fbb5 f1f3 	udiv	r1, r5, r3
 800610e:	fb03 5711 	mls	r7, r3, r1, r5
 8006112:	5dc7      	ldrb	r7, [r0, r7]
 8006114:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006118:	462f      	mov	r7, r5
 800611a:	42bb      	cmp	r3, r7
 800611c:	460d      	mov	r5, r1
 800611e:	d9f4      	bls.n	800610a <_printf_i+0x112>
 8006120:	2b08      	cmp	r3, #8
 8006122:	d10b      	bne.n	800613c <_printf_i+0x144>
 8006124:	6823      	ldr	r3, [r4, #0]
 8006126:	07df      	lsls	r7, r3, #31
 8006128:	d508      	bpl.n	800613c <_printf_i+0x144>
 800612a:	6923      	ldr	r3, [r4, #16]
 800612c:	6861      	ldr	r1, [r4, #4]
 800612e:	4299      	cmp	r1, r3
 8006130:	bfde      	ittt	le
 8006132:	2330      	movle	r3, #48	@ 0x30
 8006134:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006138:	f106 36ff 	addle.w	r6, r6, #4294967295
 800613c:	1b92      	subs	r2, r2, r6
 800613e:	6122      	str	r2, [r4, #16]
 8006140:	f8cd a000 	str.w	sl, [sp]
 8006144:	464b      	mov	r3, r9
 8006146:	aa03      	add	r2, sp, #12
 8006148:	4621      	mov	r1, r4
 800614a:	4640      	mov	r0, r8
 800614c:	f7ff fee6 	bl	8005f1c <_printf_common>
 8006150:	3001      	adds	r0, #1
 8006152:	d14a      	bne.n	80061ea <_printf_i+0x1f2>
 8006154:	f04f 30ff 	mov.w	r0, #4294967295
 8006158:	b004      	add	sp, #16
 800615a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800615e:	6823      	ldr	r3, [r4, #0]
 8006160:	f043 0320 	orr.w	r3, r3, #32
 8006164:	6023      	str	r3, [r4, #0]
 8006166:	4833      	ldr	r0, [pc, #204]	@ (8006234 <_printf_i+0x23c>)
 8006168:	2778      	movs	r7, #120	@ 0x78
 800616a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800616e:	6823      	ldr	r3, [r4, #0]
 8006170:	6831      	ldr	r1, [r6, #0]
 8006172:	061f      	lsls	r7, r3, #24
 8006174:	f851 5b04 	ldr.w	r5, [r1], #4
 8006178:	d402      	bmi.n	8006180 <_printf_i+0x188>
 800617a:	065f      	lsls	r7, r3, #25
 800617c:	bf48      	it	mi
 800617e:	b2ad      	uxthmi	r5, r5
 8006180:	6031      	str	r1, [r6, #0]
 8006182:	07d9      	lsls	r1, r3, #31
 8006184:	bf44      	itt	mi
 8006186:	f043 0320 	orrmi.w	r3, r3, #32
 800618a:	6023      	strmi	r3, [r4, #0]
 800618c:	b11d      	cbz	r5, 8006196 <_printf_i+0x19e>
 800618e:	2310      	movs	r3, #16
 8006190:	e7ac      	b.n	80060ec <_printf_i+0xf4>
 8006192:	4827      	ldr	r0, [pc, #156]	@ (8006230 <_printf_i+0x238>)
 8006194:	e7e9      	b.n	800616a <_printf_i+0x172>
 8006196:	6823      	ldr	r3, [r4, #0]
 8006198:	f023 0320 	bic.w	r3, r3, #32
 800619c:	6023      	str	r3, [r4, #0]
 800619e:	e7f6      	b.n	800618e <_printf_i+0x196>
 80061a0:	4616      	mov	r6, r2
 80061a2:	e7bd      	b.n	8006120 <_printf_i+0x128>
 80061a4:	6833      	ldr	r3, [r6, #0]
 80061a6:	6825      	ldr	r5, [r4, #0]
 80061a8:	6961      	ldr	r1, [r4, #20]
 80061aa:	1d18      	adds	r0, r3, #4
 80061ac:	6030      	str	r0, [r6, #0]
 80061ae:	062e      	lsls	r6, r5, #24
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	d501      	bpl.n	80061b8 <_printf_i+0x1c0>
 80061b4:	6019      	str	r1, [r3, #0]
 80061b6:	e002      	b.n	80061be <_printf_i+0x1c6>
 80061b8:	0668      	lsls	r0, r5, #25
 80061ba:	d5fb      	bpl.n	80061b4 <_printf_i+0x1bc>
 80061bc:	8019      	strh	r1, [r3, #0]
 80061be:	2300      	movs	r3, #0
 80061c0:	6123      	str	r3, [r4, #16]
 80061c2:	4616      	mov	r6, r2
 80061c4:	e7bc      	b.n	8006140 <_printf_i+0x148>
 80061c6:	6833      	ldr	r3, [r6, #0]
 80061c8:	1d1a      	adds	r2, r3, #4
 80061ca:	6032      	str	r2, [r6, #0]
 80061cc:	681e      	ldr	r6, [r3, #0]
 80061ce:	6862      	ldr	r2, [r4, #4]
 80061d0:	2100      	movs	r1, #0
 80061d2:	4630      	mov	r0, r6
 80061d4:	f7f9 fffc 	bl	80001d0 <memchr>
 80061d8:	b108      	cbz	r0, 80061de <_printf_i+0x1e6>
 80061da:	1b80      	subs	r0, r0, r6
 80061dc:	6060      	str	r0, [r4, #4]
 80061de:	6863      	ldr	r3, [r4, #4]
 80061e0:	6123      	str	r3, [r4, #16]
 80061e2:	2300      	movs	r3, #0
 80061e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061e8:	e7aa      	b.n	8006140 <_printf_i+0x148>
 80061ea:	6923      	ldr	r3, [r4, #16]
 80061ec:	4632      	mov	r2, r6
 80061ee:	4649      	mov	r1, r9
 80061f0:	4640      	mov	r0, r8
 80061f2:	47d0      	blx	sl
 80061f4:	3001      	adds	r0, #1
 80061f6:	d0ad      	beq.n	8006154 <_printf_i+0x15c>
 80061f8:	6823      	ldr	r3, [r4, #0]
 80061fa:	079b      	lsls	r3, r3, #30
 80061fc:	d413      	bmi.n	8006226 <_printf_i+0x22e>
 80061fe:	68e0      	ldr	r0, [r4, #12]
 8006200:	9b03      	ldr	r3, [sp, #12]
 8006202:	4298      	cmp	r0, r3
 8006204:	bfb8      	it	lt
 8006206:	4618      	movlt	r0, r3
 8006208:	e7a6      	b.n	8006158 <_printf_i+0x160>
 800620a:	2301      	movs	r3, #1
 800620c:	4632      	mov	r2, r6
 800620e:	4649      	mov	r1, r9
 8006210:	4640      	mov	r0, r8
 8006212:	47d0      	blx	sl
 8006214:	3001      	adds	r0, #1
 8006216:	d09d      	beq.n	8006154 <_printf_i+0x15c>
 8006218:	3501      	adds	r5, #1
 800621a:	68e3      	ldr	r3, [r4, #12]
 800621c:	9903      	ldr	r1, [sp, #12]
 800621e:	1a5b      	subs	r3, r3, r1
 8006220:	42ab      	cmp	r3, r5
 8006222:	dcf2      	bgt.n	800620a <_printf_i+0x212>
 8006224:	e7eb      	b.n	80061fe <_printf_i+0x206>
 8006226:	2500      	movs	r5, #0
 8006228:	f104 0619 	add.w	r6, r4, #25
 800622c:	e7f5      	b.n	800621a <_printf_i+0x222>
 800622e:	bf00      	nop
 8006230:	080066d9 	.word	0x080066d9
 8006234:	080066ea 	.word	0x080066ea

08006238 <__sflush_r>:
 8006238:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800623c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006240:	0716      	lsls	r6, r2, #28
 8006242:	4605      	mov	r5, r0
 8006244:	460c      	mov	r4, r1
 8006246:	d454      	bmi.n	80062f2 <__sflush_r+0xba>
 8006248:	684b      	ldr	r3, [r1, #4]
 800624a:	2b00      	cmp	r3, #0
 800624c:	dc02      	bgt.n	8006254 <__sflush_r+0x1c>
 800624e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006250:	2b00      	cmp	r3, #0
 8006252:	dd48      	ble.n	80062e6 <__sflush_r+0xae>
 8006254:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006256:	2e00      	cmp	r6, #0
 8006258:	d045      	beq.n	80062e6 <__sflush_r+0xae>
 800625a:	2300      	movs	r3, #0
 800625c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006260:	682f      	ldr	r7, [r5, #0]
 8006262:	6a21      	ldr	r1, [r4, #32]
 8006264:	602b      	str	r3, [r5, #0]
 8006266:	d030      	beq.n	80062ca <__sflush_r+0x92>
 8006268:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800626a:	89a3      	ldrh	r3, [r4, #12]
 800626c:	0759      	lsls	r1, r3, #29
 800626e:	d505      	bpl.n	800627c <__sflush_r+0x44>
 8006270:	6863      	ldr	r3, [r4, #4]
 8006272:	1ad2      	subs	r2, r2, r3
 8006274:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006276:	b10b      	cbz	r3, 800627c <__sflush_r+0x44>
 8006278:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800627a:	1ad2      	subs	r2, r2, r3
 800627c:	2300      	movs	r3, #0
 800627e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006280:	6a21      	ldr	r1, [r4, #32]
 8006282:	4628      	mov	r0, r5
 8006284:	47b0      	blx	r6
 8006286:	1c43      	adds	r3, r0, #1
 8006288:	89a3      	ldrh	r3, [r4, #12]
 800628a:	d106      	bne.n	800629a <__sflush_r+0x62>
 800628c:	6829      	ldr	r1, [r5, #0]
 800628e:	291d      	cmp	r1, #29
 8006290:	d82b      	bhi.n	80062ea <__sflush_r+0xb2>
 8006292:	4a2a      	ldr	r2, [pc, #168]	@ (800633c <__sflush_r+0x104>)
 8006294:	410a      	asrs	r2, r1
 8006296:	07d6      	lsls	r6, r2, #31
 8006298:	d427      	bmi.n	80062ea <__sflush_r+0xb2>
 800629a:	2200      	movs	r2, #0
 800629c:	6062      	str	r2, [r4, #4]
 800629e:	04d9      	lsls	r1, r3, #19
 80062a0:	6922      	ldr	r2, [r4, #16]
 80062a2:	6022      	str	r2, [r4, #0]
 80062a4:	d504      	bpl.n	80062b0 <__sflush_r+0x78>
 80062a6:	1c42      	adds	r2, r0, #1
 80062a8:	d101      	bne.n	80062ae <__sflush_r+0x76>
 80062aa:	682b      	ldr	r3, [r5, #0]
 80062ac:	b903      	cbnz	r3, 80062b0 <__sflush_r+0x78>
 80062ae:	6560      	str	r0, [r4, #84]	@ 0x54
 80062b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80062b2:	602f      	str	r7, [r5, #0]
 80062b4:	b1b9      	cbz	r1, 80062e6 <__sflush_r+0xae>
 80062b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80062ba:	4299      	cmp	r1, r3
 80062bc:	d002      	beq.n	80062c4 <__sflush_r+0x8c>
 80062be:	4628      	mov	r0, r5
 80062c0:	f7ff fbf2 	bl	8005aa8 <_free_r>
 80062c4:	2300      	movs	r3, #0
 80062c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80062c8:	e00d      	b.n	80062e6 <__sflush_r+0xae>
 80062ca:	2301      	movs	r3, #1
 80062cc:	4628      	mov	r0, r5
 80062ce:	47b0      	blx	r6
 80062d0:	4602      	mov	r2, r0
 80062d2:	1c50      	adds	r0, r2, #1
 80062d4:	d1c9      	bne.n	800626a <__sflush_r+0x32>
 80062d6:	682b      	ldr	r3, [r5, #0]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d0c6      	beq.n	800626a <__sflush_r+0x32>
 80062dc:	2b1d      	cmp	r3, #29
 80062de:	d001      	beq.n	80062e4 <__sflush_r+0xac>
 80062e0:	2b16      	cmp	r3, #22
 80062e2:	d11e      	bne.n	8006322 <__sflush_r+0xea>
 80062e4:	602f      	str	r7, [r5, #0]
 80062e6:	2000      	movs	r0, #0
 80062e8:	e022      	b.n	8006330 <__sflush_r+0xf8>
 80062ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062ee:	b21b      	sxth	r3, r3
 80062f0:	e01b      	b.n	800632a <__sflush_r+0xf2>
 80062f2:	690f      	ldr	r7, [r1, #16]
 80062f4:	2f00      	cmp	r7, #0
 80062f6:	d0f6      	beq.n	80062e6 <__sflush_r+0xae>
 80062f8:	0793      	lsls	r3, r2, #30
 80062fa:	680e      	ldr	r6, [r1, #0]
 80062fc:	bf08      	it	eq
 80062fe:	694b      	ldreq	r3, [r1, #20]
 8006300:	600f      	str	r7, [r1, #0]
 8006302:	bf18      	it	ne
 8006304:	2300      	movne	r3, #0
 8006306:	eba6 0807 	sub.w	r8, r6, r7
 800630a:	608b      	str	r3, [r1, #8]
 800630c:	f1b8 0f00 	cmp.w	r8, #0
 8006310:	dde9      	ble.n	80062e6 <__sflush_r+0xae>
 8006312:	6a21      	ldr	r1, [r4, #32]
 8006314:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006316:	4643      	mov	r3, r8
 8006318:	463a      	mov	r2, r7
 800631a:	4628      	mov	r0, r5
 800631c:	47b0      	blx	r6
 800631e:	2800      	cmp	r0, #0
 8006320:	dc08      	bgt.n	8006334 <__sflush_r+0xfc>
 8006322:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006326:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800632a:	81a3      	strh	r3, [r4, #12]
 800632c:	f04f 30ff 	mov.w	r0, #4294967295
 8006330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006334:	4407      	add	r7, r0
 8006336:	eba8 0800 	sub.w	r8, r8, r0
 800633a:	e7e7      	b.n	800630c <__sflush_r+0xd4>
 800633c:	dfbffffe 	.word	0xdfbffffe

08006340 <_fflush_r>:
 8006340:	b538      	push	{r3, r4, r5, lr}
 8006342:	690b      	ldr	r3, [r1, #16]
 8006344:	4605      	mov	r5, r0
 8006346:	460c      	mov	r4, r1
 8006348:	b913      	cbnz	r3, 8006350 <_fflush_r+0x10>
 800634a:	2500      	movs	r5, #0
 800634c:	4628      	mov	r0, r5
 800634e:	bd38      	pop	{r3, r4, r5, pc}
 8006350:	b118      	cbz	r0, 800635a <_fflush_r+0x1a>
 8006352:	6a03      	ldr	r3, [r0, #32]
 8006354:	b90b      	cbnz	r3, 800635a <_fflush_r+0x1a>
 8006356:	f7ff f977 	bl	8005648 <__sinit>
 800635a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d0f3      	beq.n	800634a <_fflush_r+0xa>
 8006362:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006364:	07d0      	lsls	r0, r2, #31
 8006366:	d404      	bmi.n	8006372 <_fflush_r+0x32>
 8006368:	0599      	lsls	r1, r3, #22
 800636a:	d402      	bmi.n	8006372 <_fflush_r+0x32>
 800636c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800636e:	f7ff fb8a 	bl	8005a86 <__retarget_lock_acquire_recursive>
 8006372:	4628      	mov	r0, r5
 8006374:	4621      	mov	r1, r4
 8006376:	f7ff ff5f 	bl	8006238 <__sflush_r>
 800637a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800637c:	07da      	lsls	r2, r3, #31
 800637e:	4605      	mov	r5, r0
 8006380:	d4e4      	bmi.n	800634c <_fflush_r+0xc>
 8006382:	89a3      	ldrh	r3, [r4, #12]
 8006384:	059b      	lsls	r3, r3, #22
 8006386:	d4e1      	bmi.n	800634c <_fflush_r+0xc>
 8006388:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800638a:	f7ff fb7d 	bl	8005a88 <__retarget_lock_release_recursive>
 800638e:	e7dd      	b.n	800634c <_fflush_r+0xc>

08006390 <__swhatbuf_r>:
 8006390:	b570      	push	{r4, r5, r6, lr}
 8006392:	460c      	mov	r4, r1
 8006394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006398:	2900      	cmp	r1, #0
 800639a:	b096      	sub	sp, #88	@ 0x58
 800639c:	4615      	mov	r5, r2
 800639e:	461e      	mov	r6, r3
 80063a0:	da0d      	bge.n	80063be <__swhatbuf_r+0x2e>
 80063a2:	89a3      	ldrh	r3, [r4, #12]
 80063a4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80063a8:	f04f 0100 	mov.w	r1, #0
 80063ac:	bf14      	ite	ne
 80063ae:	2340      	movne	r3, #64	@ 0x40
 80063b0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80063b4:	2000      	movs	r0, #0
 80063b6:	6031      	str	r1, [r6, #0]
 80063b8:	602b      	str	r3, [r5, #0]
 80063ba:	b016      	add	sp, #88	@ 0x58
 80063bc:	bd70      	pop	{r4, r5, r6, pc}
 80063be:	466a      	mov	r2, sp
 80063c0:	f000 f87c 	bl	80064bc <_fstat_r>
 80063c4:	2800      	cmp	r0, #0
 80063c6:	dbec      	blt.n	80063a2 <__swhatbuf_r+0x12>
 80063c8:	9901      	ldr	r1, [sp, #4]
 80063ca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80063ce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80063d2:	4259      	negs	r1, r3
 80063d4:	4159      	adcs	r1, r3
 80063d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80063da:	e7eb      	b.n	80063b4 <__swhatbuf_r+0x24>

080063dc <__smakebuf_r>:
 80063dc:	898b      	ldrh	r3, [r1, #12]
 80063de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063e0:	079d      	lsls	r5, r3, #30
 80063e2:	4606      	mov	r6, r0
 80063e4:	460c      	mov	r4, r1
 80063e6:	d507      	bpl.n	80063f8 <__smakebuf_r+0x1c>
 80063e8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80063ec:	6023      	str	r3, [r4, #0]
 80063ee:	6123      	str	r3, [r4, #16]
 80063f0:	2301      	movs	r3, #1
 80063f2:	6163      	str	r3, [r4, #20]
 80063f4:	b003      	add	sp, #12
 80063f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063f8:	ab01      	add	r3, sp, #4
 80063fa:	466a      	mov	r2, sp
 80063fc:	f7ff ffc8 	bl	8006390 <__swhatbuf_r>
 8006400:	9f00      	ldr	r7, [sp, #0]
 8006402:	4605      	mov	r5, r0
 8006404:	4639      	mov	r1, r7
 8006406:	4630      	mov	r0, r6
 8006408:	f7ff fbba 	bl	8005b80 <_malloc_r>
 800640c:	b948      	cbnz	r0, 8006422 <__smakebuf_r+0x46>
 800640e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006412:	059a      	lsls	r2, r3, #22
 8006414:	d4ee      	bmi.n	80063f4 <__smakebuf_r+0x18>
 8006416:	f023 0303 	bic.w	r3, r3, #3
 800641a:	f043 0302 	orr.w	r3, r3, #2
 800641e:	81a3      	strh	r3, [r4, #12]
 8006420:	e7e2      	b.n	80063e8 <__smakebuf_r+0xc>
 8006422:	89a3      	ldrh	r3, [r4, #12]
 8006424:	6020      	str	r0, [r4, #0]
 8006426:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800642a:	81a3      	strh	r3, [r4, #12]
 800642c:	9b01      	ldr	r3, [sp, #4]
 800642e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006432:	b15b      	cbz	r3, 800644c <__smakebuf_r+0x70>
 8006434:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006438:	4630      	mov	r0, r6
 800643a:	f000 f851 	bl	80064e0 <_isatty_r>
 800643e:	b128      	cbz	r0, 800644c <__smakebuf_r+0x70>
 8006440:	89a3      	ldrh	r3, [r4, #12]
 8006442:	f023 0303 	bic.w	r3, r3, #3
 8006446:	f043 0301 	orr.w	r3, r3, #1
 800644a:	81a3      	strh	r3, [r4, #12]
 800644c:	89a3      	ldrh	r3, [r4, #12]
 800644e:	431d      	orrs	r5, r3
 8006450:	81a5      	strh	r5, [r4, #12]
 8006452:	e7cf      	b.n	80063f4 <__smakebuf_r+0x18>

08006454 <_putc_r>:
 8006454:	b570      	push	{r4, r5, r6, lr}
 8006456:	460d      	mov	r5, r1
 8006458:	4614      	mov	r4, r2
 800645a:	4606      	mov	r6, r0
 800645c:	b118      	cbz	r0, 8006466 <_putc_r+0x12>
 800645e:	6a03      	ldr	r3, [r0, #32]
 8006460:	b90b      	cbnz	r3, 8006466 <_putc_r+0x12>
 8006462:	f7ff f8f1 	bl	8005648 <__sinit>
 8006466:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006468:	07d8      	lsls	r0, r3, #31
 800646a:	d405      	bmi.n	8006478 <_putc_r+0x24>
 800646c:	89a3      	ldrh	r3, [r4, #12]
 800646e:	0599      	lsls	r1, r3, #22
 8006470:	d402      	bmi.n	8006478 <_putc_r+0x24>
 8006472:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006474:	f7ff fb07 	bl	8005a86 <__retarget_lock_acquire_recursive>
 8006478:	68a3      	ldr	r3, [r4, #8]
 800647a:	3b01      	subs	r3, #1
 800647c:	2b00      	cmp	r3, #0
 800647e:	60a3      	str	r3, [r4, #8]
 8006480:	da05      	bge.n	800648e <_putc_r+0x3a>
 8006482:	69a2      	ldr	r2, [r4, #24]
 8006484:	4293      	cmp	r3, r2
 8006486:	db12      	blt.n	80064ae <_putc_r+0x5a>
 8006488:	b2eb      	uxtb	r3, r5
 800648a:	2b0a      	cmp	r3, #10
 800648c:	d00f      	beq.n	80064ae <_putc_r+0x5a>
 800648e:	6823      	ldr	r3, [r4, #0]
 8006490:	1c5a      	adds	r2, r3, #1
 8006492:	6022      	str	r2, [r4, #0]
 8006494:	701d      	strb	r5, [r3, #0]
 8006496:	b2ed      	uxtb	r5, r5
 8006498:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800649a:	07da      	lsls	r2, r3, #31
 800649c:	d405      	bmi.n	80064aa <_putc_r+0x56>
 800649e:	89a3      	ldrh	r3, [r4, #12]
 80064a0:	059b      	lsls	r3, r3, #22
 80064a2:	d402      	bmi.n	80064aa <_putc_r+0x56>
 80064a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80064a6:	f7ff faef 	bl	8005a88 <__retarget_lock_release_recursive>
 80064aa:	4628      	mov	r0, r5
 80064ac:	bd70      	pop	{r4, r5, r6, pc}
 80064ae:	4629      	mov	r1, r5
 80064b0:	4622      	mov	r2, r4
 80064b2:	4630      	mov	r0, r6
 80064b4:	f7ff f9b9 	bl	800582a <__swbuf_r>
 80064b8:	4605      	mov	r5, r0
 80064ba:	e7ed      	b.n	8006498 <_putc_r+0x44>

080064bc <_fstat_r>:
 80064bc:	b538      	push	{r3, r4, r5, lr}
 80064be:	4d07      	ldr	r5, [pc, #28]	@ (80064dc <_fstat_r+0x20>)
 80064c0:	2300      	movs	r3, #0
 80064c2:	4604      	mov	r4, r0
 80064c4:	4608      	mov	r0, r1
 80064c6:	4611      	mov	r1, r2
 80064c8:	602b      	str	r3, [r5, #0]
 80064ca:	f7fc fcba 	bl	8002e42 <_fstat>
 80064ce:	1c43      	adds	r3, r0, #1
 80064d0:	d102      	bne.n	80064d8 <_fstat_r+0x1c>
 80064d2:	682b      	ldr	r3, [r5, #0]
 80064d4:	b103      	cbz	r3, 80064d8 <_fstat_r+0x1c>
 80064d6:	6023      	str	r3, [r4, #0]
 80064d8:	bd38      	pop	{r3, r4, r5, pc}
 80064da:	bf00      	nop
 80064dc:	2000062c 	.word	0x2000062c

080064e0 <_isatty_r>:
 80064e0:	b538      	push	{r3, r4, r5, lr}
 80064e2:	4d06      	ldr	r5, [pc, #24]	@ (80064fc <_isatty_r+0x1c>)
 80064e4:	2300      	movs	r3, #0
 80064e6:	4604      	mov	r4, r0
 80064e8:	4608      	mov	r0, r1
 80064ea:	602b      	str	r3, [r5, #0]
 80064ec:	f7fc fcb9 	bl	8002e62 <_isatty>
 80064f0:	1c43      	adds	r3, r0, #1
 80064f2:	d102      	bne.n	80064fa <_isatty_r+0x1a>
 80064f4:	682b      	ldr	r3, [r5, #0]
 80064f6:	b103      	cbz	r3, 80064fa <_isatty_r+0x1a>
 80064f8:	6023      	str	r3, [r4, #0]
 80064fa:	bd38      	pop	{r3, r4, r5, pc}
 80064fc:	2000062c 	.word	0x2000062c

08006500 <_sbrk_r>:
 8006500:	b538      	push	{r3, r4, r5, lr}
 8006502:	4d06      	ldr	r5, [pc, #24]	@ (800651c <_sbrk_r+0x1c>)
 8006504:	2300      	movs	r3, #0
 8006506:	4604      	mov	r4, r0
 8006508:	4608      	mov	r0, r1
 800650a:	602b      	str	r3, [r5, #0]
 800650c:	f7fc fcc2 	bl	8002e94 <_sbrk>
 8006510:	1c43      	adds	r3, r0, #1
 8006512:	d102      	bne.n	800651a <_sbrk_r+0x1a>
 8006514:	682b      	ldr	r3, [r5, #0]
 8006516:	b103      	cbz	r3, 800651a <_sbrk_r+0x1a>
 8006518:	6023      	str	r3, [r4, #0]
 800651a:	bd38      	pop	{r3, r4, r5, pc}
 800651c:	2000062c 	.word	0x2000062c

08006520 <_init>:
 8006520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006522:	bf00      	nop
 8006524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006526:	bc08      	pop	{r3}
 8006528:	469e      	mov	lr, r3
 800652a:	4770      	bx	lr

0800652c <_fini>:
 800652c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800652e:	bf00      	nop
 8006530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006532:	bc08      	pop	{r3}
 8006534:	469e      	mov	lr, r3
 8006536:	4770      	bx	lr
